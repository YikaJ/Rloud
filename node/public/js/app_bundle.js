/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/YikaJ/project/Rloud/node/public/js";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by YikaJ on 15/11/24.
	 */
	'use strict';
	
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	
	var ReactApp = __webpack_require__(159);
	ReactDOM.render(React.createElement(ReactApp, null), document.getElementById("react_app"));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	'use strict';
	
	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);
	
	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);
	
	// `version` will be added here by ReactIsomorphic.
	var React = {};
	
	assign(React, ReactIsomorphic);
	
	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
	
	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});
	
	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
	
	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);
	
	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);
	
	ReactDefaultInjection.inject();
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,
	
	    // shams
	    Object.create, Object.freeze];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);
	
	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};
	
	assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;
	
	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },
	
	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);
	
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	
	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
	
	  parentNode.insertBefore(childNode, beforeChild);
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: setTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
	
	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
	
	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
	
	'use strict';
	
	var toArray = __webpack_require__(12);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	"use strict";
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(17);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};
	
	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);
	
	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);
	
	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	
	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(21);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(15);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
	
	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}
	
	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	
	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);
	
	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
	
	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }
	
	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },
	
	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },
	
	  ownerDocumentContextKey: ownerDocumentContextKey,
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  getNodeFromInstance: getNodeFromInstance,
	
	  isValid: isValid,
	
	  purgeID: purgeID
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);
	
	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(17);
	
	var PropagationPhases = keyMirror({ bubbled: null, captured: null });
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);
	
	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;
	
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }
	
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);
	
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(31);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	'use strict';
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	}
	
	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	
	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }
	
	  return element;
	};
	
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
	
	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	
	  return newElement;
	};
	
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */
	
	'use strict';
	
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}
	
	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};
	
	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactRootIndex = __webpack_require__(46);
	
	var invariant = __webpack_require__(13);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(49);
	
	var TAG_END = /\/?>/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(51);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(52);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	
	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },
	
	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },
	
	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}
	
	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isTextNode = __webpack_require__(60);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;
	
	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;
	
	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isNode = __webpack_require__(61);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';
	
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }
	
	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	
	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedComponent = null;
	
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    // Initialize the public class
	    var inst;
	    var renderedElement;
	
	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);
	
	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }
	
	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);
	
	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }
	
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	
	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.
	
	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);
	
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(17);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);
	
	var assign = __webpack_require__(39);
	
	var placeholderElement;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};
	
	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}
	
	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    parentTag: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.parentTag = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };
	
	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);
	
	var keyOf = __webpack_require__(79);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	
	var warning = __webpack_require__(25);
	
	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	
	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";
	
	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);
	
	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(79);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);
	
	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);
	
	var getEventModifierState = __webpack_require__(88);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	var getEventTarget = __webpack_require__(81);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,
	
	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	'use strict';
	
	var ReactInstanceMap = __webpack_require__(47);
	
	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);
	
	var didWarnKey = '_getDOMNodeDidWarn';
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);
	
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);
	
	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	
	var ELEMENT_NODE_TYPE = 1;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}
	
	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}
	
	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}
	
	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}
	
	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}
	
	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
	
	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}
	
	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  construct: function (element) {
	    this._currentElement = element;
	  },
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }
	
	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }
	
	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }
	
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },
	
	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);
	
	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }
	
	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});
	
	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(28);
	
	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);
	
	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};
	
	var AutoFocusUtils = {
	  Mixin: Mixin,
	
	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);
	
	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	
	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };
	
	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(99);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	"use strict";
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(97);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(102);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	'use strict';
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }
	
	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }
	
	    return nativeProps;
	  }
	};
	
	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },
	
	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);
	
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	
	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);
	
	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);
	
	var valueContextKey = ReactDOMSelect.valueContextKey;
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }
	
	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];
	
	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = '';
	
	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });
	
	    if (content) {
	      nativeProps.children = content;
	    }
	
	    return nativeProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);
	
	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	var didWarnAboutMaps = false;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);
	
	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,
	
	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },
	
	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);
	
	var flattenChildren = __webpack_require__(116);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(50);
	
	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);
	
	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);
	
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }
	
	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}
	
	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);
	
	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
	
	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(15);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function () {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);
	
	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);
	
	var MIXINS_KEY = keyOf({ mixins: null });
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	var injectedMixins = [];
	
	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
	
	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};
	
	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var ReactNoopUpdateQueue = __webpack_require__(124);
	
	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
	
	'use strict';
	
	var warning = __webpack_require__(25);
	
	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }
	
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(127);
	
	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';
	
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);
	
	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);
	
	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	
	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(136);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(86);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	
	var getEventModifierState = __webpack_require__(88);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(86);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	
	var performanceNow = __webpack_require__(144);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {
	
	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	'use strict';
	
	var performance = __webpack_require__(145);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
	
	'use strict';
	
	module.exports = '0.14.8';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
	
	'use strict';
	
	var ReactMount = __webpack_require__(28);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */
	
	'use strict';
	
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);
	
	ReactDefaultInjection.inject();
	
	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};
	
	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';
	
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);
	
	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};
	
	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);
	
	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	
	var mapObject = __webpack_require__(155);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);
	
	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	
	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;
	
	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  return addenda;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(3);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by YikaJ on 15/11/24.
	 */
	'use strict';
	
	var reqwest = __webpack_require__(160);
	var React = __webpack_require__(1);
	var LeftMenu = __webpack_require__(162);
	var RightContent = __webpack_require__(163);
	__webpack_require__(261);
	
	var App = React.createClass({
	  displayName: 'App',
	  getInitialState: function getInitialState() {
	    return {
	      user: {}
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.getUser();
	  },
	  render: function render() {
	    return React.createElement(
	      'div',
	      { id: 'app', className: 'clearfix' },
	      React.createElement(LeftMenu, null),
	      React.createElement(RightContent, { user: this.state.user })
	    );
	  },
	  getUser: function getUser() {
	    var _this = this;
	
	    reqwest({ url: "/api/user" }).then(function (response) {
	      var user = response.data.user;
	      response.code && _this.setState({ user: user });
	    }).catch(function (err) {
	      console.log(err);
	    });
	  }
	});
	
	module.exports = App;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  * Reqwest! A general purpose XHR connection manager
	  * license MIT (c) Dustin Diaz 2015
	  * https://github.com/ded/reqwest
	  */
	
	!function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  else context[name] = definition()
	}('reqwest', this, function () {
	
	  var context = this
	
	  if ('window' in context) {
	    var doc = document
	      , byTag = 'getElementsByTagName'
	      , head = doc[byTag]('head')[0]
	  } else {
	    var XHR2
	    try {
	      XHR2 = __webpack_require__(161)
	    } catch (ex) {
	      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')
	    }
	  }
	
	
	  var httpsRe = /^http/
	    , protocolRe = /(^\w+):\/\//
	    , twoHundo = /^(20\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	    , readyState = 'readyState'
	    , contentType = 'Content-Type'
	    , requestedWith = 'X-Requested-With'
	    , uniqid = 0
	    , callbackPrefix = 'reqwest_' + (+new Date())
	    , lastValue // data stored by the most recent JSONP callback
	    , xmlHttpRequest = 'XMLHttpRequest'
	    , xDomainRequest = 'XDomainRequest'
	    , noop = function () {}
	
	    , isArray = typeof Array.isArray == 'function'
	        ? Array.isArray
	        : function (a) {
	            return a instanceof Array
	          }
	
	    , defaultHeaders = {
	          'contentType': 'application/x-www-form-urlencoded'
	        , 'requestedWith': xmlHttpRequest
	        , 'accept': {
	              '*':  'text/javascript, text/html, application/xml, text/xml, */*'
	            , 'xml':  'application/xml, text/xml'
	            , 'html': 'text/html'
	            , 'text': 'text/plain'
	            , 'json': 'application/json, text/javascript'
	            , 'js':   'application/javascript, text/javascript'
	          }
	      }
	
	    , xhr = function(o) {
	        // is it x-domain
	        if (o['crossOrigin'] === true) {
	          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null
	          if (xhr && 'withCredentials' in xhr) {
	            return xhr
	          } else if (context[xDomainRequest]) {
	            return new XDomainRequest()
	          } else {
	            throw new Error('Browser does not support cross-origin requests')
	          }
	        } else if (context[xmlHttpRequest]) {
	          return new XMLHttpRequest()
	        } else if (XHR2) {
	          return new XHR2()
	        } else {
	          return new ActiveXObject('Microsoft.XMLHTTP')
	        }
	      }
	    , globalSetupOptions = {
	        dataFilter: function (data) {
	          return data
	        }
	      }
	
	  function succeed(r) {
	    var protocol = protocolRe.exec(r.url)
	    protocol = (protocol && protocol[1]) || context.location.protocol
	    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response
	  }
	
	  function handleReadyState(r, success, error) {
	    return function () {
	      // use _aborted to mitigate against IE err c00c023f
	      // (can't read props on aborted request objects)
	      if (r._aborted) return error(r.request)
	      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')
	      if (r.request && r.request[readyState] == 4) {
	        r.request.onreadystatechange = noop
	        if (succeed(r)) success(r.request)
	        else
	          error(r.request)
	      }
	    }
	  }
	
	  function setHeaders(http, o) {
	    var headers = o['headers'] || {}
	      , h
	
	    headers['Accept'] = headers['Accept']
	      || defaultHeaders['accept'][o['type']]
	      || defaultHeaders['accept']['*']
	
	    var isAFormData = typeof FormData !== 'undefined' && (o['data'] instanceof FormData);
	    // breaks cross-origin requests with legacy browsers
	    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']
	    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']
	    for (h in headers)
	      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])
	  }
	
	  function setCredentials(http, o) {
	    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {
	      http.withCredentials = !!o['withCredentials']
	    }
	  }
	
	  function generalCallback(data) {
	    lastValue = data
	  }
	
	  function urlappend (url, s) {
	    return url + (/\?/.test(url) ? '&' : '?') + s
	  }
	
	  function handleJsonp(o, fn, err, url) {
	    var reqId = uniqid++
	      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key
	      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)
	      , cbreg = new RegExp('((^|\\?|&)' + cbkey + ')=([^&]+)')
	      , match = url.match(cbreg)
	      , script = doc.createElement('script')
	      , loaded = 0
	      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1
	
	    if (match) {
	      if (match[3] === '?') {
	        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name
	      } else {
	        cbval = match[3] // provided callback func name
	      }
	    } else {
	      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em
	    }
	
	    context[cbval] = generalCallback
	
	    script.type = 'text/javascript'
	    script.src = url
	    script.async = true
	    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {
	      // need this for IE due to out-of-order onreadystatechange(), binding script
	      // execution to an event listener gives us control over when the script
	      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	      script.htmlFor = script.id = '_reqwest_' + reqId
	    }
	
	    script.onload = script.onreadystatechange = function () {
	      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {
	        return false
	      }
	      script.onload = script.onreadystatechange = null
	      script.onclick && script.onclick()
	      // Call the user callback with the last value stored and clean up values and scripts.
	      fn(lastValue)
	      lastValue = undefined
	      head.removeChild(script)
	      loaded = 1
	    }
	
	    // Add the script to the DOM head
	    head.appendChild(script)
	
	    // Enable JSONP timeout
	    return {
	      abort: function () {
	        script.onload = script.onreadystatechange = null
	        err({}, 'Request is aborted: timeout', {})
	        lastValue = undefined
	        head.removeChild(script)
	        loaded = 1
	      }
	    }
	  }
	
	  function getRequest(fn, err) {
	    var o = this.o
	      , method = (o['method'] || 'GET').toUpperCase()
	      , url = typeof o === 'string' ? o : o['url']
	      // convert non-string objects to query-string form unless o['processData'] is false
	      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')
	        ? reqwest.toQueryString(o['data'])
	        : (o['data'] || null)
	      , http
	      , sendWait = false
	
	    // if we're working on a GET request and we have data then we should append
	    // query string to end of URL and not post data
	    if ((o['type'] == 'jsonp' || method == 'GET') && data) {
	      url = urlappend(url, data)
	      data = null
	    }
	
	    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)
	
	    // get the xhr from the factory if passed
	    // if the factory returns null, fall-back to ours
	    http = (o.xhr && o.xhr(o)) || xhr(o)
	
	    http.open(method, url, o['async'] === false ? false : true)
	    setHeaders(http, o)
	    setCredentials(http, o)
	    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {
	        http.onload = fn
	        http.onerror = err
	        // NOTE: see
	        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e
	        http.onprogress = function() {}
	        sendWait = true
	    } else {
	      http.onreadystatechange = handleReadyState(this, fn, err)
	    }
	    o['before'] && o['before'](http)
	    if (sendWait) {
	      setTimeout(function () {
	        http.send(data)
	      }, 200)
	    } else {
	      http.send(data)
	    }
	    return http
	  }
	
	  function Reqwest(o, fn) {
	    this.o = o
	    this.fn = fn
	
	    init.apply(this, arguments)
	  }
	
	  function setType(header) {
	    // json, javascript, text/plain, text/html, xml
	    if (header === null) return undefined; //In case of no content-type.
	    if (header.match('json')) return 'json'
	    if (header.match('javascript')) return 'js'
	    if (header.match('text')) return 'html'
	    if (header.match('xml')) return 'xml'
	  }
	
	  function init(o, fn) {
	
	    this.url = typeof o == 'string' ? o : o['url']
	    this.timeout = null
	
	    // whether request has been fulfilled for purpose
	    // of tracking the Promises
	    this._fulfilled = false
	    // success handlers
	    this._successHandler = function(){}
	    this._fulfillmentHandlers = []
	    // error handlers
	    this._errorHandlers = []
	    // complete (both success and fail) handlers
	    this._completeHandlers = []
	    this._erred = false
	    this._responseArgs = {}
	
	    var self = this
	
	    fn = fn || function () {}
	
	    if (o['timeout']) {
	      this.timeout = setTimeout(function () {
	        timedOut()
	      }, o['timeout'])
	    }
	
	    if (o['success']) {
	      this._successHandler = function () {
	        o['success'].apply(o, arguments)
	      }
	    }
	
	    if (o['error']) {
	      this._errorHandlers.push(function () {
	        o['error'].apply(o, arguments)
	      })
	    }
	
	    if (o['complete']) {
	      this._completeHandlers.push(function () {
	        o['complete'].apply(o, arguments)
	      })
	    }
	
	    function complete (resp) {
	      o['timeout'] && clearTimeout(self.timeout)
	      self.timeout = null
	      while (self._completeHandlers.length > 0) {
	        self._completeHandlers.shift()(resp)
	      }
	    }
	
	    function success (resp) {
	      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE
	      resp = (type !== 'jsonp') ? self.request : resp
	      // use global data filter on response text
	      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)
	        , r = filteredResponse
	      try {
	        resp.responseText = r
	      } catch (e) {
	        // can't assign this in IE<=8, just ignore
	      }
	      if (r) {
	        switch (type) {
	        case 'json':
	          try {
	            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')
	          } catch (err) {
	            return error(resp, 'Could not parse JSON in response', err)
	          }
	          break
	        case 'js':
	          resp = eval(r)
	          break
	        case 'html':
	          resp = r
	          break
	        case 'xml':
	          resp = resp.responseXML
	              && resp.responseXML.parseError // IE trololo
	              && resp.responseXML.parseError.errorCode
	              && resp.responseXML.parseError.reason
	            ? null
	            : resp.responseXML
	          break
	        }
	      }
	
	      self._responseArgs.resp = resp
	      self._fulfilled = true
	      fn(resp)
	      self._successHandler(resp)
	      while (self._fulfillmentHandlers.length > 0) {
	        resp = self._fulfillmentHandlers.shift()(resp)
	      }
	
	      complete(resp)
	    }
	
	    function timedOut() {
	      self._timedOut = true
	      self.request.abort()
	    }
	
	    function error(resp, msg, t) {
	      resp = self.request
	      self._responseArgs.resp = resp
	      self._responseArgs.msg = msg
	      self._responseArgs.t = t
	      self._erred = true
	      while (self._errorHandlers.length > 0) {
	        self._errorHandlers.shift()(resp, msg, t)
	      }
	      complete(resp)
	    }
	
	    this.request = getRequest.call(this, success, error)
	  }
	
	  Reqwest.prototype = {
	    abort: function () {
	      this._aborted = true
	      this.request.abort()
	    }
	
	  , retry: function () {
	      init.call(this, this.o, this.fn)
	    }
	
	    /**
	     * Small deviation from the Promises A CommonJs specification
	     * http://wiki.commonjs.org/wiki/Promises/A
	     */
	
	    /**
	     * `then` will execute upon successful requests
	     */
	  , then: function (success, fail) {
	      success = success || function () {}
	      fail = fail || function () {}
	      if (this._fulfilled) {
	        this._responseArgs.resp = success(this._responseArgs.resp)
	      } else if (this._erred) {
	        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._fulfillmentHandlers.push(success)
	        this._errorHandlers.push(fail)
	      }
	      return this
	    }
	
	    /**
	     * `always` will execute whether the request succeeds or fails
	     */
	  , always: function (fn) {
	      if (this._fulfilled || this._erred) {
	        fn(this._responseArgs.resp)
	      } else {
	        this._completeHandlers.push(fn)
	      }
	      return this
	    }
	
	    /**
	     * `fail` will execute when the request fails
	     */
	  , fail: function (fn) {
	      if (this._erred) {
	        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._errorHandlers.push(fn)
	      }
	      return this
	    }
	  , 'catch': function (fn) {
	      return this.fail(fn)
	    }
	  }
	
	  function reqwest(o, fn) {
	    return new Reqwest(o, fn)
	  }
	
	  // normalize newline variants according to spec -> CRLF
	  function normalize(s) {
	    return s ? s.replace(/\r?\n/g, '\r\n') : ''
	  }
	
	  function serial(el, cb) {
	    var n = el.name
	      , t = el.tagName.toLowerCase()
	      , optCb = function (o) {
	          // IE gives value="" even where there is no value attribute
	          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273
	          if (o && !o['disabled'])
	            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))
	        }
	      , ch, ra, val, i
	
	    // don't serialize elements that are disabled or without a name
	    if (el.disabled || !n) return
	
	    switch (t) {
	    case 'input':
	      if (!/reset|button|image|file/i.test(el.type)) {
	        ch = /checkbox/i.test(el.type)
	        ra = /radio/i.test(el.type)
	        val = el.value
	        // WebKit gives us "" instead of "on" if a checkbox has no value, so correct it here
	        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))
	      }
	      break
	    case 'textarea':
	      cb(n, normalize(el.value))
	      break
	    case 'select':
	      if (el.type.toLowerCase() === 'select-one') {
	        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)
	      } else {
	        for (i = 0; el.length && i < el.length; i++) {
	          el.options[i].selected && optCb(el.options[i])
	        }
	      }
	      break
	    }
	  }
	
	  // collect up all form elements found from the passed argument elements all
	  // the way down to child elements; pass a '<form>' or form fields.
	  // called with 'this'=callback to use for serial() on each element
	  function eachFormElement() {
	    var cb = this
	      , e, i
	      , serializeSubtags = function (e, tags) {
	          var i, j, fa
	          for (i = 0; i < tags.length; i++) {
	            fa = e[byTag](tags[i])
	            for (j = 0; j < fa.length; j++) serial(fa[j], cb)
	          }
	        }
	
	    for (i = 0; i < arguments.length; i++) {
	      e = arguments[i]
	      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)
	      serializeSubtags(e, [ 'input', 'select', 'textarea' ])
	    }
	  }
	
	  // standard query string style serialization
	  function serializeQueryString() {
	    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))
	  }
	
	  // { 'name': 'value', ... } style serialization
	  function serializeHash() {
	    var hash = {}
	    eachFormElement.apply(function (name, value) {
	      if (name in hash) {
	        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])
	        hash[name].push(value)
	      } else hash[name] = value
	    }, arguments)
	    return hash
	  }
	
	  // [ { name: 'name', value: 'value' }, ... ] style serialization
	  reqwest.serializeArray = function () {
	    var arr = []
	    eachFormElement.apply(function (name, value) {
	      arr.push({name: name, value: value})
	    }, arguments)
	    return arr
	  }
	
	  reqwest.serialize = function () {
	    if (arguments.length === 0) return ''
	    var opt, fn
	      , args = Array.prototype.slice.call(arguments, 0)
	
	    opt = args.pop()
	    opt && opt.nodeType && args.push(opt) && (opt = null)
	    opt && (opt = opt.type)
	
	    if (opt == 'map') fn = serializeHash
	    else if (opt == 'array') fn = reqwest.serializeArray
	    else fn = serializeQueryString
	
	    return fn.apply(null, args)
	  }
	
	  reqwest.toQueryString = function (o, trad) {
	    var prefix, i
	      , traditional = trad || false
	      , s = []
	      , enc = encodeURIComponent
	      , add = function (key, value) {
	          // If value is a function, invoke it and return its value
	          value = ('function' === typeof value) ? value() : (value == null ? '' : value)
	          s[s.length] = enc(key) + '=' + enc(value)
	        }
	    // If an array was passed in, assume that it is an array of form elements.
	    if (isArray(o)) {
	      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])
	    } else {
	      // If traditional, encode the "old" way (the way 1.3.2 or older
	      // did it), otherwise encode params recursively.
	      for (prefix in o) {
	        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)
	      }
	    }
	
	    // spaces should be + according to spec
	    return s.join('&').replace(/%20/g, '+')
	  }
	
	  function buildParams(prefix, obj, traditional, add) {
	    var name, i, v
	      , rbracket = /\[\]$/
	
	    if (isArray(obj)) {
	      // Serialize array item.
	      for (i = 0; obj && i < obj.length; i++) {
	        v = obj[i]
	        if (traditional || rbracket.test(prefix)) {
	          // Treat each array item as a scalar.
	          add(prefix, v)
	        } else {
	          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)
	        }
	      }
	    } else if (obj && obj.toString() === '[object Object]') {
	      // Serialize object item.
	      for (name in obj) {
	        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
	      }
	
	    } else {
	      // Serialize scalar item.
	      add(prefix, obj)
	    }
	  }
	
	  reqwest.getcallbackPrefix = function () {
	    return callbackPrefix
	  }
	
	  // jQuery and Zepto compatibility, differences can be remapped here so you can call
	  // .ajax.compat(options, callback)
	  reqwest.compat = function (o, fn) {
	    if (o) {
	      o['type'] && (o['method'] = o['type']) && delete o['type']
	      o['dataType'] && (o['type'] = o['dataType'])
	      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']
	      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])
	    }
	    return new Reqwest(o, fn)
	  }
	
	  reqwest.ajaxSetup = function (options) {
	    options = options || {}
	    for (var k in options) {
	      globalSetupOptions[k] = options[k]
	    }
	  }
	
	  return reqwest
	});


/***/ },
/* 161 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by YikaJ on 15/11/24.
	 */
	'use strict';
	
	var React = __webpack_require__(1);
	
	var LeftMenu = React.createClass({
	  displayName: 'LeftMenu',
	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: 'leftMenu pull-left' },
	      React.createElement(
	        'div',
	        { className: 'left_header' },
	        'Rloud 云平台'
	      ),
	      React.createElement(
	        'ul',
	        { className: 'menu' },
	        React.createElement(
	          'li',
	          null,
	          React.createElement('i', { className: 'mdi-hardware-desktop-windows' }),
	          React.createElement(
	            'span',
	            null,
	            '我的设备'
	          )
	        ),
	        React.createElement(
	          'li',
	          null,
	          React.createElement('i', { className: 'mdi-action-query-builder' }),
	          React.createElement(
	            'span',
	            null,
	            '历史数据'
	          )
	        ),
	        React.createElement(
	          'li',
	          null,
	          React.createElement('i', { className: 'mdi-action-trending-up' }),
	          React.createElement(
	            'span',
	            null,
	            '趋势图'
	          )
	        ),
	        React.createElement(
	          'li',
	          null,
	          React.createElement('i', { className: 'mdi-content-add' }),
	          React.createElement(
	            'span',
	            null,
	            '新增设备'
	          )
	        )
	      )
	    );
	  }
	});
	
	module.exports = LeftMenu;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by YikaJ on 15/11/24.
	 */
	'use strict';
	
	var React = __webpack_require__(1);
	
	// 数据流
	var io = __webpack_require__(164);
	var socket = io.connect("http://localhost:3333");
	
	// Component
	var BarChart = __webpack_require__(165);
	
	var RightContent = React.createClass({
	  displayName: 'RightContent',
	  getInitialState: function getInitialState() {
	    return {
	      data: {}
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    var _this = this;
	
	    socket.on("data", function (data) {
	      _this.setState({ data: data });
	    });
	
	    /**
	     * 对错误的控制与处理
	     * 2: 未登陆
	     *
	     */
	    socket.on("err", function (data) {
	      // 数据与实现分离
	      var errHandle = {
	        2: function _() {
	          return location.href = "/login";
	        }
	      };
	      var defaultDef = function defaultDef() {
	        return location.href = "/";
	      };
	
	      (errHandle[data.code] || defaultDef)();
	    });
	  },
	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: 'rightContent pull-right' },
	      React.createElement(
	        'div',
	        { className: 'right_header clearfix' },
	        React.createElement(
	          'div',
	          { className: 'pull-right' },
	          React.createElement(
	            'a',
	            { href: 'javascript:', className: 'btn btn-reg' },
	            this.props.user.username || 'Rloud'
	          ),
	          React.createElement(
	            'a',
	            { href: '/logout', className: 'btn' },
	            '登出'
	          )
	        )
	      ),
	      React.createElement(
	        'div',
	        { className: 'content' },
	        React.createElement(BarChart, { deviceId: '1', data: this.state.data })
	      )
	    );
	  }
	});
	
	module.exports = RightContent;

/***/ },
/* 164 */
/***/ function(module, exports) {

	module.exports = io;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by YikaJ on 15/12/8.
	 */
	'use strict';
	
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	
	// echarts
	var ec = __webpack_require__(166);
	//let theme = require('echarts/theme/mint');
	var options = __webpack_require__(248);
	
	var BarChart = React.createClass({
	  displayName: 'BarChart',
	  componentDidMount: function componentDidMount() {
	    // echarts的配置
	
	    this.barChart = ec.init(this.refs.barChart);
	    this.barChart.setOption(options);
	  },
	  componentWillUpdate: function componentWillUpdate(nextProps) {
	    var data = nextProps.data;
	
	    if (Array.isArray(data)) {
	      data.forEach(this.addData);
	    } else {
	      this.addData(data);
	    }
	  },
	  addData: function addData(data) {
	    var date = new Date();
	    if (this.props.deviceId == data.deviceId) {
	      this.barChart.addData(0, data.value, false, false, date.getMinutes() + ': ' + date.getSeconds());
	    }
	  },
	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: 'charts' },
	      React.createElement('div', { ref: 'barChart', id: 'barChart', style: { height: '400px' } })
	    );
	  }
	});
	
	module.exports = BarChart;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */
	
	/**
	 * echarts
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ecConfig = __webpack_require__(167);
	    var zrUtil = __webpack_require__(168);
	    var zrEvent = __webpack_require__(170);
	
	    var self = {};
	
	    var _canvasSupported = __webpack_require__(172).canvasSupported;
	    var _idBase = new Date() - 0;
	    var _instances = {};    // ECharts实例map索引
	    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	
	    self.version = '2.2.7';
	    self.dependencies = {
	        zrender: '2.1.1'
	    };
	    /**
	     * 入口方法
	     */
	    self.init = function (dom, theme) {
	        var zrender = __webpack_require__(173);
	        if ((zrender.version.replace('.', '') - 0) < (self.dependencies.zrender.replace('.', '') - 0)) {
	            console.error(
	                'ZRender ' + zrender.version
	                + ' is too old for ECharts ' + self.version
	                + '. Current version need ZRender '
	                + self.dependencies.zrender + '+'
	            );
	        }
	
	        dom = dom instanceof Array ? dom[0] : dom;
	
	        // dom与echarts实例映射索引
	        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	        if (!key) {
	            key = _idBase++;
	            dom.setAttribute(DOM_ATTRIBUTE_KEY, key);
	        }
	
	        if (_instances[key]) {
	            // 同一个dom上多次init，自动释放已有实例
	            _instances[key].dispose();
	        }
	        _instances[key] = new Echarts(dom);
	        _instances[key].id = key;
	        _instances[key].canvasSupported = _canvasSupported;
	        _instances[key].setTheme(theme);
	
	        return _instances[key];
	    };
	
	    /**
	     * 通过id获得ECharts实例，id可在实例化后读取
	     */
	    self.getInstanceById = function (key) {
	        return _instances[key];
	    };
	
	    /**
	     * 消息中心
	     */
	    function MessageCenter() {
	        zrEvent.Dispatcher.call(this);
	    }
	    zrUtil.merge(MessageCenter.prototype, zrEvent.Dispatcher.prototype, true);
	
	    /**
	     * 基于zrender实现Echarts接口层
	     * @param {HtmlElement} dom 必要
	     */
	    function Echarts(dom) {
	        // Fxxk IE11 for breaking initialization without a warrant;
	        // Just set something to let it be!
	        // by kener 2015-01-09
	        dom.innerHTML = '';
	        this._themeConfig = {}; // zrUtil.clone(ecConfig);
	
	        this.dom = dom;
	        // this._zr;
	        // this._option;                    // curOption clone
	        // this._optionRestore;             // for restore;
	        // this._island;
	        // this._toolbox;
	        // this._timeline;
	        // this._refreshInside;             // 内部刷新标志位
	
	        this._connected = false;
	        this._status = {                    // 用于图表间通信
	            dragIn: false,
	            dragOut: false,
	            needRefresh: false
	        };
	        this._curEventType = false;         // 破循环信号灯
	        this._chartList = [];               // 图表实例
	
	        this._messageCenter = new MessageCenter();
	
	        this._messageCenterOutSide = new MessageCenter();    // Echarts层的外部消息中心，做Echarts层的消息转发
	
	        // resize方法经常被绑定到window.resize上，闭包一个this
	        this.resize = this.resize();
	
	        // 初始化::构造函数
	        this._init();
	    }
	
	    /**
	     * ZRender EVENT
	     *
	     * @inner
	     * @const
	     * @type {Object}
	     */
	    var ZR_EVENT = __webpack_require__(175).EVENT;
	
	    /**
	     * 要绑定监听的zrender事件列表
	     *
	     * @const
	     * @inner
	     * @type {Array}
	     */
	    var ZR_EVENT_LISTENS = [
	        'CLICK', 'DBLCLICK', 'MOUSEOVER', 'MOUSEOUT',
	        'DRAGSTART', 'DRAGEND', 'DRAGENTER', 'DRAGOVER', 'DRAGLEAVE', 'DROP'
	    ];
	
	    /**
	     * 对echarts的实例中的chartList属性成员，逐个进行方法调用，遍历顺序为逆序
	     * 由于在事件触发的默认行为处理中，多次用到相同逻辑，所以抽象了该方法
	     * 由于所有的调用场景里，最多只有两个参数，基于性能和体积考虑，这里就不使用call或者apply了
	     *
	     * @inner
	     * @param {ECharts} ecInstance ECharts实例
	     * @param {string} methodName 要调用的方法名
	     * @param {*} arg0 调用参数1
	     * @param {*} arg1 调用参数2
	     * @param {*} arg2 调用参数3
	     */
	    function callChartListMethodReverse(ecInstance, methodName, arg0, arg1, arg2) {
	        var chartList = ecInstance._chartList;
	        var len = chartList.length;
	
	        while (len--) {
	            var chart = chartList[len];
	            if (typeof chart[methodName] === 'function') {
	                chart[methodName](arg0, arg1, arg2);
	            }
	        }
	    }
	
	    Echarts.prototype = {
	        /**
	         * 初始化::构造函数
	         */
	        _init: function () {
	            var self = this;
	            var _zr = __webpack_require__(173).init(this.dom);
	            this._zr = _zr;
	
	            // wrap: n,e,d,t for name event data this
	            this._messageCenter.dispatch = function(type, event, eventPackage, that) {
	                eventPackage = eventPackage || {};
	                eventPackage.type = type;
	                eventPackage.event = event;
	
	                self._messageCenter.dispatchWithContext(type, eventPackage, that);
	                self._messageCenterOutSide.dispatchWithContext(type, eventPackage, that);
	
	                // 如下注掉的代码，@see: https://github.com/ecomfe/echarts-discuss/issues/3
	                // if (type != 'HOVER' && type != 'MOUSEOUT') {    // 频繁事件直接抛出
	                //     setTimeout(function(){
	                //         self._messageCenterOutSide.dispatchWithContext(
	                //             type, eventPackage, that
	                //         );
	                //     },50);
	                // }
	                // else {
	                //     self._messageCenterOutSide.dispatchWithContext(
	                //         type, eventPackage, that
	                //     );
	                // }
	            };
	
	            this._onevent = function(param){
	                return self.__onevent(param);
	            };
	            for (var e in ecConfig.EVENT) {
	                if (e != 'CLICK' && e != 'DBLCLICK'
	                    && e != 'HOVER' && e != 'MOUSEOUT' && e != 'MAP_ROAM'
	                ) {
	                    this._messageCenter.bind(ecConfig.EVENT[e], this._onevent, this);
	                }
	            }
	
	
	            var eventBehaviors = {};
	            this._onzrevent = function (param) {
	                return self[eventBehaviors[ param.type ]](param);
	            };
	
	            // 挂载关心的事件
	            for (var i = 0, len = ZR_EVENT_LISTENS.length; i < len; i++) {
	                var eventName = ZR_EVENT_LISTENS[i];
	                var eventValue = ZR_EVENT[eventName];
	                eventBehaviors[eventValue] = '_on' + eventName.toLowerCase();
	                _zr.on(eventValue, this._onzrevent);
	            }
	
	            this.chart = {};            // 图表索引
	            this.component = {};        // 组件索引
	
	            // 内置图表
	            // 孤岛
	            var Island = __webpack_require__(196);
	            this._island = new Island(this._themeConfig, this._messageCenter, _zr, {}, this);
	            this.chart.island = this._island;
	
	            // 内置通用组件
	            // 工具箱
	            var Toolbox = __webpack_require__(227);
	            this._toolbox = new Toolbox(this._themeConfig, this._messageCenter, _zr, {}, this);
	            this.component.toolbox = this._toolbox;
	
	            var componentLibrary = __webpack_require__(229);
	            componentLibrary.define('title', __webpack_require__(230));
	            componentLibrary.define('tooltip', __webpack_require__(231));
	            componentLibrary.define('legend', __webpack_require__(233));
	
	            if (_zr.getWidth() === 0 || _zr.getHeight() === 0) {
	                console.error('Dom’s width & height should be ready before init.');
	            }
	        },
	
	        /**
	         * ECharts事件处理中心
	         */
	        __onevent: function (param){
	            param.__echartsId = param.__echartsId || this.id;
	
	            // 来自其他联动图表的事件
	            var fromMyself = (param.__echartsId === this.id);
	
	            if (!this._curEventType) {
	                this._curEventType = param.type;
	            }
	
	            switch (param.type) {
	                case ecConfig.EVENT.LEGEND_SELECTED :
	                    this._onlegendSelected(param);
	                    break;
	                case ecConfig.EVENT.DATA_ZOOM :
	                    if (!fromMyself) {
	                        var dz = this.component.dataZoom;
	                        if (dz) {
	                            dz.silence(true);
	                            dz.absoluteZoom(param.zoom);
	                            dz.silence(false);
	                        }
	                    }
	                    this._ondataZoom(param);
	                    break;
	                case ecConfig.EVENT.DATA_RANGE :
	                    fromMyself && this._ondataRange(param);
	                    break;
	                case ecConfig.EVENT.MAGIC_TYPE_CHANGED :
	                    if (!fromMyself) {
	                        var tb = this.component.toolbox;
	                        if (tb) {
	                            tb.silence(true);
	                            tb.setMagicType(param.magicType);
	                            tb.silence(false);
	                        }
	                    }
	                    this._onmagicTypeChanged(param);
	                    break;
	                case ecConfig.EVENT.DATA_VIEW_CHANGED :
	                    fromMyself && this._ondataViewChanged(param);
	                    break;
	                case ecConfig.EVENT.TOOLTIP_HOVER :
	                    fromMyself && this._tooltipHover(param);
	                    break;
	                case ecConfig.EVENT.RESTORE :
	                    this._onrestore();
	                    break;
	                case ecConfig.EVENT.REFRESH :
	                    fromMyself && this._onrefresh(param);
	                    break;
	                // 鼠标同步
	                case ecConfig.EVENT.TOOLTIP_IN_GRID :
	                case ecConfig.EVENT.TOOLTIP_OUT_GRID :
	                    if (!fromMyself) {
	                        // 只处理来自外部的鼠标同步
	                        var grid = this.component.grid;
	                        if (grid) {
	                            this._zr.trigger(
	                                'mousemove',
	                                {
	                                    connectTrigger: true,
	                                    zrenderX: grid.getX() + param.x * grid.getWidth(),
	                                    zrenderY: grid.getY() + param.y * grid.getHeight()
	                                }
	                            );
	                        }
	                    }
	                    else if (this._connected) {
	                        // 来自自己，并且存在多图联动，空间坐标映射修改参数分发
	                        var grid = this.component.grid;
	                        if (grid) {
	                            param.x = (param.event.zrenderX - grid.getX()) / grid.getWidth();
	                            param.y = (param.event.zrenderY - grid.getY()) / grid.getHeight();
	                        }
	                    }
	                    break;
	                /*
	                case ecConfig.EVENT.RESIZE :
	                case ecConfig.EVENT.DATA_CHANGED :
	                case ecConfig.EVENT.PIE_SELECTED :
	                case ecConfig.EVENT.MAP_SELECTED :
	                    break;
	                */
	            }
	
	            // 多图联动，只做自己的一级事件分发，避免级联事件循环
	            if (this._connected && fromMyself && this._curEventType === param.type) {
	                for (var c in this._connected) {
	                    this._connected[c].connectedEventHandler(param);
	                }
	                // 分发完毕后复位
	                this._curEventType = null;
	            }
	
	            if (!fromMyself || (!this._connected && fromMyself)) {  // 处理了完联动事件复位
	                this._curEventType = null;
	            }
	        },
	
	        /**
	         * 点击事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _onclick: function (param) {
	            callChartListMethodReverse(this, 'onclick', param);
	
	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.CLICK,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },
	
	        /**
	         * 双击事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _ondblclick: function (param) {
	            callChartListMethodReverse(this, 'ondblclick', param);
	
	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.DBLCLICK,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },
	
	        /**
	         * 鼠标移入事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _onmouseover: function (param) {
	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.HOVER,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },
	
	        /**
	         * 鼠标移出事件，响应zrender事件，包装后分发到Echarts层
	         */
	        _onmouseout: function (param) {
	            if (param.target) {
	                var ecData = this._eventPackage(param.target);
	                if (ecData && ecData.seriesIndex != null) {
	                    this._messageCenter.dispatch(
	                        ecConfig.EVENT.MOUSEOUT,
	                        param.event,
	                        ecData,
	                        this
	                    );
	                }
	            }
	        },
	
	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondragstart: function (param) {
	            // 复位用于图表间通信拖拽标识
	            this._status = {
	                dragIn: false,
	                dragOut: false,
	                needRefresh: false
	            };
	
	            callChartListMethodReverse(this, 'ondragstart', param);
	        },
	
	        /**
	         * dragging回调，可计算特性实现
	         */
	        _ondragenter: function (param) {
	            callChartListMethodReverse(this, 'ondragenter', param);
	        },
	
	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondragover: function (param) {
	            callChartListMethodReverse(this, 'ondragover', param);
	        },
	
	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondragleave: function (param) {
	            callChartListMethodReverse(this, 'ondragleave', param);
	        },
	
	        /**
	         * dragstart回调，可计算特性实现
	         */
	        _ondrop: function (param) {
	            callChartListMethodReverse(this, 'ondrop', param, this._status);
	            this._island.ondrop(param, this._status);
	        },
	
	        /**
	         * dragdone回调 ，可计算特性实现
	         */
	        _ondragend: function (param) {
	            callChartListMethodReverse(this, 'ondragend', param, this._status);
	
	            this._timeline && this._timeline.ondragend(param, this._status);
	            this._island.ondragend(param, this._status);
	
	            // 发生过重计算
	            if (this._status.needRefresh) {
	                this._syncBackupData(this._option);
	
	                var messageCenter = this._messageCenter;
	                messageCenter.dispatch(
	                    ecConfig.EVENT.DATA_CHANGED,
	                    param.event,
	                    this._eventPackage(param.target),
	                    this
	                );
	                messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	            }
	        },
	
	        /**
	         * 图例选择响应
	         */
	        _onlegendSelected: function (param) {
	            // 用于图表间通信
	            this._status.needRefresh = false;
	            callChartListMethodReverse(this, 'onlegendSelected', param, this._status);
	
	            if (this._status.needRefresh) {
	                this._messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	            }
	        },
	
	        /**
	         * 数据区域缩放响应
	         */
	        _ondataZoom: function (param) {
	            // 用于图表间通信
	            this._status.needRefresh = false;
	            callChartListMethodReverse(this, 'ondataZoom', param, this._status);
	
	            if (this._status.needRefresh) {
	                this._messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	            }
	        },
	
	        /**
	         * 值域漫游响应
	         */
	        _ondataRange: function (param) {
	            this._clearEffect();
	            // 用于图表间通信
	            this._status.needRefresh = false;
	            callChartListMethodReverse(this, 'ondataRange', param, this._status);
	
	            // 没有相互影响，直接刷新即可
	            if (this._status.needRefresh) {
	                this._zr.refreshNextFrame();
	            }
	        },
	
	        /**
	         * 动态类型切换响应
	         */
	        _onmagicTypeChanged: function () {
	            this._clearEffect();
	            this._render(this._toolbox.getMagicOption());
	        },
	
	        /**
	         * 数据视图修改响应
	         */
	        _ondataViewChanged: function (param) {
	            this._syncBackupData(param.option);
	            this._messageCenter.dispatch(
	                ecConfig.EVENT.DATA_CHANGED,
	                null,
	                param,
	                this
	            );
	            this._messageCenter.dispatch(ecConfig.EVENT.REFRESH, null, null, this);
	        },
	
	        /**
	         * tooltip与图表间通信
	         */
	        _tooltipHover: function (param) {
	            var tipShape = [];
	            callChartListMethodReverse(this, 'ontooltipHover', param, tipShape);
	        },
	
	        /**
	         * 还原
	         */
	        _onrestore: function () {
	            this.restore();
	        },
	
	        /**
	         * 刷新
	         */
	        _onrefresh: function (param) {
	            this._refreshInside = true;
	            this.refresh(param);
	            this._refreshInside = false;
	        },
	
	        /**
	         * 数据修改后的反向同步dataZoom持有的备份数据
	         */
	        _syncBackupData: function (curOption) {
	            this.component.dataZoom && this.component.dataZoom.syncBackupData(curOption);
	        },
	
	        /**
	         * 打包Echarts层的事件附件
	         */
	        _eventPackage: function (target) {
	            if (target) {
	                var ecData = __webpack_require__(215);
	
	                var seriesIndex = ecData.get(target, 'seriesIndex');
	                var dataIndex = ecData.get(target, 'dataIndex');
	
	                dataIndex = seriesIndex != -1 && this.component.dataZoom
	                            ? this.component.dataZoom.getRealDataIndex(
	                                seriesIndex,
	                                dataIndex
	                              )
	                            : dataIndex;
	                return {
	                    seriesIndex: seriesIndex,
	                    seriesName: (ecData.get(target, 'series') || {}).name,
	                    dataIndex: dataIndex,
	                    data: ecData.get(target, 'data'),
	                    name: ecData.get(target, 'name'),
	                    value: ecData.get(target, 'value'),
	                    special: ecData.get(target, 'special')
	                };
	            }
	            return;
	        },
	
	        _noDataCheck: function(magicOption) {
	            var series = magicOption.series;
	
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].type == ecConfig.CHART_TYPE_MAP
	                    || (series[i].data && series[i].data.length > 0)
	                    || (series[i].markPoint && series[i].markPoint.data && series[i].markPoint.data.length > 0)
	                    || (series[i].markLine && series[i].markLine.data && series[i].markLine.data.length > 0)
	                    || (series[i].nodes && series[i].nodes.length > 0)
	                    || (series[i].links && series[i].links.length > 0)
	                    || (series[i].matrix && series[i].matrix.length > 0)
	                    || (series[i].eventList && series[i].eventList.length > 0)
	                ) {
	                    return false;   // 存在任意数据则为非空数据
	                }
	            }
	            var loadOption = (this._option && this._option.noDataLoadingOption)
	                || this._themeConfig.noDataLoadingOption
	                || ecConfig.noDataLoadingOption
	                || {
	                    text: (this._option && this._option.noDataText)
	                          || this._themeConfig.noDataText
	                          || ecConfig.noDataText,
	                    effect: (this._option && this._option.noDataEffect)
	                            || this._themeConfig.noDataEffect
	                            || ecConfig.noDataEffect
	                };
	            // 空数据
	            this.clear();
	            this.showLoading(loadOption);
	            return true;
	        },
	
	        /**
	         * 图表渲染
	         */
	        _render: function (magicOption) {
	            this._mergeGlobalConifg(magicOption);
	
	            if (this._noDataCheck(magicOption)) {
	                return;
	            }
	
	            var bgColor = magicOption.backgroundColor;
	            if (bgColor) {
	                if (!_canvasSupported
	                    && bgColor.indexOf('rgba') != -1
	                ) {
	                    // IE6~8对RGBA的处理，filter会带来其他颜色的影响
	                    var cList = bgColor.split(',');
	                    this.dom.style.filter = 'alpha(opacity=' +
	                        cList[3].substring(0, cList[3].lastIndexOf(')')) * 100
	                        + ')';
	                    cList.length = 3;
	                    cList[0] = cList[0].replace('a', '');
	                    this.dom.style.backgroundColor = cList.join(',') + ')';
	                }
	                else {
	                    this.dom.style.backgroundColor = bgColor;
	                }
	            }
	
	            this._zr.clearAnimation();
	            this._chartList = [];
	
	            var chartLibrary = __webpack_require__(226);
	            var componentLibrary = __webpack_require__(229);
	
	            if (magicOption.xAxis || magicOption.yAxis) {
	                magicOption.grid = magicOption.grid || {};
	                magicOption.dataZoom = magicOption.dataZoom || {};
	            }
	
	            var componentList = [
	                'title', 'legend', 'tooltip', 'dataRange', 'roamController',
	                'grid', 'dataZoom', 'xAxis', 'yAxis', 'polar'
	            ];
	
	            var ComponentClass;
	            var componentType;
	            var component;
	            for (var i = 0, l = componentList.length; i < l; i++) {
	                componentType = componentList[i];
	                component = this.component[componentType];
	
	                if (magicOption[componentType]) {
	                    if (component) {
	                        component.refresh && component.refresh(magicOption);
	                    }
	                    else {
	                        ComponentClass = componentLibrary.get(
	                            /^[xy]Axis$/.test(componentType) ? 'axis' : componentType
	                        );
	                        component = new ComponentClass(
	                            this._themeConfig, this._messageCenter, this._zr,
	                            magicOption, this, componentType
	                        );
	                        this.component[componentType] = component;
	                    }
	                    this._chartList.push(component);
	                }
	                else if (component) {
	                    component.dispose();
	                    this.component[componentType] = null;
	                    delete this.component[componentType];
	                }
	            }
	
	            var ChartClass;
	            var chartType;
	            var chart;
	            var chartMap = {};      // 记录已经初始化的图表
	            for (var i = 0, l = magicOption.series.length; i < l; i++) {
	                chartType = magicOption.series[i].type;
	                if (!chartType) {
	                    console.error('series[' + i + '] chart type has not been defined.');
	                    continue;
	                }
	
	                if (!chartMap[chartType]) {
	                    chartMap[chartType] = true;
	                    ChartClass = chartLibrary.get(chartType);
	                    if (ChartClass) {
	                        if (this.chart[chartType]) {
	                            chart = this.chart[chartType];
	                            chart.refresh(magicOption);
	                        }
	                        else {
	                            chart = new ChartClass(
	                                this._themeConfig, this._messageCenter, this._zr,
	                                magicOption, this
	                            );
	                        }
	                        this._chartList.push(chart);
	                        this.chart[chartType] = chart;
	                    }
	                    else {
	                        console.error(chartType + ' has not been required.');
	                    }
	                }
	            }
	
	            // 已有实例但新option不带这类图表的实例释放
	            for (chartType in this.chart) {
	                if (chartType != ecConfig.CHART_TYPE_ISLAND  && !chartMap[chartType]) {
	                    this.chart[chartType].dispose();
	                    this.chart[chartType] = null;
	                    delete this.chart[chartType];
	                }
	            }
	
	            this.component.grid && this.component.grid.refixAxisShape(this.component);
	
	            this._island.refresh(magicOption);
	            this._toolbox.refresh(magicOption);
	
	            magicOption.animation && !magicOption.renderAsImage
	                ? this._zr.refresh()
	                : this._zr.render();
	
	            var imgId = 'IMG' + this.id;
	            var img = document.getElementById(imgId);
	            if (magicOption.renderAsImage && _canvasSupported) {
	                // IE8- 不支持图片渲染形式
	                if (img) {
	                    // 已经渲染过则更新显示
	                    img.src = this.getDataURL(magicOption.renderAsImage);
	                }
	                else {
	                    // 没有渲染过插入img dom
	                    img = this.getImage(magicOption.renderAsImage);
	                    img.id = imgId;
	                    img.style.position = 'absolute';
	                    img.style.left = 0;
	                    img.style.top = 0;
	                    this.dom.firstChild.appendChild(img);
	                }
	                this.un();
	                this._zr.un();
	                this._disposeChartList();
	                this._zr.clear();
	            }
	            else if (img) {
	                // 删除可能存在的img
	                img.parentNode.removeChild(img);
	            }
	            img = null;
	
	            this._option = magicOption;
	        },
	
	        /**
	         * 还原
	         */
	        restore: function () {
	            this._clearEffect();
	            this._option = zrUtil.clone(this._optionRestore);
	            this._disposeChartList();
	            this._island.clear();
	            this._toolbox.reset(this._option, true);
	            this._render(this._option);
	        },
	
	        /**
	         * 刷新
	         * @param {Object=} param，可选参数，用于附带option，内部同步用，外部不建议带入数据修改，无法同步
	         */
	        refresh: function (param) {
	            this._clearEffect();
	            param = param || {};
	            var magicOption = param.option;
	
	            // 外部调用的refresh且有option带入
	            if (!this._refreshInside && magicOption) {
	                // 做简单的差异合并去同步内部持有的数据克隆，不建议带入数据
	                // 开启数据区域缩放、拖拽重计算、数据视图可编辑模式情况下，当用户产生了数据变化后无法同步
	                // 如有带入option存在数据变化，请重新setOption
	                magicOption = this.getOption();
	                zrUtil.merge(magicOption, param.option, true);
	                zrUtil.merge(this._optionRestore, param.option, true);
	                this._toolbox.reset(magicOption);
	            }
	
	            this._island.refresh(magicOption);
	            this._toolbox.refresh(magicOption);
	
	            // 停止动画
	            this._zr.clearAnimation();
	            // 先来后到，安顺序刷新各种图表，图表内部refresh优化检查magicOption，无需更新则不更新~
	            for (var i = 0, l = this._chartList.length; i < l; i++) {
	                this._chartList[i].refresh && this._chartList[i].refresh(magicOption);
	            }
	            this.component.grid && this.component.grid.refixAxisShape(this.component);
	            this._zr.refresh();
	        },
	
	        /**
	         * 释放图表实例
	         */
	        _disposeChartList: function () {
	            this._clearEffect();
	
	            // 停止动画
	            this._zr.clearAnimation();
	
	            var len = this._chartList.length;
	            while (len--) {
	                var chart = this._chartList[len];
	
	                if (chart) {
	                    var chartType = chart.type;
	                    this.chart[chartType] && delete this.chart[chartType];
	                    this.component[chartType] && delete this.component[chartType];
	                    chart.dispose && chart.dispose();
	                }
	            }
	
	            this._chartList = [];
	        },
	
	        /**
	         * 非图表全局属性merge~~
	         */
	        _mergeGlobalConifg: function (magicOption) {
	            var mergeList = [
	                // 背景颜色
	                'backgroundColor',
	
	                // 拖拽重计算相关
	                'calculable', 'calculableColor', 'calculableHolderColor',
	
	                // 孤岛显示连接符
	                'nameConnector', 'valueConnector',
	
	                // 动画相关
	                'animation', 'animationThreshold',
	                'animationDuration', 'animationDurationUpdate',
	                'animationEasing', 'addDataAnimation',
	
	                // 默认标志图形类型列表
	                'symbolList',
	
	                // 降低图表内元素拖拽敏感度，单位ms，不建议外部干预
	                'DRAG_ENABLE_TIME'
	            ];
	
	            var len = mergeList.length;
	            while (len--) {
	                var mergeItem = mergeList[len];
	                if (magicOption[mergeItem] == null) {
	                    magicOption[mergeItem] = this._themeConfig[mergeItem] != null
	                        ? this._themeConfig[mergeItem]
	                        : ecConfig[mergeItem];
	                }
	            }
	
	            // 数值系列的颜色列表，不传则采用内置颜色，可配数组，借用zrender实例注入，会有冲突风险，先这样
	            var themeColor = magicOption.color;
	            if (!(themeColor && themeColor.length)) {
	                themeColor = this._themeConfig.color || ecConfig.color;
	            }
	
	            this._zr.getColor = function (idx) {
	                var zrColor = __webpack_require__(187);
	                return zrColor.getColor(idx, themeColor);
	            };
	
	            if (!_canvasSupported) {
	                // 不支持Canvas的强制关闭动画
	                magicOption.animation = false;
	                magicOption.addDataAnimation = false;
	            }
	        },
	
	        /**
	         * 万能接口，配置图表实例任何可配置选项，多次调用时option选项做merge处理
	         * @param {Object} option
	         * @param {boolean=} notMerge 多次调用时option选项是默认是合并（merge）的，
	         *                   如果不需求，可以通过notMerger参数为true阻止与上次option的合并
	         */
	        setOption: function (option, notMerge) {
	            if (!option.timeline) {
	                return this._setOption(option, notMerge);
	            }
	            else {
	                return this._setTimelineOption(option);
	            }
	        },
	
	        /**
	         * 万能接口，配置图表实例任何可配置选项，多次调用时option选项做merge处理
	         * @param {Object} option
	         * @param {boolean=} notMerge 多次调用时option选项是默认是合并（merge）的，
	         *                   如果不需求，可以通过notMerger参数为true阻止与上次option的合并
	         * @param {boolean=} 默认false。keepTimeLine 表示从timeline组件调用而来，
	         *                   表示当前行为是timeline的数据切换，保持timeline，
	         *                   反之销毁timeline。 详见Issue #1601
	         */
	        _setOption: function (option, notMerge, keepTimeLine) {
	            if (!notMerge && this._option) {
	                this._option = zrUtil.merge(
	                    this.getOption(),
	                    zrUtil.clone(option),
	                    true
	                );
	            }
	            else {
	                this._option = zrUtil.clone(option);
	                !keepTimeLine && this._timeline && this._timeline.dispose();
	            }
	
	            this._optionRestore = zrUtil.clone(this._option);
	
	            if (!this._option.series || this._option.series.length === 0) {
	                this._zr.clear();
	                return;
	            }
	
	            if (this.component.dataZoom                         // 存在dataZoom控件
	                && (this._option.dataZoom                       // 并且新option也存在
	                    || (this._option.toolbox
	                        && this._option.toolbox.feature
	                        && this._option.toolbox.feature.dataZoom
	                        && this._option.toolbox.feature.dataZoom.show
	                    )
	                )
	            ) {
	                // dataZoom同步数据
	                this.component.dataZoom.syncOption(this._option);
	            }
	            this._toolbox.reset(this._option);
	            this._render(this._option);
	            return this;
	        },
	
	        /**
	         * 返回内部持有的当前显示option克隆
	         */
	        getOption: function () {
	            var magicOption = zrUtil.clone(this._option);
	
	            var self = this;
	            function restoreOption(prop) {
	                var restoreSource = self._optionRestore[prop];
	
	                if (restoreSource) {
	                    if (restoreSource instanceof Array) {
	                        var len = restoreSource.length;
	                        while (len--) {
	                            magicOption[prop][len].data = zrUtil.clone(
	                                restoreSource[len].data
	                            );
	                        }
	                    }
	                    else {
	                        magicOption[prop].data = zrUtil.clone(restoreSource.data);
	                    }
	                }
	            }
	
	            // 横轴数据还原
	            restoreOption('xAxis');
	
	            // 纵轴数据还原
	            restoreOption('yAxis');
	
	            // 系列数据还原
	            restoreOption('series');
	
	            return magicOption;
	        },
	
	        /**
	         * 数据设置快捷接口
	         * @param {Array} series
	         * @param {boolean=} notMerge 多次调用时option选项是默认是合并（merge）的，
	         *                   如果不需求，可以通过notMerger参数为true阻止与上次option的合并。
	         */
	        setSeries: function (series, notMerge) {
	            if (!notMerge) {
	                this.setOption({series: series});
	            }
	            else {
	                this._option.series = series;
	                this.setOption(this._option, notMerge);
	            }
	            return this;
	        },
	
	        /**
	         * 返回内部持有的当前显示series克隆
	         */
	        getSeries: function () {
	            return this.getOption().series;
	        },
	
	        /**
	         * timelineOption接口，配置图表实例任何可配置选项
	         * @param {Object} option
	         */
	        _setTimelineOption: function(option) {
	            this._timeline && this._timeline.dispose();
	            var Timeline = __webpack_require__(237);
	            var timeline = new Timeline(
	                this._themeConfig, this._messageCenter, this._zr, option, this
	            );
	            this._timeline = timeline;
	            this.component.timeline = this._timeline;
	
	            return this;
	        },
	
	        /**
	         * 动态数据添加
	         * 形参为单组数据参数，多组时为数据，内容同[seriesIdx, data, isShift, additionData]
	         * @param {number} seriesIdx 系列索引
	         * @param {number | Object} data 增加数据
	         * @param {boolean=} isHead 是否队头加入，默认，不指定或false时为队尾插入
	         * @param {boolean=} dataGrow 是否增长数据队列长度，默认，不指定或false时移出目标数组对位数据
	         * @param {string=} additionData 是否增加类目轴(饼图为图例)数据，附加操作同isHead和dataGrow
	         */
	        addData: function (seriesIdx, data, isHead, dataGrow, additionData) {
	            var params = seriesIdx instanceof Array
	                ? seriesIdx
	                : [[seriesIdx, data, isHead, dataGrow, additionData]];
	
	            //this._optionRestore 和 magicOption 都要同步
	            var magicOption = this.getOption();
	            var optionRestore = this._optionRestore;
	            var self = this;
	            for (var i = 0, l = params.length; i < l; i++) {
	                seriesIdx = params[i][0];
	                data = params[i][1];
	                isHead = params[i][2];
	                dataGrow = params[i][3];
	                additionData = params[i][4];
	
	                var seriesItem = optionRestore.series[seriesIdx];
	                var inMethod = isHead ? 'unshift' : 'push';
	                var outMethod = isHead ? 'pop' : 'shift';
	                if (seriesItem) {
	                    var seriesItemData = seriesItem.data;
	                    var mSeriesItemData = magicOption.series[seriesIdx].data;
	
	                    seriesItemData[inMethod](data);
	                    mSeriesItemData[inMethod](data);
	                    if (!dataGrow) {
	                        seriesItemData[outMethod]();
	                        data = mSeriesItemData[outMethod]();
	                    }
	
	                    if (additionData != null) {
	                        var legend;
	                        var legendData;
	
	                        if (seriesItem.type === ecConfig.CHART_TYPE_PIE
	                            && (legend = optionRestore.legend)
	                            && (legendData = legend.data)
	                        ) {
	                            var mLegendData = magicOption.legend.data;
	                            legendData[inMethod](additionData);
	                            mLegendData[inMethod](additionData);
	
	                            if (!dataGrow) {
	                                var legendDataIdx = zrUtil.indexOf(legendData, data.name);
	                                legendDataIdx != -1 && legendData.splice(legendDataIdx, 1);
	
	                                legendDataIdx = zrUtil.indexOf(mLegendData, data.name);
	                                legendDataIdx != -1 && mLegendData.splice(legendDataIdx, 1);
	                            }
	                        }
	                        else if (optionRestore.xAxis != null && optionRestore.yAxis != null) {
	                            // x轴类目
	                            var axisData;
	                            var mAxisData;
	                            var axisIdx = seriesItem.xAxisIndex || 0;
	
	                            if (optionRestore.xAxis[axisIdx].type == null
	                                || optionRestore.xAxis[axisIdx].type === 'category'
	                            ) {
	                                axisData = optionRestore.xAxis[axisIdx].data;
	                                mAxisData = magicOption.xAxis[axisIdx].data;
	
	                                axisData[inMethod](additionData);
	                                mAxisData[inMethod](additionData);
	                                if (!dataGrow) {
	                                    axisData[outMethod]();
	                                    mAxisData[outMethod]();
	                                }
	                            }
	
	                            // y轴类目
	                            axisIdx = seriesItem.yAxisIndex || 0;
	                            if (optionRestore.yAxis[axisIdx].type === 'category') {
	                                axisData = optionRestore.yAxis[axisIdx].data;
	                                mAxisData = magicOption.yAxis[axisIdx].data;
	
	                                axisData[inMethod](additionData);
	                                mAxisData[inMethod](additionData);
	                                if (!dataGrow) {
	                                    axisData[outMethod]();
	                                    mAxisData[outMethod]();
	                                }
	                            }
	                        }
	                    }
	
	                    // 同步图表内状态，动画需要
	                    this._option.series[seriesIdx].data = magicOption.series[seriesIdx].data;
	                }
	            }
	
	            this._zr.clearAnimation();
	            var chartList = this._chartList;
	            var chartAnimationCount = 0;
	            var chartAnimationDone = function () {
	                chartAnimationCount--;
	                if (chartAnimationCount === 0) {
	                    animationDone();
	                }
	            };
	            for (var i = 0, l = chartList.length; i < l; i++) {
	                if (magicOption.addDataAnimation && chartList[i].addDataAnimation) {
	                    chartAnimationCount++;
	                    chartList[i].addDataAnimation(params, chartAnimationDone);
	                }
	            }
	
	            // dataZoom同步数据
	            this.component.dataZoom && this.component.dataZoom.syncOption(magicOption);
	
	            this._option = magicOption;
	            function animationDone() {
	                if (!self._zr) {
	                    return; // 已经被释放
	                }
	                self._zr.clearAnimation();
	                for (var i = 0, l = chartList.length; i < l; i++) {
	                    // 有addData动画就去掉过渡动画
	                    chartList[i].motionlessOnce =
	                        magicOption.addDataAnimation && chartList[i].addDataAnimation;
	                }
	                self._messageCenter.dispatch(
	                    ecConfig.EVENT.REFRESH,
	                    null,
	                    {option: magicOption},
	                    self
	                );
	            }
	
	            if (!magicOption.addDataAnimation) {
	                setTimeout(animationDone, 0);
	            }
	            return this;
	        },
	
	        /**
	         * 动态[标注 | 标线]添加
	         * @param {number} seriesIdx 系列索引
	         * @param {Object} markData [标注 | 标线]对象，支持多个
	         */
	        addMarkPoint: function (seriesIdx, markData) {
	            return this._addMark(seriesIdx, markData, 'markPoint');
	        },
	
	        addMarkLine: function (seriesIdx, markData) {
	            return this._addMark(seriesIdx, markData, 'markLine');
	        },
	
	        _addMark: function (seriesIdx, markData, markType) {
	            var series = this._option.series;
	            var seriesItem;
	
	            if (series && (seriesItem = series[seriesIdx])) {
	                var seriesR = this._optionRestore.series;
	                var seriesRItem = seriesR[seriesIdx];
	                var markOpt = seriesItem[markType];
	                var markOptR = seriesRItem[markType];
	
	                markOpt = seriesItem[markType] = markOpt || {data: []};
	                markOptR = seriesRItem[markType] = markOptR || {data: []};
	
	                for (var key in markData) {
	                    if (key === 'data') {
	                        // 数据concat
	                        markOpt.data = markOpt.data.concat(markData.data);
	                        markOptR.data = markOptR.data.concat(markData.data);
	                    }
	                    else if (typeof markData[key] != 'object' || markOpt[key] == null) {
	                        // 简单类型或新值直接赋值
	                        markOpt[key] = markOptR[key] = markData[key];
	                    }
	                    else {
	                        // 非数据的复杂对象merge
	                        zrUtil.merge(markOpt[key], markData[key], true);
	                        zrUtil.merge(markOptR[key], markData[key], true);
	                    }
	                }
	
	                var chart = this.chart[seriesItem.type];
	                chart && chart.addMark(seriesIdx, markData, markType);
	            }
	
	            return this;
	        },
	
	        /**
	         * 动态[标注 | 标线]删除
	         * @param {number} seriesIdx 系列索引
	         * @param {string} markName [标注 | 标线]名称
	         */
	        delMarkPoint: function (seriesIdx, markName) {
	            return this._delMark(seriesIdx, markName, 'markPoint');
	        },
	
	        delMarkLine: function (seriesIdx, markName) {
	            return this._delMark(seriesIdx, markName, 'markLine');
	        },
	
	        _delMark: function (seriesIdx, markName, markType) {
	            var series = this._option.series;
	            var seriesItem;
	            var mark;
	            var dataArray;
	
	            if (!(
	                    series
	                    && (seriesItem = series[seriesIdx])
	                    && (mark = seriesItem[markType])
	                    && (dataArray = mark.data)
	                )
	            ) {
	                return this;
	            }
	
	            markName = markName.split(' > ');
	            var targetIndex = -1;
	
	            for (var i = 0, l = dataArray.length; i < l; i++) {
	                var dataItem = dataArray[i];
	                if (dataItem instanceof Array) {
	                    if (dataItem[0].name === markName[0]
	                        && dataItem[1].name === markName[1]
	                    ) {
	                        targetIndex = i;
	                        break;
	                    }
	                }
	                else if (dataItem.name === markName[0]) {
	                    targetIndex = i;
	                    break;
	                }
	            }
	
	            if (targetIndex > -1) {
	                dataArray.splice(targetIndex, 1);
	                this._optionRestore.series[seriesIdx][markType].data.splice(targetIndex, 1);
	
	                var chart = this.chart[seriesItem.type];
	                chart && chart.delMark(seriesIdx, markName.join(' > '), markType);
	            }
	
	            return this;
	        },
	
	        /**
	         * 获取当前dom
	         */
	        getDom: function () {
	            return this.dom;
	        },
	
	        /**
	         * 获取当前zrender实例，可用于添加额为的shape和深度控制
	         */
	        getZrender: function () {
	            return this._zr;
	        },
	
	        /**
	         * 获取Base64图片dataURL
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return imgDataURL
	         */
	        getDataURL: function (imgType) {
	            if (!_canvasSupported) {
	                return '';
	            }
	
	            if (this._chartList.length === 0) {
	                // 渲染为图片
	                var imgId = 'IMG' + this.id;
	                var img = document.getElementById(imgId);
	                if (img) {
	                    return img.src;
	                }
	            }
	
	            // 清除可能存在的tooltip元素
	            var tooltip = this.component.tooltip;
	            tooltip && tooltip.hideTip();
	
	            switch (imgType) {
	                case 'jpeg':
	                    break;
	                default:
	                    imgType = 'png';
	            }
	
	            var bgColor = this._option.backgroundColor;
	            if (bgColor && bgColor.replace(' ','') === 'rgba(0,0,0,0)') {
	                bgColor = '#fff';
	            }
	
	            return this._zr.toDataURL('image/' + imgType, bgColor);
	        },
	
	        /**
	         * 获取img
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return img dom
	         */
	        getImage: function (imgType) {
	            var title = this._optionRestore.title;
	            var imgDom = document.createElement('img');
	            imgDom.src = this.getDataURL(imgType);
	            imgDom.title = (title && title.text) || 'ECharts';
	            return imgDom;
	        },
	
	        /**
	         * 获取多图联动的Base64图片dataURL
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return imgDataURL
	         */
	        getConnectedDataURL: function (imgType) {
	            if (!this.isConnected()) {
	                return this.getDataURL(imgType);
	            }
	
	            var tempDom = this.dom;
	            var imgList = {
	                'self': {
	                    img: this.getDataURL(imgType),
	                    left: tempDom.offsetLeft,
	                    top: tempDom.offsetTop,
	                    right: tempDom.offsetLeft + tempDom.offsetWidth,
	                    bottom: tempDom.offsetTop + tempDom.offsetHeight
	                }
	            };
	
	            var minLeft = imgList.self.left;
	            var minTop = imgList.self.top;
	            var maxRight = imgList.self.right;
	            var maxBottom = imgList.self.bottom;
	
	            for (var c in this._connected) {
	                tempDom = this._connected[c].getDom();
	                imgList[c] = {
	                    img: this._connected[c].getDataURL(imgType),
	                    left: tempDom.offsetLeft,
	                    top: tempDom.offsetTop,
	                    right: tempDom.offsetLeft + tempDom.offsetWidth,
	                    bottom: tempDom.offsetTop + tempDom.offsetHeight
	                };
	
	                minLeft = Math.min(minLeft, imgList[c].left);
	                minTop = Math.min(minTop, imgList[c].top);
	                maxRight = Math.max(maxRight, imgList[c].right);
	                maxBottom = Math.max(maxBottom, imgList[c].bottom);
	            }
	
	            var zrDom = document.createElement('div');
	            zrDom.style.position = 'absolute';
	            zrDom.style.left = '-4000px';
	            zrDom.style.width = (maxRight - minLeft) + 'px';
	            zrDom.style.height = (maxBottom - minTop) + 'px';
	            document.body.appendChild(zrDom);
	
	            var zrImg = __webpack_require__(173).init(zrDom);
	
	            var ImageShape = __webpack_require__(190);
	            for (var c in imgList) {
	                zrImg.addShape(new ImageShape({
	                    style: {
	                        x: imgList[c].left - minLeft,
	                        y: imgList[c].top - minTop,
	                        image: imgList[c].img
	                    }
	                }));
	            }
	
	            zrImg.render();
	            var bgColor = this._option.backgroundColor;
	            if (bgColor && bgColor.replace(/ /g, '') === 'rgba(0,0,0,0)') {
	                bgColor = '#fff';
	            }
	
	            var image = zrImg.toDataURL('image/png', bgColor);
	
	            setTimeout(function () {
	                zrImg.dispose();
	                zrDom.parentNode.removeChild(zrDom);
	                zrDom = null;
	            }, 100);
	
	            return image;
	        },
	
	        /**
	         * 获取多图联动的img
	         * @param {string} imgType 图片类型，支持png|jpeg，默认为png
	         * @return img dom
	         */
	        getConnectedImage: function (imgType) {
	            var title = this._optionRestore.title;
	            var imgDom = document.createElement('img');
	            imgDom.src = this.getConnectedDataURL(imgType);
	            imgDom.title = (title && title.text) || 'ECharts';
	            return imgDom;
	        },
	
	        /**
	         * 外部接口绑定事件
	         * @param {Object} eventName 事件名称
	         * @param {Object} eventListener 事件响应函数
	         */
	        on: function (eventName, eventListener) {
	            this._messageCenterOutSide.bind(eventName, eventListener, this);
	            return this;
	        },
	
	        /**
	         * 外部接口解除事件绑定
	         * @param {Object} eventName 事件名称
	         * @param {Object} eventListener 事件响应函数
	         */
	        un: function (eventName, eventListener) {
	            this._messageCenterOutSide.unbind(eventName, eventListener);
	            return this;
	        },
	
	        /**
	         * 多图联动
	         * @param connectTarget{ECharts | Array <ECharts>} connectTarget 联动目标
	         */
	        connect: function (connectTarget) {
	            if (!connectTarget) {
	                return this;
	            }
	
	            if (!this._connected) {
	                this._connected = {};
	            }
	
	            if (connectTarget instanceof Array) {
	                for (var i = 0, l = connectTarget.length; i < l; i++) {
	                    this._connected[connectTarget[i].id] = connectTarget[i];
	                }
	            }
	            else {
	                this._connected[connectTarget.id] = connectTarget;
	            }
	
	            return this;
	        },
	
	        /**
	         * 解除多图联动
	         * @param connectTarget{ECharts | Array <ECharts>} connectTarget 解除联动目标
	         */
	        disConnect: function (connectTarget) {
	            if (!connectTarget || !this._connected) {
	                return this;
	            }
	
	            if (connectTarget instanceof Array) {
	                for (var i = 0, l = connectTarget.length; i < l; i++) {
	                    delete this._connected[connectTarget[i].id];
	                }
	            }
	            else {
	                delete this._connected[connectTarget.id];
	            }
	
	            for (var k in this._connected) {
	                return k, this; // 非空
	            }
	
	            // 空，转为标志位
	            this._connected = false;
	            return this;
	        },
	
	        /**
	         * 联动事件响应
	         */
	        connectedEventHandler: function (param) {
	            if (param.__echartsId != this.id) {
	                // 来自其他联动图表的事件
	                this._onevent(param);
	            }
	        },
	
	        /**
	         * 是否存在多图联动
	         */
	        isConnected: function () {
	            return !!this._connected;
	        },
	
	        /**
	         * 显示loading过渡
	         * @param {Object} loadingOption
	         */
	        showLoading: function (loadingOption) {
	            var effectList = {
	                bar: __webpack_require__(239),
	                bubble: __webpack_require__(240),
	                dynamicLine: __webpack_require__(241),
	                ring: __webpack_require__(242),
	                spin: __webpack_require__(244),
	                whirling: __webpack_require__(245)
	            };
	            this._toolbox.hideDataView();
	
	            loadingOption = loadingOption || {};
	
	            var textStyle = loadingOption.textStyle || {};
	            loadingOption.textStyle = textStyle;
	
	            var finalTextStyle = zrUtil.merge(
	                zrUtil.merge(
	                    zrUtil.clone(textStyle),
	                    this._themeConfig.textStyle
	                ),
	                ecConfig.textStyle
	            );
	
	            textStyle.textFont = finalTextStyle.fontStyle + ' '
	                                 + finalTextStyle.fontWeight + ' '
	                                 + finalTextStyle.fontSize + 'px '
	                                 + finalTextStyle.fontFamily;
	
	            textStyle.text = loadingOption.text
	                             || (this._option && this._option.loadingText)
	                             || this._themeConfig.loadingText
	                             || ecConfig.loadingText;
	
	            if (loadingOption.x != null) {
	                textStyle.x = loadingOption.x;
	            }
	            if (loadingOption.y != null) {
	                textStyle.y = loadingOption.y;
	            }
	
	            loadingOption.effectOption = loadingOption.effectOption || {};
	            loadingOption.effectOption.textStyle = textStyle;
	
	            var Effect = loadingOption.effect;
	            if (typeof Effect === 'string' || Effect == null) {
	                Effect =  effectList[
	                              loadingOption.effect
	                              || (this._option && this._option.loadingEffect)
	                              || this._themeConfig.loadingEffect
	                              || ecConfig.loadingEffect
	                          ]
	                          || effectList.spin;
	            }
	            this._zr.showLoading(new Effect(loadingOption.effectOption));
	            return this;
	        },
	
	        /**
	         * 隐藏loading过渡
	         */
	        hideLoading: function () {
	            this._zr.hideLoading();
	            return this;
	        },
	
	        /**
	         * 主题设置
	         */
	        setTheme: function (theme) {
	            if (theme) {
	               if (typeof theme === 'string') {
	                    // 默认主题
	                    switch (theme) {
	                        case 'macarons':
	                            theme = __webpack_require__(246);
	                            break;
	                        case 'infographic':
	                            theme = __webpack_require__(247);
	                            break;
	                        default:
	                            theme = {}; // require('./theme/default');
	                    }
	                }
	                else {
	                    theme = theme || {};
	                }
	
	                // // 复位默认配置
	                // // this._themeConfig会被别的对象引用持有
	                // // 所以不能改成this._themeConfig = {};
	                // for (var key in this._themeConfig) {
	                //     delete this._themeConfig[key];
	                // }
	                // for (var key in ecConfig) {
	                //     this._themeConfig[key] = zrUtil.clone(ecConfig[key]);
	                // }
	
	                // // 颜色数组随theme，不merge
	                // theme.color && (this._themeConfig.color = []);
	
	                // // 默认标志图形类型列表，不merge
	                // theme.symbolList && (this._themeConfig.symbolList = []);
	
	                // // 应用新主题
	                // zrUtil.merge(this._themeConfig, zrUtil.clone(theme), true);
	                this._themeConfig = theme;
	            }
	
	            if (!_canvasSupported) {   // IE8-
	                var textStyle = this._themeConfig.textStyle;
	                textStyle && textStyle.fontFamily && textStyle.fontFamily2
	                    && (textStyle.fontFamily = textStyle.fontFamily2);
	
	                textStyle = ecConfig.textStyle;
	                textStyle.fontFamily = textStyle.fontFamily2;
	            }
	
	            this._timeline && this._timeline.setTheme(true);
	            this._optionRestore && this.restore();
	        },
	
	        /**
	         * 视图区域大小变化更新，不默认绑定，供使用方按需调用
	         */
	        resize: function () {
	            var self = this;
	            return function(){
	                self._clearEffect();
	                self._zr.resize();
	                if (self._option && self._option.renderAsImage && _canvasSupported) {
	                    // 渲染为图片重走render模式
	                    self._render(self._option);
	                    return self;
	                }
	                // 停止动画
	                self._zr.clearAnimation();
	                self._island.resize();
	                self._toolbox.resize();
	                self._timeline && self._timeline.resize();
	                // 先来后到，不能仅刷新自己，也不能在上一个循环中刷新，如坐标系数据改变会影响其他图表的大小
	                // 所以安顺序刷新各种图表，图表内部refresh优化无需更新则不更新~
	                for (var i = 0, l = self._chartList.length; i < l; i++) {
	                    self._chartList[i].resize && self._chartList[i].resize();
	                }
	                self.component.grid && self.component.grid.refixAxisShape(self.component);
	                self._zr.refresh();
	                self._messageCenter.dispatch(ecConfig.EVENT.RESIZE, null, null, self);
	                return self;
	            };
	        },
	
	        _clearEffect: function() {
	            this._zr.modLayer(ecConfig.EFFECT_ZLEVEL, { motionBlur: false });
	            this._zr.painter.clearLayer(ecConfig.EFFECT_ZLEVEL);
	        },
	
	        /**
	         * 清除已渲染内容 ，clear后echarts实例可用
	         */
	        clear: function () {
	            this._disposeChartList();
	            this._zr.clear();
	            this._option = {};
	            this._optionRestore = {};
	            this.dom.style.backgroundColor = null;
	            return this;
	        },
	
	        /**
	         * 释放，dispose后echarts实例不可用
	         */
	        dispose: function () {
	            var key = this.dom.getAttribute(DOM_ATTRIBUTE_KEY);
	            key && delete _instances[key];
	
	            this._island.dispose();
	            this._toolbox.dispose();
	            this._timeline && this._timeline.dispose();
	            this._messageCenter.unbind();
	            this.clear();
	            this._zr.dispose();
	            this._zr = null;
	        }
	    };
	
	    return self;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts默认配置项
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // 请原谅我这样写，这显然可以直接返回个对象，但那样的话outline就显示不出来了~~
	    var config = {
	        // 图表类型
	        CHART_TYPE_LINE: 'line',
	        CHART_TYPE_BAR: 'bar',
	        CHART_TYPE_SCATTER: 'scatter',
	        CHART_TYPE_PIE: 'pie',
	        CHART_TYPE_RADAR: 'radar',
	        CHART_TYPE_VENN: 'venn',
	        CHART_TYPE_TREEMAP: 'treemap',
	        CHART_TYPE_TREE: 'tree',
	        CHART_TYPE_MAP: 'map',
	        CHART_TYPE_K: 'k',
	        CHART_TYPE_ISLAND: 'island',
	        CHART_TYPE_FORCE: 'force',
	        CHART_TYPE_CHORD: 'chord',
	        CHART_TYPE_GAUGE: 'gauge',
	        CHART_TYPE_FUNNEL: 'funnel',
	        CHART_TYPE_EVENTRIVER: 'eventRiver',
	        CHART_TYPE_WORDCLOUD: 'wordCloud',
	        CHART_TYPE_HEATMAP: 'heatmap',
	
	        // 组件类型
	        COMPONENT_TYPE_TITLE: 'title',
	        COMPONENT_TYPE_LEGEND: 'legend',
	        COMPONENT_TYPE_DATARANGE: 'dataRange',
	        COMPONENT_TYPE_DATAVIEW: 'dataView',
	        COMPONENT_TYPE_DATAZOOM: 'dataZoom',
	        COMPONENT_TYPE_TOOLBOX: 'toolbox',
	        COMPONENT_TYPE_TOOLTIP: 'tooltip',
	        COMPONENT_TYPE_GRID: 'grid',
	        COMPONENT_TYPE_AXIS: 'axis',
	        COMPONENT_TYPE_POLAR: 'polar',
	        COMPONENT_TYPE_X_AXIS: 'xAxis',
	        COMPONENT_TYPE_Y_AXIS: 'yAxis',
	        COMPONENT_TYPE_AXIS_CATEGORY: 'categoryAxis',
	        COMPONENT_TYPE_AXIS_VALUE: 'valueAxis',
	        COMPONENT_TYPE_TIMELINE: 'timeline',
	        COMPONENT_TYPE_ROAMCONTROLLER: 'roamController',
	
	        // 全图默认背景
	        backgroundColor: 'rgba(0,0,0,0)',
	        
	        // 默认色板
	        color: ['#ff7f50','#87cefa','#da70d6','#32cd32','#6495ed',
	                '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',
	                '#1e90ff','#ff6347','#7b68ee','#00fa9a','#ffd700',
	                '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'],
	
	        markPoint: {
	            clickable: true,
	            symbol: 'pin',         // 标注类型
	            symbolSize: 10,        // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            // symbolRotate: null, // 标注旋转控制
	            large: false,
	            effect: {
	                show: false,
	                loop: true,
	                period: 15,             // 运动周期，无单位，值越大越慢
	                type: 'scale',          // 可用为 scale | bounce
	                scaleSize: 2,           // 放大倍数，以markPoint点size为基准
	                bounceDistance: 10     // 跳动距离，单位px
	                // color: 'gold',
	                // shadowColor: 'rgba(255,215,0,0.8)',
	                // shadowBlur: 0          // 炫光模糊
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异，
	                    // borderColor: 各异,        // 标注边线颜色，优先于color 
	                    borderWidth: 2,             // 标注边线线宽，单位px，默认为1
	                    label: {
	                        show: true,
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        position: 'inside'      // 可选为'left'|'right'|'top'|'bottom'
	                        // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    }
	                },
	                emphasis: {
	                    // color: 各异
	                    label: {
	                        show: true
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        // position: 'inside'  // 'left'|'right'|'top'|'bottom'
	                        // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE
	                    }
	                }
	            }
	        },
	        
	        markLine: {
	            clickable: true,
	            // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string
	            symbol: ['circle', 'arrow'],
	            // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            symbolSize: [2, 4],
	            // 标线起始和结束的symbol旋转控制
	            //symbolRotate: null,
	            //smooth: false,
	            smoothness: 0.2,    // 平滑度
	            precision: 2,
	            effect: {
	                show: false,
	                loop: true,
	                period: 15,                     // 运动周期，无单位，值越大越慢
	                scaleSize: 2                    // 放大倍数，以markLine线lineWidth为基准
	                // color: 'gold',
	                // shadowColor: 'rgba(255,215,0,0.8)',
	                // shadowBlur: lineWidth * 2    // 炫光模糊，默认等于scaleSize计算所得
	            },
	            // 边捆绑
	            bundling: {
	                enable: false,
	                // [0, 90]
	                maxTurningAngle: 45
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异,               // 标线主色，线色，symbol主色
	                    // borderColor: 随color,     // 标线symbol边框颜色，优先于color 
	                    borderWidth: 1.5,           // 标线symbol边框线宽，单位px，默认为2
	                    label: {
	                        show: true,
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'
	                        position: 'end'
	                        // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    },
	                    lineStyle: {
	                        // color: 随borderColor, // 主色，线色，优先级高于borderColor和color
	                        // width: 随borderWidth, // 优先于borderWidth
	                        type: 'dashed'
	                        // shadowColor: 'rgba(0,0,0,0)', //默认透明
	                        // shadowBlur: 0,
	                        // shadowOffsetX: 0,
	                        // shadowOffsetY: 0
	                    }
	                },
	                emphasis: {
	                    // color: 各异
	                    label: {
	                        show: false
	                        // 标签文本格式器，同Tooltip.formatter，不支持回调
	                        // formatter: null,
	                        // position: 'inside' // 'left'|'right'|'top'|'bottom'
	                        // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE
	                    },
	                    lineStyle: {}
	                }
	            }
	        },
	
	        // 主题，主题
	        textStyle: {
	            decoration: 'none',
	            fontFamily: 'Arial, Verdana, sans-serif',
	            fontFamily2: '微软雅黑',    // IE8- 字体模糊并且，不支持不同字体混排，额外指定一份
	            fontSize: 12,
	            fontStyle: 'normal',
	            fontWeight: 'normal'
	        },
	
	        EVENT: {
	            // -------全局通用
	            REFRESH: 'refresh',
	            RESTORE: 'restore',
	            RESIZE: 'resize',
	            CLICK: 'click',
	            DBLCLICK: 'dblclick',
	            HOVER: 'hover',
	            MOUSEOUT: 'mouseout',
	            //MOUSEWHEEL: 'mousewheel',
	            // -------业务交互逻辑
	            DATA_CHANGED: 'dataChanged',
	            DATA_ZOOM: 'dataZoom',
	            DATA_RANGE: 'dataRange',
	            DATA_RANGE_SELECTED: 'dataRangeSelected',
	            DATA_RANGE_HOVERLINK: 'dataRangeHoverLink',
	            LEGEND_SELECTED: 'legendSelected',
	            LEGEND_HOVERLINK: 'legendHoverLink',
	            MAP_SELECTED: 'mapSelected',
	            PIE_SELECTED: 'pieSelected',
	            MAGIC_TYPE_CHANGED: 'magicTypeChanged',
	            DATA_VIEW_CHANGED: 'dataViewChanged',
	            TIMELINE_CHANGED: 'timelineChanged',
	            MAP_ROAM: 'mapRoam',
	            FORCE_LAYOUT_END: 'forceLayoutEnd',
	            // -------内部通信
	            TOOLTIP_HOVER: 'tooltipHover',
	            TOOLTIP_IN_GRID: 'tooltipInGrid',
	            TOOLTIP_OUT_GRID: 'tooltipOutGrid',
	            ROAMCONTROLLER: 'roamController'
	        },
	        DRAG_ENABLE_TIME: 120,   // 降低图表内元素拖拽敏感度，单位ms，不建议外部干预
	        EFFECT_ZLEVEL : 10,       // 特效动画zlevel
	        effectBlendAlpha: 0.95,
	        // 主题，默认标志图形类型列表
	        symbolList: [
	          'circle', 'rectangle', 'triangle', 'diamond',
	          'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'
	        ],
	        loadingEffect: 'spin',
	        loadingText: '数据读取中...',
	        noDataEffect: 'bubble',
	        noDataText: '暂无数据',
	        // noDataLoadingOption: null,
	        // 可计算特性配置，孤岛，提示颜色
	        calculable: false,                      // 默认关闭可计算特性
	        calculableColor: 'rgba(255,165,0,0.6)', // 拖拽提示边框颜色
	        calculableHolderColor: '#ccc',          // 可计算占位提示颜色
	        nameConnector: ' & ',
	        valueConnector: ': ',
	        animation: true,                // 过渡动画是否开启
	        addDataAnimation: true,         // 动态数据接口是否开启动画效果
	        animationThreshold: 2000,       // 动画元素阀值，产生的图形原素超过2000不出动画
	        animationDuration: 2000,        // 过渡动画参数：进入
	        animationDurationUpdate: 500,   // 过渡动画参数：更新
	        animationEasing: 'ExponentialOut'    //BounceOut
	    };
	
	    return config;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/tool/util
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         Yi Shen(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	        var ArrayProto = Array.prototype;
	        var nativeForEach = ArrayProto.forEach;
	        var nativeMap = ArrayProto.map;
	        var nativeFilter = ArrayProto.filter;
	
	        // 用于处理merge时无法遍历Date等对象的问题
	        var BUILTIN_OBJECT = {
	            '[object Function]': 1,
	            '[object RegExp]': 1,
	            '[object Date]': 1,
	            '[object Error]': 1,
	            '[object CanvasGradient]': 1
	        };
	
	        var objToString = Object.prototype.toString;
	
	        function isDom(obj) {
	            return obj && obj.nodeType === 1
	                   && typeof(obj.nodeName) == 'string';
	        }
	
	        /**
	         * 对一个object进行深度拷贝
	         * @memberOf module:zrender/tool/util
	         * @param {*} source 需要进行拷贝的对象
	         * @return {*} 拷贝后的新对象
	         */
	        function clone(source) {
	            if (typeof source == 'object' && source !== null) {
	                var result = source;
	                if (source instanceof Array) {
	                    result = [];
	                    for (var i = 0, len = source.length; i < len; i++) {
	                        result[i] = clone(source[i]);
	                    }
	                }
	                else if (
	                    !BUILTIN_OBJECT[objToString.call(source)]
	                    // 是否为 dom 对象
	                    && !isDom(source)
	                ) {
	                    result = {};
	                    for (var key in source) {
	                        if (source.hasOwnProperty(key)) {
	                            result[key] = clone(source[key]);
	                        }
	                    }
	                }
	
	                return result;
	            }
	
	            return source;
	        }
	
	        function mergeItem(target, source, key, overwrite) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                if (typeof targetProp == 'object'
	                    && !BUILTIN_OBJECT[objToString.call(targetProp)]
	                    // 是否为 dom 对象
	                    && !isDom(targetProp)
	                ) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(
	                        target[key],
	                        source[key],
	                        overwrite
	                    );
	                }
	                else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    target[key] = source[key];
	                }
	            }
	        }
	
	        /**
	         * 合并源对象的属性到目标对象
	         * @memberOf module:zrender/tool/util
	         * @param {*} target 目标对象
	         * @param {*} source 源对象
	         * @param {boolean} overwrite 是否覆盖
	         */
	        function merge(target, source, overwrite) {
	            for (var i in source) {
	                mergeItem(target, source, i, overwrite);
	            }
	            
	            return target;
	        }
	
	        var _ctx;
	
	        function getContext() {
	            if (!_ctx) {
	                __webpack_require__(169);
	                /* jshint ignore:start */
	                if (window['G_vmlCanvasManager']) {
	                    var _div = document.createElement('div');
	                    _div.style.position = 'absolute';
	                    _div.style.top = '-1000px';
	                    document.body.appendChild(_div);
	
	                    _ctx = G_vmlCanvasManager.initElement(_div)
	                               .getContext('2d');
	                }
	                else {
	                    _ctx = document.createElement('canvas').getContext('2d');
	                }
	                /* jshint ignore:end */
	            }
	            return _ctx;
	        }
	
	        /**
	         * @memberOf module:zrender/tool/util
	         * @param {Array} array
	         * @param {*} value
	         */
	        function indexOf(array, value) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	
	        /**
	         * 构造类继承关系
	         * @memberOf module:zrender/tool/util
	         * @param {Function} clazz 源类
	         * @param {Function} baseClazz 基类
	         */
	        function inherits(clazz, baseClazz) {
	            var clazzPrototype = clazz.prototype;
	            function F() {}
	            F.prototype = baseClazz.prototype;
	            clazz.prototype = new F();
	
	            for (var prop in clazzPrototype) {
	                clazz.prototype[prop] = clazzPrototype[prop];
	            }
	            clazz.constructor = clazz;
	        }
	
	        /**
	         * 数组或对象遍历
	         * @memberOf module:zrender/tool/util
	         * @param {Object|Array} obj
	         * @param {Function} cb
	         * @param {*} [context]
	         */
	        function each(obj, cb, context) {
	            if (!(obj && cb)) {
	                return;
	            }
	            if (obj.forEach && obj.forEach === nativeForEach) {
	                obj.forEach(cb, context);
	            }
	            else if (obj.length === +obj.length) {
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    cb.call(context, obj[i], i, obj);
	                }
	            }
	            else {
	                for (var key in obj) {
	                    if (obj.hasOwnProperty(key)) {
	                        cb.call(context, obj[key], key, obj);
	                    }
	                }
	            }
	        }
	
	        /**
	         * 数组映射
	         * @memberOf module:zrender/tool/util
	         * @param {Array} obj
	         * @param {Function} cb
	         * @param {*} [context]
	         * @return {Array}
	         */
	        function map(obj, cb, context) {
	            if (!(obj && cb)) {
	                return;
	            }
	            if (obj.map && obj.map === nativeMap) {
	                return obj.map(cb, context);
	            }
	            else {
	                var result = [];
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    result.push(cb.call(context, obj[i], i, obj));
	                }
	                return result;
	            }
	        }
	
	        /**
	         * 数组过滤
	         * @memberOf module:zrender/tool/util
	         * @param {Array} obj
	         * @param {Function} cb
	         * @param {*} [context]
	         * @return {Array}
	         */
	        function filter(obj, cb, context) {
	            if (!(obj && cb)) {
	                return;
	            }
	            if (obj.filter && obj.filter === nativeFilter) {
	                return obj.filter(cb, context);
	            }
	            else {
	                var result = [];
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    if (cb.call(context, obj[i], i, obj)) {
	                        result.push(obj[i]);
	                    }
	                }
	                return result;
	            }
	        }
	
	        function bind(func, context) {
	            
	            return function () {
	                func.apply(context, arguments);
	            }
	        }
	
	        return {
	            inherits: inherits,
	            clone: clone,
	            merge: merge,
	            getContext: getContext,
	            indexOf: indexOf,
	            each: each,
	            map: map,
	            filter: filter,
	            bind: bind
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright 2006 Google Inc.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	
	
	// Known Issues:
	//
	// * Patterns only support repeat.
	// * Radial gradient are not implemented. The VML version of these look very
	//   different from the canvas one.
	// * Clipping paths are not implemented.
	// * Coordsize. The width and height attribute have higher priority than the
	//   width and height style values which isn't correct.
	// * Painting mode isn't implemented.
	// * Canvas width/height should is using content-box by default. IE in
	//   Quirks mode will draw the canvas using border-box. Either change your
	//   doctype to HTML5
	//   (http://www.whatwg.org/specs/web-apps/current-work/#the-doctype)
	//   or use Box Sizing Behavior from WebFX
	//   (http://webfx.eae.net/dhtml/boxsizing/boxsizing.html)
	// * Non uniform scaling does not correctly scale strokes.
	// * Optimize. There is always room for speed improvements.
	
	// AMD by kener.linfeng@gmail.com
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	// Only add this code if we do not already have a canvas implementation
	if (!document.createElement('canvas').getContext) {
	
	(function() {
	
	  // alias some functions to make (compiled) code shorter
	  var m = Math;
	  var mr = m.round;
	  var ms = m.sin;
	  var mc = m.cos;
	  var abs = m.abs;
	  var sqrt = m.sqrt;
	
	  // this is used for sub pixel precision
	  var Z = 10;
	  var Z2 = Z / 2;
	
	  var IE_VERSION = +navigator.userAgent.match(/MSIE ([\d.]+)?/)[1];
	
	  /**
	   * This funtion is assigned to the <canvas> elements as element.getContext().
	   * @this {HTMLElement}
	   * @return {CanvasRenderingContext2D_}
	   */
	  function getContext() {
	    return this.context_ ||
	        (this.context_ = new CanvasRenderingContext2D_(this));
	  }
	
	  var slice = Array.prototype.slice;
	
	  /**
	   * Binds a function to an object. The returned function will always use the
	   * passed in {@code obj} as {@code this}.
	   *
	   * Example:
	   *
	   *   g = bind(f, obj, a, b)
	   *   g(c, d) // will do f.call(obj, a, b, c, d)
	   *
	   * @param {Function} f The function to bind the object to
	   * @param {Object} obj The object that should act as this when the function
	   *     is called
	   * @param {*} var_args Rest arguments that will be used as the initial
	   *     arguments when the function is called
	   * @return {Function} A new function that has bound this
	   */
	  function bind(f, obj, var_args) {
	    var a = slice.call(arguments, 2);
	    return function() {
	      return f.apply(obj, a.concat(slice.call(arguments)));
	    };
	  }
	
	  function encodeHtmlAttribute(s) {
	    return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	  }
	
	  function addNamespace(doc, prefix, urn) {
	    if (!doc.namespaces[prefix]) {
	      doc.namespaces.add(prefix, urn, '#default#VML');
	    }
	  }
	
	  function addNamespacesAndStylesheet(doc) {
	    addNamespace(doc, 'g_vml_', 'urn:schemas-microsoft-com:vml');
	    addNamespace(doc, 'g_o_', 'urn:schemas-microsoft-com:office:office');
	
	    // Setup default CSS.  Only add one style sheet per document
	    if (!doc.styleSheets['ex_canvas_']) {
	      var ss = doc.createStyleSheet();
	      ss.owningElement.id = 'ex_canvas_';
	      ss.cssText = 'canvas{display:inline-block;overflow:hidden;' +
	          // default size is 300x150 in Gecko and Opera
	          'text-align:left;width:300px;height:150px}';
	    }
	  }
	
	  // Add namespaces and stylesheet at startup.
	  addNamespacesAndStylesheet(document);
	
	  var G_vmlCanvasManager_ = {
	    init: function(opt_doc) {
	      var doc = opt_doc || document;
	      // Create a dummy element so that IE will allow canvas elements to be
	      // recognized.
	      doc.createElement('canvas');
	      doc.attachEvent('onreadystatechange', bind(this.init_, this, doc));
	    },
	
	    init_: function(doc) {
	      // find all canvas elements
	      var els = doc.getElementsByTagName('canvas');
	      for (var i = 0; i < els.length; i++) {
	        this.initElement(els[i]);
	      }
	    },
	
	    /**
	     * Public initializes a canvas element so that it can be used as canvas
	     * element from now on. This is called automatically before the page is
	     * loaded but if you are creating elements using createElement you need to
	     * make sure this is called on the element.
	     * @param {HTMLElement} el The canvas element to initialize.
	     * @return {HTMLElement} the element that was created.
	     */
	    initElement: function(el) {
	      if (!el.getContext) {
	        el.getContext = getContext;
	
	        // Add namespaces and stylesheet to document of the element.
	        addNamespacesAndStylesheet(el.ownerDocument);
	
	        // Remove fallback content. There is no way to hide text nodes so we
	        // just remove all childNodes. We could hide all elements and remove
	        // text nodes but who really cares about the fallback content.
	        el.innerHTML = '';
	
	        // do not use inline function because that will leak memory
	        el.attachEvent('onpropertychange', onPropertyChange);
	        el.attachEvent('onresize', onResize);
	
	        var attrs = el.attributes;
	        if (attrs.width && attrs.width.specified) {
	          // TODO: use runtimeStyle and coordsize
	          // el.getContext().setWidth_(attrs.width.nodeValue);
	          el.style.width = attrs.width.nodeValue + 'px';
	        } else {
	          el.width = el.clientWidth;
	        }
	        if (attrs.height && attrs.height.specified) {
	          // TODO: use runtimeStyle and coordsize
	          // el.getContext().setHeight_(attrs.height.nodeValue);
	          el.style.height = attrs.height.nodeValue + 'px';
	        } else {
	          el.height = el.clientHeight;
	        }
	        //el.getContext().setCoordsize_()
	      }
	      return el;
	    }
	  };
	
	  function onPropertyChange(e) {
	    var el = e.srcElement;
	
	    switch (e.propertyName) {
	      case 'width':
	        el.getContext().clearRect();
	        el.style.width = el.attributes.width.nodeValue + 'px';
	        // In IE8 this does not trigger onresize.
	        el.firstChild.style.width =  el.clientWidth + 'px';
	        break;
	      case 'height':
	        el.getContext().clearRect();
	        el.style.height = el.attributes.height.nodeValue + 'px';
	        el.firstChild.style.height = el.clientHeight + 'px';
	        break;
	    }
	  }
	
	  function onResize(e) {
	    var el = e.srcElement;
	    if (el.firstChild) {
	      el.firstChild.style.width =  el.clientWidth + 'px';
	      el.firstChild.style.height = el.clientHeight + 'px';
	    }
	  }
	
	  G_vmlCanvasManager_.init();
	
	  // precompute "00" to "FF"
	  var decToHex = [];
	  for (var i = 0; i < 16; i++) {
	    for (var j = 0; j < 16; j++) {
	      decToHex[i * 16 + j] = i.toString(16) + j.toString(16);
	    }
	  }
	
	  function createMatrixIdentity() {
	    return [
	      [1, 0, 0],
	      [0, 1, 0],
	      [0, 0, 1]
	    ];
	  }
	
	  function matrixMultiply(m1, m2) {
	    var result = createMatrixIdentity();
	
	    for (var x = 0; x < 3; x++) {
	      for (var y = 0; y < 3; y++) {
	        var sum = 0;
	
	        for (var z = 0; z < 3; z++) {
	          sum += m1[x][z] * m2[z][y];
	        }
	
	        result[x][y] = sum;
	      }
	    }
	    return result;
	  }
	
	  function copyState(o1, o2) {
	    o2.fillStyle     = o1.fillStyle;
	    o2.lineCap       = o1.lineCap;
	    o2.lineJoin      = o1.lineJoin;
	    o2.lineWidth     = o1.lineWidth;
	    o2.miterLimit    = o1.miterLimit;
	    o2.shadowBlur    = o1.shadowBlur;
	    o2.shadowColor   = o1.shadowColor;
	    o2.shadowOffsetX = o1.shadowOffsetX;
	    o2.shadowOffsetY = o1.shadowOffsetY;
	    o2.strokeStyle   = o1.strokeStyle;
	    o2.globalAlpha   = o1.globalAlpha;
	    o2.font          = o1.font;
	    o2.textAlign     = o1.textAlign;
	    o2.textBaseline  = o1.textBaseline;
	    o2.scaleX_    = o1.scaleX_;
	    o2.scaleY_    = o1.scaleY_;
	    o2.lineScale_    = o1.lineScale_;
	  }
	
	  var colorData = {
	    aliceblue: '#F0F8FF',
	    antiquewhite: '#FAEBD7',
	    aquamarine: '#7FFFD4',
	    azure: '#F0FFFF',
	    beige: '#F5F5DC',
	    bisque: '#FFE4C4',
	    black: '#000000',
	    blanchedalmond: '#FFEBCD',
	    blueviolet: '#8A2BE2',
	    brown: '#A52A2A',
	    burlywood: '#DEB887',
	    cadetblue: '#5F9EA0',
	    chartreuse: '#7FFF00',
	    chocolate: '#D2691E',
	    coral: '#FF7F50',
	    cornflowerblue: '#6495ED',
	    cornsilk: '#FFF8DC',
	    crimson: '#DC143C',
	    cyan: '#00FFFF',
	    darkblue: '#00008B',
	    darkcyan: '#008B8B',
	    darkgoldenrod: '#B8860B',
	    darkgray: '#A9A9A9',
	    darkgreen: '#006400',
	    darkgrey: '#A9A9A9',
	    darkkhaki: '#BDB76B',
	    darkmagenta: '#8B008B',
	    darkolivegreen: '#556B2F',
	    darkorange: '#FF8C00',
	    darkorchid: '#9932CC',
	    darkred: '#8B0000',
	    darksalmon: '#E9967A',
	    darkseagreen: '#8FBC8F',
	    darkslateblue: '#483D8B',
	    darkslategray: '#2F4F4F',
	    darkslategrey: '#2F4F4F',
	    darkturquoise: '#00CED1',
	    darkviolet: '#9400D3',
	    deeppink: '#FF1493',
	    deepskyblue: '#00BFFF',
	    dimgray: '#696969',
	    dimgrey: '#696969',
	    dodgerblue: '#1E90FF',
	    firebrick: '#B22222',
	    floralwhite: '#FFFAF0',
	    forestgreen: '#228B22',
	    gainsboro: '#DCDCDC',
	    ghostwhite: '#F8F8FF',
	    gold: '#FFD700',
	    goldenrod: '#DAA520',
	    grey: '#808080',
	    greenyellow: '#ADFF2F',
	    honeydew: '#F0FFF0',
	    hotpink: '#FF69B4',
	    indianred: '#CD5C5C',
	    indigo: '#4B0082',
	    ivory: '#FFFFF0',
	    khaki: '#F0E68C',
	    lavender: '#E6E6FA',
	    lavenderblush: '#FFF0F5',
	    lawngreen: '#7CFC00',
	    lemonchiffon: '#FFFACD',
	    lightblue: '#ADD8E6',
	    lightcoral: '#F08080',
	    lightcyan: '#E0FFFF',
	    lightgoldenrodyellow: '#FAFAD2',
	    lightgreen: '#90EE90',
	    lightgrey: '#D3D3D3',
	    lightpink: '#FFB6C1',
	    lightsalmon: '#FFA07A',
	    lightseagreen: '#20B2AA',
	    lightskyblue: '#87CEFA',
	    lightslategray: '#778899',
	    lightslategrey: '#778899',
	    lightsteelblue: '#B0C4DE',
	    lightyellow: '#FFFFE0',
	    limegreen: '#32CD32',
	    linen: '#FAF0E6',
	    magenta: '#FF00FF',
	    mediumaquamarine: '#66CDAA',
	    mediumblue: '#0000CD',
	    mediumorchid: '#BA55D3',
	    mediumpurple: '#9370DB',
	    mediumseagreen: '#3CB371',
	    mediumslateblue: '#7B68EE',
	    mediumspringgreen: '#00FA9A',
	    mediumturquoise: '#48D1CC',
	    mediumvioletred: '#C71585',
	    midnightblue: '#191970',
	    mintcream: '#F5FFFA',
	    mistyrose: '#FFE4E1',
	    moccasin: '#FFE4B5',
	    navajowhite: '#FFDEAD',
	    oldlace: '#FDF5E6',
	    olivedrab: '#6B8E23',
	    orange: '#FFA500',
	    orangered: '#FF4500',
	    orchid: '#DA70D6',
	    palegoldenrod: '#EEE8AA',
	    palegreen: '#98FB98',
	    paleturquoise: '#AFEEEE',
	    palevioletred: '#DB7093',
	    papayawhip: '#FFEFD5',
	    peachpuff: '#FFDAB9',
	    peru: '#CD853F',
	    pink: '#FFC0CB',
	    plum: '#DDA0DD',
	    powderblue: '#B0E0E6',
	    rosybrown: '#BC8F8F',
	    royalblue: '#4169E1',
	    saddlebrown: '#8B4513',
	    salmon: '#FA8072',
	    sandybrown: '#F4A460',
	    seagreen: '#2E8B57',
	    seashell: '#FFF5EE',
	    sienna: '#A0522D',
	    skyblue: '#87CEEB',
	    slateblue: '#6A5ACD',
	    slategray: '#708090',
	    slategrey: '#708090',
	    snow: '#FFFAFA',
	    springgreen: '#00FF7F',
	    steelblue: '#4682B4',
	    tan: '#D2B48C',
	    thistle: '#D8BFD8',
	    tomato: '#FF6347',
	    turquoise: '#40E0D0',
	    violet: '#EE82EE',
	    wheat: '#F5DEB3',
	    whitesmoke: '#F5F5F5',
	    yellowgreen: '#9ACD32'
	  };
	
	
	  function getRgbHslContent(styleString) {
	    var start = styleString.indexOf('(', 3);
	    var end = styleString.indexOf(')', start + 1);
	    var parts = styleString.substring(start + 1, end).split(',');
	    // add alpha if needed
	    if (parts.length != 4 || styleString.charAt(3) != 'a') {
	      parts[3] = 1;
	    }
	    return parts;
	  }
	
	  function percent(s) {
	    return parseFloat(s) / 100;
	  }
	
	  function clamp(v, min, max) {
	    return Math.min(max, Math.max(min, v));
	  }
	
	  function hslToRgb(parts){
	    var r, g, b, h, s, l;
	    h = parseFloat(parts[0]) / 360 % 360;
	    if (h < 0)
	      h++;
	    s = clamp(percent(parts[1]), 0, 1);
	    l = clamp(percent(parts[2]), 0, 1);
	    if (s == 0) {
	      r = g = b = l; // achromatic
	    } else {
	      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      var p = 2 * l - q;
	      r = hueToRgb(p, q, h + 1 / 3);
	      g = hueToRgb(p, q, h);
	      b = hueToRgb(p, q, h - 1 / 3);
	    }
	
	    return '#' + decToHex[Math.floor(r * 255)] +
	        decToHex[Math.floor(g * 255)] +
	        decToHex[Math.floor(b * 255)];
	  }
	
	  function hueToRgb(m1, m2, h) {
	    if (h < 0)
	      h++;
	    if (h > 1)
	      h--;
	
	    if (6 * h < 1)
	      return m1 + (m2 - m1) * 6 * h;
	    else if (2 * h < 1)
	      return m2;
	    else if (3 * h < 2)
	      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	    else
	      return m1;
	  }
	
	  var processStyleCache = {};
	
	  function processStyle(styleString) {
	    if (styleString in processStyleCache) {
	      return processStyleCache[styleString];
	    }
	
	    var str, alpha = 1;
	
	    styleString = String(styleString);
	    if (styleString.charAt(0) == '#') {
	      str = styleString;
	    } else if (/^rgb/.test(styleString)) {
	      var parts = getRgbHslContent(styleString);
	      var str = '#', n;
	      for (var i = 0; i < 3; i++) {
	        if (parts[i].indexOf('%') != -1) {
	          n = Math.floor(percent(parts[i]) * 255);
	        } else {
	          n = +parts[i];
	        }
	        str += decToHex[clamp(n, 0, 255)];
	      }
	      alpha = +parts[3];
	    } else if (/^hsl/.test(styleString)) {
	      var parts = getRgbHslContent(styleString);
	      str = hslToRgb(parts);
	      alpha = parts[3];
	    } else {
	      str = colorData[styleString] || styleString;
	    }
	    return processStyleCache[styleString] = {color: str, alpha: alpha};
	  }
	
	  var DEFAULT_STYLE = {
	    style: 'normal',
	    variant: 'normal',
	    weight: 'normal',
	    size: 12,           //10
	    family: '微软雅黑'     //'sans-serif'
	  };
	
	  // Internal text style cache
	  var fontStyleCache = {};
	
	  function processFontStyle(styleString) {
	    if (fontStyleCache[styleString]) {
	      return fontStyleCache[styleString];
	    }
	
	    var el = document.createElement('div');
	    var style = el.style;
	    var fontFamily;
	    try {
	      style.font = styleString;
	      fontFamily = style.fontFamily.split(',')[0];
	    } catch (ex) {
	      // Ignore failures to set to invalid font.
	    }
	
	    return fontStyleCache[styleString] = {
	      style: style.fontStyle || DEFAULT_STYLE.style,
	      variant: style.fontVariant || DEFAULT_STYLE.variant,
	      weight: style.fontWeight || DEFAULT_STYLE.weight,
	      size: style.fontSize || DEFAULT_STYLE.size,
	      family: fontFamily || DEFAULT_STYLE.family
	    };
	  }
	
	  function getComputedStyle(style, element) {
	    var computedStyle = {};
	
	    for (var p in style) {
	      computedStyle[p] = style[p];
	    }
	
	    // Compute the size
	    var canvasFontSize = parseFloat(element.currentStyle.fontSize),
	        fontSize = parseFloat(style.size);
	
	    if (typeof style.size == 'number') {
	      computedStyle.size = style.size;
	    } else if (style.size.indexOf('px') != -1) {
	      computedStyle.size = fontSize;
	    } else if (style.size.indexOf('em') != -1) {
	      computedStyle.size = canvasFontSize * fontSize;
	    } else if(style.size.indexOf('%') != -1) {
	      computedStyle.size = (canvasFontSize / 100) * fontSize;
	    } else if (style.size.indexOf('pt') != -1) {
	      computedStyle.size = fontSize / .75;
	    } else {
	      computedStyle.size = canvasFontSize;
	    }
	
	    // Different scaling between normal text and VML text. This was found using
	    // trial and error to get the same size as non VML text.
	    //computedStyle.size *= 0.981;
	
	    return computedStyle;
	  }
	
	  function buildStyle(style) {
	    return style.style + ' ' + style.variant + ' ' + style.weight + ' ' +
	        style.size + "px '" + style.family + "'";
	  }
	
	  var lineCapMap = {
	    'butt': 'flat',
	    'round': 'round'
	  };
	
	  function processLineCap(lineCap) {
	    return lineCapMap[lineCap] || 'square';
	  }
	
	  /**
	   * This class implements CanvasRenderingContext2D interface as described by
	   * the WHATWG.
	   * @param {HTMLElement} canvasElement The element that the 2D context should
	   * be associated with
	   */
	  function CanvasRenderingContext2D_(canvasElement) {
	    this.m_ = createMatrixIdentity();
	
	    this.mStack_ = [];
	    this.aStack_ = [];
	    this.currentPath_ = [];
	
	    // Canvas context properties
	    this.strokeStyle = '#000';
	    this.fillStyle = '#000';
	
	    this.lineWidth = 1;
	    this.lineJoin = 'miter';
	    this.lineCap = 'butt';
	    this.miterLimit = Z * 1;
	    this.globalAlpha = 1;
	    // this.font = '10px sans-serif';
	    this.font = '12px 微软雅黑';        // 决定还是改这吧，影响代价最小
	    this.textAlign = 'left';
	    this.textBaseline = 'alphabetic';
	    this.canvas = canvasElement;
	
	    var cssText = 'width:' + canvasElement.clientWidth + 'px;height:' +
	        canvasElement.clientHeight + 'px;overflow:hidden;position:absolute';
	    var el = canvasElement.ownerDocument.createElement('div');
	    el.style.cssText = cssText;
	    canvasElement.appendChild(el);
	
	    var overlayEl = el.cloneNode(false);
	    // Use a non transparent background.
	    overlayEl.style.backgroundColor = '#fff'; //red, I don't know why, it work!
	    overlayEl.style.filter = 'alpha(opacity=0)';
	    canvasElement.appendChild(overlayEl);
	
	    this.element_ = el;
	    this.scaleX_ = 1;
	    this.scaleY_ = 1;
	    this.lineScale_ = 1;
	  }
	
	  var contextPrototype = CanvasRenderingContext2D_.prototype;
	  contextPrototype.clearRect = function() {
	    if (this.textMeasureEl_) {
	      this.textMeasureEl_.removeNode(true);
	      this.textMeasureEl_ = null;
	    }
	    this.element_.innerHTML = '';
	  };
	
	  contextPrototype.beginPath = function() {
	    // TODO: Branch current matrix so that save/restore has no effect
	    //       as per safari docs.
	    this.currentPath_ = [];
	  };
	
	  contextPrototype.moveTo = function(aX, aY) {
	    var p = getCoords(this, aX, aY);
	    this.currentPath_.push({type: 'moveTo', x: p.x, y: p.y});
	    this.currentX_ = p.x;
	    this.currentY_ = p.y;
	  };
	
	  contextPrototype.lineTo = function(aX, aY) {
	    var p = getCoords(this, aX, aY);
	    this.currentPath_.push({type: 'lineTo', x: p.x, y: p.y});
	
	    this.currentX_ = p.x;
	    this.currentY_ = p.y;
	  };
	
	  contextPrototype.bezierCurveTo = function(aCP1x, aCP1y,
	                                            aCP2x, aCP2y,
	                                            aX, aY) {
	    var p = getCoords(this, aX, aY);
	    var cp1 = getCoords(this, aCP1x, aCP1y);
	    var cp2 = getCoords(this, aCP2x, aCP2y);
	    bezierCurveTo(this, cp1, cp2, p);
	  };
	
	  // Helper function that takes the already fixed cordinates.
	  function bezierCurveTo(self, cp1, cp2, p) {
	    self.currentPath_.push({
	      type: 'bezierCurveTo',
	      cp1x: cp1.x,
	      cp1y: cp1.y,
	      cp2x: cp2.x,
	      cp2y: cp2.y,
	      x: p.x,
	      y: p.y
	    });
	    self.currentX_ = p.x;
	    self.currentY_ = p.y;
	  }
	
	  contextPrototype.quadraticCurveTo = function(aCPx, aCPy, aX, aY) {
	    // the following is lifted almost directly from
	    // http://developer.mozilla.org/en/docs/Canvas_tutorial:Drawing_shapes
	
	    var cp = getCoords(this, aCPx, aCPy);
	    var p = getCoords(this, aX, aY);
	
	    var cp1 = {
	      x: this.currentX_ + 2.0 / 3.0 * (cp.x - this.currentX_),
	      y: this.currentY_ + 2.0 / 3.0 * (cp.y - this.currentY_)
	    };
	    var cp2 = {
	      x: cp1.x + (p.x - this.currentX_) / 3.0,
	      y: cp1.y + (p.y - this.currentY_) / 3.0
	    };
	
	    bezierCurveTo(this, cp1, cp2, p);
	  };
	
	  contextPrototype.arc = function(aX, aY, aRadius,
	                                  aStartAngle, aEndAngle, aClockwise) {
	    aRadius *= Z;
	    var arcType = aClockwise ? 'at' : 'wa';
	
	    var xStart = aX + mc(aStartAngle) * aRadius - Z2;
	    var yStart = aY + ms(aStartAngle) * aRadius - Z2;
	
	    var xEnd = aX + mc(aEndAngle) * aRadius - Z2;
	    var yEnd = aY + ms(aEndAngle) * aRadius - Z2;
	
	    // IE won't render arches drawn counter clockwise if xStart == xEnd.
	    if (xStart == xEnd && !aClockwise) {
	      xStart += 0.125; // Offset xStart by 1/80 of a pixel. Use something
	                       // that can be represented in binary
	    }
	
	    var p = getCoords(this, aX, aY);
	    var pStart = getCoords(this, xStart, yStart);
	    var pEnd = getCoords(this, xEnd, yEnd);
	
	    this.currentPath_.push({type: arcType,
	                           x: p.x,
	                           y: p.y,
	                           radius: aRadius,
	                           xStart: pStart.x,
	                           yStart: pStart.y,
	                           xEnd: pEnd.x,
	                           yEnd: pEnd.y});
	
	  };
	
	  contextPrototype.rect = function(aX, aY, aWidth, aHeight) {
	    this.moveTo(aX, aY);
	    this.lineTo(aX + aWidth, aY);
	    this.lineTo(aX + aWidth, aY + aHeight);
	    this.lineTo(aX, aY + aHeight);
	    this.closePath();
	  };
	
	  contextPrototype.strokeRect = function(aX, aY, aWidth, aHeight) {
	    var oldPath = this.currentPath_;
	    this.beginPath();
	
	    this.moveTo(aX, aY);
	    this.lineTo(aX + aWidth, aY);
	    this.lineTo(aX + aWidth, aY + aHeight);
	    this.lineTo(aX, aY + aHeight);
	    this.closePath();
	    this.stroke();
	
	    this.currentPath_ = oldPath;
	  };
	
	  contextPrototype.fillRect = function(aX, aY, aWidth, aHeight) {
	    var oldPath = this.currentPath_;
	    this.beginPath();
	
	    this.moveTo(aX, aY);
	    this.lineTo(aX + aWidth, aY);
	    this.lineTo(aX + aWidth, aY + aHeight);
	    this.lineTo(aX, aY + aHeight);
	    this.closePath();
	    this.fill();
	
	    this.currentPath_ = oldPath;
	  };
	
	  contextPrototype.createLinearGradient = function(aX0, aY0, aX1, aY1) {
	    var gradient = new CanvasGradient_('gradient');
	    gradient.x0_ = aX0;
	    gradient.y0_ = aY0;
	    gradient.x1_ = aX1;
	    gradient.y1_ = aY1;
	    return gradient;
	  };
	
	  contextPrototype.createRadialGradient = function(aX0, aY0, aR0,
	                                                   aX1, aY1, aR1) {
	    var gradient = new CanvasGradient_('gradientradial');
	    gradient.x0_ = aX0;
	    gradient.y0_ = aY0;
	    gradient.r0_ = aR0;
	    gradient.x1_ = aX1;
	    gradient.y1_ = aY1;
	    gradient.r1_ = aR1;
	    return gradient;
	  };
	
	  contextPrototype.drawImage = function(image, var_args) {
	    var dx, dy, dw, dh, sx, sy, sw, sh;
	
	    // to find the original width we overide the width and height
	    var oldRuntimeWidth = image.runtimeStyle.width;
	    var oldRuntimeHeight = image.runtimeStyle.height;
	    image.runtimeStyle.width = 'auto';
	    image.runtimeStyle.height = 'auto';
	
	    // get the original size
	    var w = image.width;
	    var h = image.height;
	
	    // and remove overides
	    image.runtimeStyle.width = oldRuntimeWidth;
	    image.runtimeStyle.height = oldRuntimeHeight;
	
	    if (arguments.length == 3) {
	      dx = arguments[1];
	      dy = arguments[2];
	      sx = sy = 0;
	      sw = dw = w;
	      sh = dh = h;
	    } else if (arguments.length == 5) {
	      dx = arguments[1];
	      dy = arguments[2];
	      dw = arguments[3];
	      dh = arguments[4];
	      sx = sy = 0;
	      sw = w;
	      sh = h;
	    } else if (arguments.length == 9) {
	      sx = arguments[1];
	      sy = arguments[2];
	      sw = arguments[3];
	      sh = arguments[4];
	      dx = arguments[5];
	      dy = arguments[6];
	      dw = arguments[7];
	      dh = arguments[8];
	    } else {
	      throw Error('Invalid number of arguments');
	    }
	
	    var d = getCoords(this, dx, dy);
	
	    var w2 = sw / 2;
	    var h2 = sh / 2;
	
	    var vmlStr = [];
	
	    var W = 10;
	    var H = 10;
	
	    var scaleX = scaleY = 1;
	
	    // For some reason that I've now forgotten, using divs didn't work
	    vmlStr.push(' <g_vml_:group',
	                ' coordsize="', Z * W, ',', Z * H, '"',
	                ' coordorigin="0,0"' ,
	                ' style="width:', W, 'px;height:', H, 'px;position:absolute;');
	
	    // If filters are necessary (rotation exists), create them
	    // filters are bog-slow, so only create them if abbsolutely necessary
	    // The following check doesn't account for skews (which don't exist
	    // in the canvas spec (yet) anyway.
	
	    if (this.m_[0][0] != 1 || this.m_[0][1] ||
	        this.m_[1][1] != 1 || this.m_[1][0]) {
	      var filter = [];
	
	     var scaleX = this.scaleX_;
	     var scaleY = this.scaleY_;
	      // Note the 12/21 reversal
	      filter.push('M11=', this.m_[0][0] / scaleX, ',',
	                  'M12=', this.m_[1][0] / scaleY, ',',
	                  'M21=', this.m_[0][1] / scaleX, ',',
	                  'M22=', this.m_[1][1] / scaleY, ',',
	                  'Dx=', mr(d.x / Z), ',',
	                  'Dy=', mr(d.y / Z), '');
	
	      // Bounding box calculation (need to minimize displayed area so that
	      // filters don't waste time on unused pixels.
	      var max = d;
	      var c2 = getCoords(this, dx + dw, dy);
	      var c3 = getCoords(this, dx, dy + dh);
	      var c4 = getCoords(this, dx + dw, dy + dh);
	
	      max.x = m.max(max.x, c2.x, c3.x, c4.x);
	      max.y = m.max(max.y, c2.y, c3.y, c4.y);
	
	      vmlStr.push('padding:0 ', mr(max.x / Z), 'px ', mr(max.y / Z),
	                  'px 0;filter:progid:DXImageTransform.Microsoft.Matrix(',
	                  filter.join(''), ", SizingMethod='clip');");
	
	    } else {
	      vmlStr.push('top:', mr(d.y / Z), 'px;left:', mr(d.x / Z), 'px;');
	    }
	
	    vmlStr.push(' ">');
	
	    // Draw a special cropping div if needed
	    if (sx || sy) {
	      // Apply scales to width and height
	      vmlStr.push('<div style="overflow: hidden; width:', Math.ceil((dw + sx * dw / sw) * scaleX), 'px;',
	                  ' height:', Math.ceil((dh + sy * dh / sh) * scaleY), 'px;',
	                  ' filter:progid:DxImageTransform.Microsoft.Matrix(Dx=',
	                  -sx * dw / sw * scaleX, ',Dy=', -sy * dh / sh * scaleY, ');">');
	    }
	
	
	    // Apply scales to width and height
	    vmlStr.push('<div style="width:', Math.round(scaleX * w * dw / sw), 'px;',
	                ' height:', Math.round(scaleY * h * dh / sh), 'px;',
	                ' filter:');
	
	    // If there is a globalAlpha, apply it to image
	    if(this.globalAlpha < 1) {
	      vmlStr.push(' progid:DXImageTransform.Microsoft.Alpha(opacity=' + (this.globalAlpha * 100) + ')');
	    }
	
	    vmlStr.push(' progid:DXImageTransform.Microsoft.AlphaImageLoader(src=', image.src, ',sizingMethod=scale)">');
	
	    // Close the crop div if necessary
	    if (sx || sy) vmlStr.push('</div>');
	
	    vmlStr.push('</div></div>');
	
	    this.element_.insertAdjacentHTML('BeforeEnd', vmlStr.join(''));
	  };
	
	  contextPrototype.stroke = function(aFill) {
	    var lineStr = [];
	    var lineOpen = false;
	
	    var W = 10;
	    var H = 10;
	
	    lineStr.push('<g_vml_:shape',
	                 ' filled="', !!aFill, '"',
	                 ' style="position:absolute;width:', W, 'px;height:', H, 'px;"',
	                 ' coordorigin="0,0"',
	                 ' coordsize="', Z * W, ',', Z * H, '"',
	                 ' stroked="', !aFill, '"',
	                 ' path="');
	
	    var newSeq = false;
	    var min = {x: null, y: null};
	    var max = {x: null, y: null};
	
	    for (var i = 0; i < this.currentPath_.length; i++) {
	      var p = this.currentPath_[i];
	      var c;
	
	      switch (p.type) {
	        case 'moveTo':
	          c = p;
	          lineStr.push(' m ', mr(p.x), ',', mr(p.y));
	          break;
	        case 'lineTo':
	          lineStr.push(' l ', mr(p.x), ',', mr(p.y));
	          break;
	        case 'close':
	          lineStr.push(' x ');
	          p = null;
	          break;
	        case 'bezierCurveTo':
	          lineStr.push(' c ',
	                       mr(p.cp1x), ',', mr(p.cp1y), ',',
	                       mr(p.cp2x), ',', mr(p.cp2y), ',',
	                       mr(p.x), ',', mr(p.y));
	          break;
	        case 'at':
	        case 'wa':
	          lineStr.push(' ', p.type, ' ',
	                       mr(p.x - this.scaleX_ * p.radius), ',',
	                       mr(p.y - this.scaleY_ * p.radius), ' ',
	                       mr(p.x + this.scaleX_ * p.radius), ',',
	                       mr(p.y + this.scaleY_ * p.radius), ' ',
	                       mr(p.xStart), ',', mr(p.yStart), ' ',
	                       mr(p.xEnd), ',', mr(p.yEnd));
	          break;
	      }
	
	
	      // TODO: Following is broken for curves due to
	      //       move to proper paths.
	
	      // Figure out dimensions so we can do gradient fills
	      // properly
	      if (p) {
	        if (min.x == null || p.x < min.x) {
	          min.x = p.x;
	        }
	        if (max.x == null || p.x > max.x) {
	          max.x = p.x;
	        }
	        if (min.y == null || p.y < min.y) {
	          min.y = p.y;
	        }
	        if (max.y == null || p.y > max.y) {
	          max.y = p.y;
	        }
	      }
	    }
	    lineStr.push(' ">');
	
	    if (!aFill) {
	      appendStroke(this, lineStr);
	    } else {
	      appendFill(this, lineStr, min, max);
	    }
	
	    lineStr.push('</g_vml_:shape>');
	
	    this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
	  };
	
	  function appendStroke(ctx, lineStr) {
	    var a = processStyle(ctx.strokeStyle);
	    var color = a.color;
	    var opacity = a.alpha * ctx.globalAlpha;
	    var lineWidth = ctx.lineScale_ * ctx.lineWidth;
	
	    // VML cannot correctly render a line if the width is less than 1px.
	    // In that case, we dilute the color to make the line look thinner.
	    if (lineWidth < 1) {
	      opacity *= lineWidth;
	    }
	
	    lineStr.push(
	      '<g_vml_:stroke',
	      ' opacity="', opacity, '"',
	      ' joinstyle="', ctx.lineJoin, '"',
	      ' miterlimit="', ctx.miterLimit, '"',
	      ' endcap="', processLineCap(ctx.lineCap), '"',
	      ' weight="', lineWidth, 'px"',
	      ' color="', color, '" />'
	    );
	  }
	
	  function appendFill(ctx, lineStr, min, max) {
	    var fillStyle = ctx.fillStyle;
	    var arcScaleX = ctx.scaleX_;
	    var arcScaleY = ctx.scaleY_;
	    var width = max.x - min.x;
	    var height = max.y - min.y;
	    if (fillStyle instanceof CanvasGradient_) {
	      // TODO: Gradients transformed with the transformation matrix.
	      var angle = 0;
	      var focus = {x: 0, y: 0};
	
	      // additional offset
	      var shift = 0;
	      // scale factor for offset
	      var expansion = 1;
	
	      if (fillStyle.type_ == 'gradient') {
	        var x0 = fillStyle.x0_ / arcScaleX;
	        var y0 = fillStyle.y0_ / arcScaleY;
	        var x1 = fillStyle.x1_ / arcScaleX;
	        var y1 = fillStyle.y1_ / arcScaleY;
	        var p0 = getCoords(ctx, x0, y0);
	        var p1 = getCoords(ctx, x1, y1);
	        var dx = p1.x - p0.x;
	        var dy = p1.y - p0.y;
	        angle = Math.atan2(dx, dy) * 180 / Math.PI;
	
	        // The angle should be a non-negative number.
	        if (angle < 0) {
	          angle += 360;
	        }
	
	        // Very small angles produce an unexpected result because they are
	        // converted to a scientific notation string.
	        if (angle < 1e-6) {
	          angle = 0;
	        }
	      } else {
	        var p0 = getCoords(ctx, fillStyle.x0_, fillStyle.y0_);
	        focus = {
	          x: (p0.x - min.x) / width,
	          y: (p0.y - min.y) / height
	        };
	
	        width  /= arcScaleX * Z;
	        height /= arcScaleY * Z;
	        var dimension = m.max(width, height);
	        shift = 2 * fillStyle.r0_ / dimension;
	        expansion = 2 * fillStyle.r1_ / dimension - shift;
	      }
	
	      // We need to sort the color stops in ascending order by offset,
	      // otherwise IE won't interpret it correctly.
	      var stops = fillStyle.colors_;
	      stops.sort(function(cs1, cs2) {
	        return cs1.offset - cs2.offset;
	      });
	
	      var length = stops.length;
	      var color1 = stops[0].color;
	      var color2 = stops[length - 1].color;
	      var opacity1 = stops[0].alpha * ctx.globalAlpha;
	      var opacity2 = stops[length - 1].alpha * ctx.globalAlpha;
	
	      var colors = [];
	      for (var i = 0; i < length; i++) {
	        var stop = stops[i];
	        colors.push(stop.offset * expansion + shift + ' ' + stop.color);
	      }
	
	      // When colors attribute is used, the meanings of opacity and o:opacity2
	      // are reversed.
	      lineStr.push('<g_vml_:fill type="', fillStyle.type_, '"',
	                   ' method="none" focus="100%"',
	                   ' color="', color1, '"',
	                   ' color2="', color2, '"',
	                   ' colors="', colors.join(','), '"',
	                   ' opacity="', opacity2, '"',
	                   ' g_o_:opacity2="', opacity1, '"',
	                   ' angle="', angle, '"',
	                   ' focusposition="', focus.x, ',', focus.y, '" />');
	    } else if (fillStyle instanceof CanvasPattern_) {
	      if (width && height) {
	        var deltaLeft = -min.x;
	        var deltaTop = -min.y;
	        lineStr.push('<g_vml_:fill',
	                     ' position="',
	                     deltaLeft / width * arcScaleX * arcScaleX, ',',
	                     deltaTop / height * arcScaleY * arcScaleY, '"',
	                     ' type="tile"',
	                     // TODO: Figure out the correct size to fit the scale.
	                     //' size="', w, 'px ', h, 'px"',
	                     ' src="', fillStyle.src_, '" />');
	       }
	    } else {
	      var a = processStyle(ctx.fillStyle);
	      var color = a.color;
	      var opacity = a.alpha * ctx.globalAlpha;
	      lineStr.push('<g_vml_:fill color="', color, '" opacity="', opacity,
	                   '" />');
	    }
	  }
	
	  contextPrototype.fill = function() {
	    this.stroke(true);
	  };
	
	  contextPrototype.closePath = function() {
	    this.currentPath_.push({type: 'close'});
	  };
	
	  function getCoords(ctx, aX, aY) {
	    var m = ctx.m_;
	    return {
	      x: Z * (aX * m[0][0] + aY * m[1][0] + m[2][0]) - Z2,
	      y: Z * (aX * m[0][1] + aY * m[1][1] + m[2][1]) - Z2
	    };
	  };
	
	  contextPrototype.save = function() {
	    var o = {};
	    copyState(this, o);
	    this.aStack_.push(o);
	    this.mStack_.push(this.m_);
	    this.m_ = matrixMultiply(createMatrixIdentity(), this.m_);
	  };
	
	  contextPrototype.restore = function() {
	    if (this.aStack_.length) {
	      copyState(this.aStack_.pop(), this);
	      this.m_ = this.mStack_.pop();
	    }
	  };
	
	  function matrixIsFinite(m) {
	    return isFinite(m[0][0]) && isFinite(m[0][1]) &&
	        isFinite(m[1][0]) && isFinite(m[1][1]) &&
	        isFinite(m[2][0]) && isFinite(m[2][1]);
	  }
	
	  function setM(ctx, m, updateLineScale) {
	    if (!matrixIsFinite(m)) {
	      return;
	    }
	    ctx.m_ = m;
	
	    ctx.scaleX_ = Math.sqrt(m[0][0] * m[0][0] + m[0][1] * m[0][1]);
	    ctx.scaleY_ = Math.sqrt(m[1][0] * m[1][0] + m[1][1] * m[1][1]);
	
	    if (updateLineScale) {
	      // Get the line scale.
	      // Determinant of this.m_ means how much the area is enlarged by the
	      // transformation. So its square root can be used as a scale factor
	      // for width.
	      var det = m[0][0] * m[1][1] - m[0][1] * m[1][0];
	      ctx.lineScale_ = sqrt(abs(det));
	    }
	  }
	
	  contextPrototype.translate = function(aX, aY) {
	    var m1 = [
	      [1,  0,  0],
	      [0,  1,  0],
	      [aX, aY, 1]
	    ];
	
	    setM(this, matrixMultiply(m1, this.m_), false);
	  };
	
	  contextPrototype.rotate = function(aRot) {
	    var c = mc(aRot);
	    var s = ms(aRot);
	
	    var m1 = [
	      [c,  s, 0],
	      [-s, c, 0],
	      [0,  0, 1]
	    ];
	
	    setM(this, matrixMultiply(m1, this.m_), false);
	  };
	
	  contextPrototype.scale = function(aX, aY) {
	    var m1 = [
	      [aX, 0,  0],
	      [0,  aY, 0],
	      [0,  0,  1]
	    ];
	
	    setM(this, matrixMultiply(m1, this.m_), true);
	  };
	
	  contextPrototype.transform = function(m11, m12, m21, m22, dx, dy) {
	    var m1 = [
	      [m11, m12, 0],
	      [m21, m22, 0],
	      [dx,  dy,  1]
	    ];
	
	    setM(this, matrixMultiply(m1, this.m_), true);
	
	  };
	
	  contextPrototype.setTransform = function(m11, m12, m21, m22, dx, dy) {
	    var m = [
	      [m11, m12, 0],
	      [m21, m22, 0],
	      [dx,  dy,  1]
	    ];
	
	    setM(this, m, true);
	  };
	
	  /**
	   * The text drawing function.
	   * The maxWidth argument isn't taken in account, since no browser supports
	   * it yet.
	   */
	  contextPrototype.drawText_ = function(text, x, y, maxWidth, stroke) {
	    var m = this.m_,
	        delta = 1000,
	        left = 0,
	        right = delta,
	        offset = {x: 0, y: 0},
	        lineStr = [];
	
	    var fontStyle = getComputedStyle(processFontStyle(this.font),
	                                     this.element_);
	
	    var fontStyleString = buildStyle(fontStyle);
	
	    var elementStyle = this.element_.currentStyle;
	    var textAlign = this.textAlign.toLowerCase();
	    switch (textAlign) {
	      case 'left':
	      case 'center':
	      case 'right':
	        break;
	      case 'end':
	        textAlign = elementStyle.direction == 'ltr' ? 'right' : 'left';
	        break;
	      case 'start':
	        textAlign = elementStyle.direction == 'rtl' ? 'right' : 'left';
	        break;
	      default:
	        textAlign = 'left';
	    }
	
	    // 1.75 is an arbitrary number, as there is no info about the text baseline
	    switch (this.textBaseline) {
	      case 'hanging':
	      case 'top':
	        offset.y = fontStyle.size / 1.75;
	        break;
	      case 'middle':
	        break;
	      default:
	      case null:
	      case 'alphabetic':
	      case 'ideographic':
	      case 'bottom':
	        offset.y = -fontStyle.size / 2.25;
	        break;
	    }
	
	    switch(textAlign) {
	      case 'right':
	        left = delta;
	        right = 0.05;
	        break;
	      case 'center':
	        left = right = delta / 2;
	        break;
	    }
	
	    var d = getCoords(this, x + offset.x, y + offset.y);
	
	    lineStr.push('<g_vml_:line from="', -left ,' 0" to="', right ,' 0.05" ',
	                 ' coordsize="100 100" coordorigin="0 0"',
	                 ' filled="', !stroke, '" stroked="', !!stroke,
	                 '" style="position:absolute;width:1px;height:1px;">');
	
	    if (stroke) {
	      appendStroke(this, lineStr);
	    } else {
	      // TODO: Fix the min and max params.
	      appendFill(this, lineStr, {x: -left, y: 0},
	                 {x: right, y: fontStyle.size});
	    }
	
	    var skewM = m[0][0].toFixed(3) + ',' + m[1][0].toFixed(3) + ',' +
	                m[0][1].toFixed(3) + ',' + m[1][1].toFixed(3) + ',0,0';
	
	    var skewOffset = mr(d.x / Z) + ',' + mr(d.y / Z);
	
	    lineStr.push('<g_vml_:skew on="t" matrix="', skewM ,'" ',
	                 ' offset="', skewOffset, '" origin="', left ,' 0" />',
	                 '<g_vml_:path textpathok="true" />',
	                 '<g_vml_:textpath on="true" string="',
	                 encodeHtmlAttribute(text),
	                 '" style="v-text-align:', textAlign,
	                 ';font:', encodeHtmlAttribute(fontStyleString),
	                 '" /></g_vml_:line>');
	
	    this.element_.insertAdjacentHTML('beforeEnd', lineStr.join(''));
	  };
	
	  contextPrototype.fillText = function(text, x, y, maxWidth) {
	    this.drawText_(text, x, y, maxWidth, false);
	  };
	
	  contextPrototype.strokeText = function(text, x, y, maxWidth) {
	    this.drawText_(text, x, y, maxWidth, true);
	  };
	
	  contextPrototype.measureText = function(text) {
	    if (!this.textMeasureEl_) {
	      var s = '<span style="position:absolute;' +
	          'top:-20000px;left:0;padding:0;margin:0;border:none;' +
	          'white-space:pre;"></span>';
	      this.element_.insertAdjacentHTML('beforeEnd', s);
	      this.textMeasureEl_ = this.element_.lastChild;
	    }
	    var doc = this.element_.ownerDocument;
	    this.textMeasureEl_.innerHTML = '';
	    try {
	        this.textMeasureEl_.style.font = this.font;
	    } catch (ex) {
	        // Ignore failures to set to invalid font.
	    }
	
	    // Don't use innerHTML or innerText because they allow markup/whitespace.
	    this.textMeasureEl_.appendChild(doc.createTextNode(text));
	    return {width: this.textMeasureEl_.offsetWidth};
	  };
	
	  /******** STUBS ********/
	  contextPrototype.clip = function() {
	    // TODO: Implement
	  };
	
	  contextPrototype.arcTo = function() {
	    // TODO: Implement
	  };
	
	  contextPrototype.createPattern = function(image, repetition) {
	    return new CanvasPattern_(image, repetition);
	  };
	
	  // Gradient / Pattern Stubs
	  function CanvasGradient_(aType) {
	    this.type_ = aType;
	    this.x0_ = 0;
	    this.y0_ = 0;
	    this.r0_ = 0;
	    this.x1_ = 0;
	    this.y1_ = 0;
	    this.r1_ = 0;
	    this.colors_ = [];
	  }
	
	  CanvasGradient_.prototype.addColorStop = function(aOffset, aColor) {
	    aColor = processStyle(aColor);
	    this.colors_.push({offset: aOffset,
	                       color: aColor.color,
	                       alpha: aColor.alpha});
	  };
	
	  function CanvasPattern_(image, repetition) {
	    assertImageIsValid(image);
	    switch (repetition) {
	      case 'repeat':
	      case null:
	      case '':
	        this.repetition_ = 'repeat';
	        break
	      case 'repeat-x':
	      case 'repeat-y':
	      case 'no-repeat':
	        this.repetition_ = repetition;
	        break;
	      default:
	        throwException('SYNTAX_ERR');
	    }
	
	    this.src_ = image.src;
	    this.width_ = image.width;
	    this.height_ = image.height;
	  }
	
	  function throwException(s) {
	    throw new DOMException_(s);
	  }
	
	  function assertImageIsValid(img) {
	    if (!img || img.nodeType != 1 || img.tagName != 'IMG') {
	      throwException('TYPE_MISMATCH_ERR');
	    }
	    if (img.readyState != 'complete') {
	      throwException('INVALID_STATE_ERR');
	    }
	  }
	
	  function DOMException_(s) {
	    this.code = this[s];
	    this.message = s +': DOM Exception ' + this.code;
	  }
	  var p = DOMException_.prototype = new Error;
	  p.INDEX_SIZE_ERR = 1;
	  p.DOMSTRING_SIZE_ERR = 2;
	  p.HIERARCHY_REQUEST_ERR = 3;
	  p.WRONG_DOCUMENT_ERR = 4;
	  p.INVALID_CHARACTER_ERR = 5;
	  p.NO_DATA_ALLOWED_ERR = 6;
	  p.NO_MODIFICATION_ALLOWED_ERR = 7;
	  p.NOT_FOUND_ERR = 8;
	  p.NOT_SUPPORTED_ERR = 9;
	  p.INUSE_ATTRIBUTE_ERR = 10;
	  p.INVALID_STATE_ERR = 11;
	  p.SYNTAX_ERR = 12;
	  p.INVALID_MODIFICATION_ERR = 13;
	  p.NAMESPACE_ERR = 14;
	  p.INVALID_ACCESS_ERR = 15;
	  p.VALIDATION_ERR = 16;
	  p.TYPE_MISMATCH_ERR = 17;
	
	  // set up externs
	  G_vmlCanvasManager = G_vmlCanvasManager_;
	  CanvasRenderingContext2D = CanvasRenderingContext2D_;
	  CanvasGradient = CanvasGradient_;
	  CanvasPattern = CanvasPattern_;
	  DOMException = DOMException_;
	})();
	
	} // if
	else { // make the canvas test simple by kener.linfeng@gmail.com
	    G_vmlCanvasManager = void 0;
	}
	return G_vmlCanvasManager;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // define


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 事件辅助类
	 * @module zrender/tool/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	        'use strict';
	
	        var Eventful = __webpack_require__(171);
	
	        /**
	        * 提取鼠标（手指）x坐标
	        * @memberOf module:zrender/tool/event
	        * @param  {Event} e 事件.
	        * @return {number} 鼠标（手指）x坐标.
	        */
	        function getX(e) {
	            return typeof e.zrenderX != 'undefined' && e.zrenderX
	                   || typeof e.offsetX != 'undefined' && e.offsetX
	                   || typeof e.layerX != 'undefined' && e.layerX
	                   || typeof e.clientX != 'undefined' && e.clientX;
	        }
	
	        /**
	        * 提取鼠标y坐标
	        * @memberOf module:zrender/tool/event
	        * @param  {Event} e 事件.
	        * @return {number} 鼠标（手指）y坐标.
	        */
	        function getY(e) {
	            return typeof e.zrenderY != 'undefined' && e.zrenderY
	                   || typeof e.offsetY != 'undefined' && e.offsetY
	                   || typeof e.layerY != 'undefined' && e.layerY
	                   || typeof e.clientY != 'undefined' && e.clientY;
	        }
	
	        /**
	        * 提取鼠标滚轮变化
	        * @memberOf module:zrender/tool/event
	        * @param  {Event} e 事件.
	        * @return {number} 滚轮变化，正值说明滚轮是向上滚动，如果是负值说明滚轮是向下滚动
	        */
	        function getDelta(e) {
	            return typeof e.zrenderDelta != 'undefined' && e.zrenderDelta
	                   || typeof e.wheelDelta != 'undefined' && e.wheelDelta
	                   || typeof e.detail != 'undefined' && -e.detail;
	        }
	
	        /**
	         * 停止冒泡和阻止默认行为
	         * @memberOf module:zrender/tool/event
	         * @method
	         * @param {Event} e : event对象
	         */
	        var stop = typeof window.addEventListener === 'function'
	            ? function (e) {
	                e.preventDefault();
	                e.stopPropagation();
	                e.cancelBubble = true;
	            }
	            : function (e) {
	                e.returnValue = false;
	                e.cancelBubble = true;
	            };
	        
	        return {
	            getX : getX,
	            getY : getY,
	            getDelta : getDelta,
	            stop : stop,
	            // 做向上兼容
	            Dispatcher : Eventful
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    /**
	     * 事件分发器
	     * @alias module:zrender/mixin/Eventful
	     * @constructor
	     */
	    var Eventful = function () {
	        this._handlers = {};
	    };
	    /**
	     * 单次触发绑定，dispatch后销毁
	     * 
	     * @param {string} event 事件名
	     * @param {Function} handler 响应函数
	     * @param {Object} context
	     */
	    Eventful.prototype.one = function (event, handler, context) {
	        var _h = this._handlers;
	
	        if (!handler || !event) {
	            return this;
	        }
	
	        if (!_h[event]) {
	            _h[event] = [];
	        }
	
	        _h[event].push({
	            h : handler,
	            one : true,
	            ctx: context || this
	        });
	
	        return this;
	    };
	
	    /**
	     * 绑定事件
	     * @param {string} event 事件名
	     * @param {Function} handler 事件处理函数
	     * @param {Object} [context]
	     */
	    Eventful.prototype.bind = function (event, handler, context) {
	        var _h = this._handlers;
	
	        if (!handler || !event) {
	            return this;
	        }
	
	        if (!_h[event]) {
	            _h[event] = [];
	        }
	
	        _h[event].push({
	            h : handler,
	            one : false,
	            ctx: context || this
	        });
	
	        return this;
	    };
	
	    /**
	     * 解绑事件
	     * @param {string} event 事件名
	     * @param {Function} [handler] 事件处理函数
	     */
	    Eventful.prototype.unbind = function (event, handler) {
	        var _h = this._handlers;
	
	        if (!event) {
	            this._handlers = {};
	            return this;
	        }
	
	        if (handler) {
	            if (_h[event]) {
	                var newList = [];
	                for (var i = 0, l = _h[event].length; i < l; i++) {
	                    if (_h[event][i]['h'] != handler) {
	                        newList.push(_h[event][i]);
	                    }
	                }
	                _h[event] = newList;
	            }
	
	            if (_h[event] && _h[event].length === 0) {
	                delete _h[event];
	            }
	        }
	        else {
	            delete _h[event];
	        }
	
	        return this;
	    };
	
	    /**
	     * 事件分发
	     * 
	     * @param {string} type 事件类型
	     */
	    Eventful.prototype.dispatch = function (type) {
	        if (this._handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;
	
	            if (argLen > 3) {
	                args = Array.prototype.slice.call(args, 1);
	            }
	            
	            var _h = this._handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(_h[i]['ctx']);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(_h[i]['ctx'], args);
	                        break;
	                }
	                
	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * 带有context的事件分发, 最后一个参数是事件回调的context
	     * @param {string} type 事件类型
	     */
	    Eventful.prototype.dispatchWithContext = function (type) {
	        if (this._handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;
	
	            if (argLen > 4) {
	                args = Array.prototype.slice.call(args, 1, args.length - 1);
	            }
	            var ctx = args[args.length - 1];
	
	            var _h = this._handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(ctx);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(ctx, args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(ctx, args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(ctx, args);
	                        break;
	                }
	                
	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }
	        }
	
	        return this;
	    };
	
	    // 对象可以通过 onxxxx 绑定事件
	    /**
	     * @event module:zrender/mixin/Eventful#onclick
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseout
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousemove
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousewheel
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousedown
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseup
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragstart
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragend
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragenter
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragleave
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrop
	     * @type {Function}
	     * @default null
	     */
	    
	    return Eventful;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // Zepto.js
	    // (c) 2010-2013 Thomas Fuchs
	    // Zepto.js may be freely distributed under the MIT license.
	
	    function detect(ua) {
	        var os = this.os = {};
	        var browser = this.browser = {};
	        var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	        var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	        var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	        var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	        var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	        var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	        var touchpad = webos && ua.match(/TouchPad/);
	        var kindle = ua.match(/Kindle\/([\d.]+)/);
	        var silk = ua.match(/Silk\/([\d._]+)/);
	        var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	        var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	        var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	        var playbook = ua.match(/PlayBook/);
	        var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	        var firefox = ua.match(/Firefox\/([\d.]+)/);
	        var ie = ua.match(/MSIE ([\d.]+)/);
	        var safari = webkit && ua.match(/Mobile\//) && !chrome;
	        var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	        var ie = ua.match(/MSIE\s([\d.]+)/);
	
	        // Todo: clean this up with a better OS/browser seperation:
	        // - discern (more) between multiple browsers on android
	        // - decide if kindle fire in silk mode is android or not
	        // - Firefox on Android doesn't specify the Android version
	        // - possibly devide in os, device and browser hashes
	
	        if (browser.webkit = !!webkit) browser.version = webkit[1];
	
	        if (android) os.android = true, os.version = android[2];
	        if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	        if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	        if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	        if (webos) os.webos = true, os.version = webos[2];
	        if (touchpad) os.touchpad = true;
	        if (blackberry) os.blackberry = true, os.version = blackberry[2];
	        if (bb10) os.bb10 = true, os.version = bb10[2];
	        if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	        if (playbook) browser.playbook = true;
	        if (kindle) os.kindle = true, os.version = kindle[1];
	        if (silk) browser.silk = true, browser.version = silk[1];
	        if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	        if (chrome) browser.chrome = true, browser.version = chrome[1];
	        if (firefox) browser.firefox = true, browser.version = firefox[1];
	        if (ie) browser.ie = true, browser.version = ie[1];
	        if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	        if (webview) browser.webview = true;
	        if (ie) browser.ie = true, browser.version = ie[1];
	
	        os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	            (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	        os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 ||
	            (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	            (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));
	
	        return {
	            browser: browser,
	            os: os,
	            // 原生canvas支持，改极端点了
	            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	            canvasSupported : document.createElement('canvas').getContext ? true : false
	        };
	    }
	
	    return detect(navigator.userAgent);
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * ZRender, a high performance canvas library.
	 *  
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 * 
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        /*
	         * HTML5 Canvas for Internet Explorer!
	         * Modern browsers like Firefox, Safari, Chrome and Opera support
	         * the HTML5 canvas tag to allow 2D command-based drawing.
	         * ExplorerCanvas brings the same functionality to Internet Explorer.
	         * To use, web developers only need to include a single script tag
	         * in their existing web pages.
	         *
	         * https://code.google.com/p/explorercanvas/
	         * http://explorercanvas.googlecode.com/svn/trunk/excanvas.js
	         */
	        // 核心代码会生成一个全局变量 G_vmlCanvasManager，模块改造后借用于快速判断canvas支持
	        __webpack_require__(169);
	
	        var util = __webpack_require__(168);
	        var log = __webpack_require__(174);
	        var guid = __webpack_require__(176);
	
	        var Handler = __webpack_require__(177);
	        var Painter = __webpack_require__(180);
	        var Storage = __webpack_require__(191);
	        var Animation = __webpack_require__(193);
	
	        var _instances = {};    // ZRender实例map索引
	
	        /**
	         * @exports zrender
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         *         pissang (https://www.github.com/pissang)
	         */
	        var zrender = {};
	        /**
	         * @type {string}
	         */
	        zrender.version = '2.1.1';
	
	        /**
	         * 创建zrender实例
	         *
	         * @param {HTMLElement} dom 绘图容器
	         * @return {module:zrender/ZRender} ZRender实例
	         */
	        // 不让外部直接new ZRender实例，为啥？
	        // 不为啥，提供全局可控同时减少全局污染和降低命名冲突的风险！
	        zrender.init = function(dom) {
	            var zr = new ZRender(guid(), dom);
	            _instances[zr.id] = zr;
	            return zr;
	        };
	
	        /**
	         * zrender实例销毁
	         * @param {module:zrender/ZRender} zr ZRender对象，不传则销毁全部
	         */
	        // 在_instances里的索引也会删除了
	        // 管生就得管死，可以通过zrender.dispose(zr)销毁指定ZRender实例
	        // 当然也可以直接zr.dispose()自己销毁
	        zrender.dispose = function (zr) {
	            if (zr) {
	                zr.dispose();
	            }
	            else {
	                for (var key in _instances) {
	                    _instances[key].dispose();
	                }
	                _instances = {};
	            }
	
	            return zrender;
	        };
	
	        /**
	         * 获取zrender实例
	         * @param {string} id ZRender对象索引
	         * @return {module:zrender/ZRender}
	         */
	        zrender.getInstance = function (id) {
	            return _instances[id];
	        };
	
	        /**
	         * 删除zrender实例，ZRender实例dispose时会调用，
	         * 删除后getInstance则返回undefined
	         * ps: 仅是删除，删除的实例不代表已经dispose了~~
	         *     这是一个摆脱全局zrender.dispose()自动销毁的后门，
	         *     take care of yourself~
	         *
	         * @param {string} id ZRender对象索引
	         */
	        zrender.delInstance = function (id) {
	            delete _instances[id];
	            return zrender;
	        };
	
	        function getFrameCallback(zrInstance) {
	            return function () {
	                if (zrInstance._needsRefreshNextFrame) {
	                    zrInstance.refresh();
	                }
	            };
	        }
	
	        /**
	         * @module zrender/ZRender
	         */
	        /**
	         * ZRender接口类，对外可用的所有接口都在这里
	         * 非get接口统一返回支持链式调用
	         *
	         * @constructor
	         * @alias module:zrender/ZRender
	         * @param {string} id 唯一标识
	         * @param {HTMLElement} dom dom对象，不帮你做document.getElementById
	         * @return {ZRender} ZRender实例
	         */
	        var ZRender = function(id, dom) {
	            /**
	             * 实例 id
	             * @type {string}
	             */
	            this.id = id;
	            this.env = __webpack_require__(172);
	
	            this.storage = new Storage();
	            this.painter = new Painter(dom, this.storage);
	            this.handler = new Handler(dom, this.storage, this.painter);
	
	            /**
	             * @type {module:zrender/animation/Animation}
	             */
	            this.animation = new Animation({
	                stage: {
	                    update: getFrameCallback(this)
	                }
	            });
	            this.animation.start();
	
	            var self = this;
	            this.painter.refreshNextFrame = function () {
	                self.refreshNextFrame();
	            };
	
	            this._needsRefreshNextFrame = false;
	
	            // 修改 storage.delFromMap, 每次删除元素之前删除动画
	            // FIXME 有点ugly
	            var self = this;
	            var storage = this.storage;
	            var oldDelFromMap = storage.delFromMap;
	            storage.delFromMap = function (elId) {
	                var el = storage.get(elId);
	                self.stopAnimation(el);
	                oldDelFromMap.call(storage, elId);
	            };
	        };
	
	        /**
	         * 获取实例唯一标识
	         * @return {string}
	         */
	        ZRender.prototype.getId = function () {
	            return this.id;
	        };
	
	        /**
	         * 添加图形形状到根节点
	         * @deprecated Use {@link module:zrender/ZRender.prototype.addElement} instead
	         * @param {module:zrender/shape/Base} shape 形状对象，可用属性全集，详见各shape
	         */
	        ZRender.prototype.addShape = function (shape) {
	            this.addElement(shape);
	            return this;
	        };
	
	        /**
	         * 添加组到根节点
	         * @deprecated Use {@link module:zrender/ZRender.prototype.addElement} instead
	         * @param {module:zrender/Group} group
	         */
	        ZRender.prototype.addGroup = function(group) {
	            this.addElement(group);
	            return this;
	        };
	
	        /**
	         * 从根节点删除图形形状
	         * @deprecated Use {@link module:zrender/ZRender.prototype.delElement} instead
	         * @param {string} shapeId 形状对象唯一标识
	         */
	        ZRender.prototype.delShape = function (shapeId) {
	            this.delElement(shapeId);
	            return this;
	        };
	
	        /**
	         * 从根节点删除组
	         * @deprecated Use {@link module:zrender/ZRender.prototype.delElement} instead
	         * @param {string} groupId
	         */
	        ZRender.prototype.delGroup = function (groupId) {
	            this.delElement(groupId);
	            return this;
	        };
	
	        /**
	         * 修改图形形状
	         * @deprecated Use {@link module:zrender/ZRender.prototype.modElement} instead
	         * @param {string} shapeId 形状对象唯一标识
	         * @param {Object} shape 形状对象
	         */
	        ZRender.prototype.modShape = function (shapeId, shape) {
	            this.modElement(shapeId, shape);
	            return this;
	        };
	
	        /**
	         * 修改组
	         * @deprecated Use {@link module:zrender/ZRender.prototype.modElement} instead
	         * @param {string} groupId
	         * @param {Object} group
	         */
	        ZRender.prototype.modGroup = function (groupId, group) {
	            this.modElement(groupId, group);
	            return this;
	        };
	
	        /**
	         * 添加元素
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         */
	        ZRender.prototype.addElement = function (el) {
	            this.storage.addRoot(el);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };
	
	        /**
	         * 删除元素
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         */
	        ZRender.prototype.delElement = function (el) {
	            this.storage.delRoot(el);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };
	
	        /**
	         * 修改元素, 主要标记图形或者组需要在下一帧刷新。
	         * 第二个参数为需要覆盖到元素上的参数，不建议使用。
	         *
	         * @example
	         *     el.style.color = 'red';
	         *     el.position = [10, 10];
	         *     zr.modElement(el);
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         * @param {Object} [params]
	         */
	        ZRender.prototype.modElement = function (el, params) {
	            this.storage.mod(el, params);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };
	
	        /**
	         * 修改指定zlevel的绘制配置项
	         * 
	         * @param {string} zLevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @param {Array.<number>} [config.position] 层的平移
	         * @param {Array.<number>} [config.rotation] 层的旋转
	         * @param {Array.<number>} [config.scale] 层的缩放
	         * @param {boolean} [config.zoomable=false] 层是否支持鼠标缩放操作
	         * @param {boolean} [config.panable=false] 层是否支持鼠标平移操作
	         */
	        ZRender.prototype.modLayer = function (zLevel, config) {
	            this.painter.modLayer(zLevel, config);
	            this._needsRefreshNextFrame = true;
	            return this;
	        };
	
	        /**
	         * 添加额外高亮层显示，仅提供添加方法，每次刷新后高亮层图形均被清空
	         * 
	         * @param {Object} shape 形状对象
	         */
	        ZRender.prototype.addHoverShape = function (shape) {
	            this.storage.addHover(shape);
	            return this;
	        };
	
	        /**
	         * 渲染
	         * 
	         * @param {Function} callback  渲染结束后回调函数
	         */
	        ZRender.prototype.render = function (callback) {
	            this.painter.render(callback);
	            this._needsRefreshNextFrame = false;
	            return this;
	        };
	
	        /**
	         * 视图更新
	         * 
	         * @param {Function} callback  视图更新后回调函数
	         */
	        ZRender.prototype.refresh = function (callback) {
	            this.painter.refresh(callback);
	            this._needsRefreshNextFrame = false;
	            return this;
	        };
	
	        /**
	         * 标记视图在浏览器下一帧需要绘制
	         */
	        ZRender.prototype.refreshNextFrame = function() {
	            this._needsRefreshNextFrame = true;
	            return this;
	        };
	        
	        /**
	         * 绘制高亮层
	         * @param {Function} callback  视图更新后回调函数
	         */
	        ZRender.prototype.refreshHover = function (callback) {
	            this.painter.refreshHover(callback);
	            return this;
	        };
	
	        /**
	         * 视图更新
	         * 
	         * @param {Array.<module:zrender/shape/Base>} shapeList 需要更新的图形列表
	         * @param {Function} callback  视图更新后回调函数
	         */
	        ZRender.prototype.refreshShapes = function (shapeList, callback) {
	            this.painter.refreshShapes(shapeList, callback);
	            return this;
	        };
	
	        /**
	         * 调整视图大小
	         */
	        ZRender.prototype.resize = function() {
	            this.painter.resize();
	            return this;
	        };
	
	        /**
	         * 动画
	         * 
	         * @param {string|module:zrender/Group|module:zrender/shape/Base} el 动画对象
	         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	         * @param {boolean} [loop] 动画是否循环
	         * @return {module:zrender/animation/Animation~Animator}
	         * @example:
	         *     zr.animate(circle.id, 'style', false)
	         *         .when(1000, {x: 10} )
	         *         .done(function(){ // Animation done })
	         *         .start()
	         */
	        ZRender.prototype.animate = function (el, path, loop) {
	            var self = this;
	
	            if (typeof(el) === 'string') {
	                el = this.storage.get(el);
	            }
	            if (el) {
	                var target;
	                if (path) {
	                    var pathSplitted = path.split('.');
	                    var prop = el;
	                    for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                        if (!prop) {
	                            continue;
	                        }
	                        prop = prop[pathSplitted[i]];
	                    }
	                    if (prop) {
	                        target = prop;
	                    }
	                }
	                else {
	                    target = el;
	                }
	
	                if (!target) {
	                    log(
	                        'Property "'
	                        + path
	                        + '" is not existed in element '
	                        + el.id
	                    );
	                    return;
	                }
	
	                if (el.__animators == null) {
	                    // 正在进行的动画记数
	                    el.__animators = [];
	                }
	                var animators = el.__animators;
	
	                var animator = this.animation.animate(target, { loop: loop })
	                    .during(function () {
	                        self.modShape(el);
	                    })
	                    .done(function () {
	                        var idx = util.indexOf(el.__animators, animator);
	                        if (idx >= 0) {
	                            animators.splice(idx, 1);
	                        }
	                    });
	                animators.push(animator);
	
	                return animator;
	            }
	            else {
	                log('Element not existed');
	            }
	        };
	
	        /**
	         * 停止动画对象的动画
	         * @param  {string|module:zrender/Group|module:zrender/shape/Base} el
	         */
	        ZRender.prototype.stopAnimation = function (el) {
	            if (el.__animators) {
	                var animators = el.__animators;
	                var len = animators.length;
	                for (var i = 0; i < len; i++) {
	                    animators[i].stop();
	                }
	                animators.length = 0;
	            }
	            return this;
	        };
	
	        /**
	         * 停止所有动画
	         */
	        ZRender.prototype.clearAnimation = function () {
	            this.animation.clear();
	            return this;
	        };
	
	        /**
	         * loading显示
	         * 
	         * @param {Object=} loadingEffect loading效果对象
	         */
	        ZRender.prototype.showLoading = function (loadingEffect) {
	            this.painter.showLoading(loadingEffect);
	            return this;
	        };
	
	        /**
	         * loading结束
	         */
	        ZRender.prototype.hideLoading = function () {
	            this.painter.hideLoading();
	            return this;
	        };
	
	        /**
	         * 获取视图宽度
	         */
	        ZRender.prototype.getWidth = function() {
	            return this.painter.getWidth();
	        };
	
	        /**
	         * 获取视图高度
	         */
	        ZRender.prototype.getHeight = function() {
	            return this.painter.getHeight();
	        };
	
	        /**
	         * 图像导出
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff'] 背景色
	         * @return {string} 图片的Base64 url
	         */
	        ZRender.prototype.toDataURL = function(type, backgroundColor, args) {
	            return this.painter.toDataURL(type, backgroundColor, args);
	        };
	
	        /**
	         * 将常规shape转成image shape
	         * @param {module:zrender/shape/Base} e
	         * @param {number} width
	         * @param {number} height
	         */
	        ZRender.prototype.shapeToImage = function(e, width, height) {
	            var id = guid();
	            return this.painter.shapeToImage(id, e, width, height);
	        };
	
	        /**
	         * 事件绑定
	         * 
	         * @param {string} eventName 事件名称
	         * @param {Function} eventHandler 响应函数
	         * @param {Object} [context] 响应函数
	         */
	        ZRender.prototype.on = function(eventName, eventHandler, context) {
	            this.handler.on(eventName, eventHandler, context);
	            return this;
	        };
	
	        /**
	         * 事件解绑定，参数为空则解绑所有自定义事件
	         * 
	         * @param {string} eventName 事件名称
	         * @param {Function} eventHandler 响应函数
	         */
	        ZRender.prototype.un = function(eventName, eventHandler) {
	            this.handler.un(eventName, eventHandler);
	            return this;
	        };
	        
	        /**
	         * 事件触发
	         * 
	         * @param {string} eventName 事件名称，resize，hover，drag，etc
	         * @param {event=} event event dom事件对象
	         */
	        ZRender.prototype.trigger = function (eventName, event) {
	            this.handler.trigger(eventName, event);
	            return this;
	        };
	        
	
	        /**
	         * 清除当前ZRender下所有类图的数据和显示，clear后MVC和已绑定事件均还存在在，ZRender可用
	         */
	        ZRender.prototype.clear = function () {
	            this.storage.delRoot();
	            this.painter.clear();
	            return this;
	        };
	
	        /**
	         * 释放当前ZR实例（删除包括dom，数据、显示和事件绑定），dispose后ZR不可用
	         */
	        ZRender.prototype.dispose = function () {
	            this.animation.stop();
	            
	            this.clear();
	            this.storage.dispose();
	            this.painter.dispose();
	            this.handler.dispose();
	
	            this.animation = 
	            this.storage = 
	            this.painter = 
	            this.handler = null;
	
	            // 释放后告诉全局删除对自己的索引，没想到啥好方法
	            zrender.delInstance(this.id);
	        };
	
	        return zrender;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var config = __webpack_require__(175);
	
	        /**
	         * @exports zrender/tool/log
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         */
	        return function() {
	            if (config.debugMode === 0) {
	                return;
	            }
	            else if (config.debugMode == 1) {
	                for (var k in arguments) {
	                    throw new Error(arguments[k]);
	                }
	            }
	            else if (config.debugMode > 1) {
	                for (var k in arguments) {
	                    console.log(arguments[k]);
	                }
	            }
	        };
	
	        /* for debug
	        return function(mes) {
	            document.getElementById('wrong-message').innerHTML =
	                mes + ' ' + (new Date() - 0)
	                + '<br/>' 
	                + document.getElementById('wrong-message').innerHTML;
	        };
	        */
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    /**
	     * config默认配置项
	     * @exports zrender/config
	     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	     */
	    var config = {
	        /**
	         * @namespace module:zrender/config.EVENT
	         */
	        EVENT : {
	            /**
	             * 窗口大小变化
	             * @type {string}
	             */
	            RESIZE : 'resize',
	            /**
	             * 鼠标按钮被（手指）按下，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            CLICK : 'click',
	            /**
	             * 双击事件
	             * @type {string}
	             */
	            DBLCLICK : 'dblclick',
	            /**
	             * 鼠标滚轮变化，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEWHEEL : 'mousewheel',
	            /**
	             * 鼠标（手指）被移动，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEMOVE : 'mousemove',
	            /**
	             * 鼠标移到某图形元素之上，事件对象是：目标图形元素
	             * @type {string}
	             */
	            MOUSEOVER : 'mouseover',
	            /**
	             * 鼠标从某图形元素移开，事件对象是：目标图形元素
	             * @type {string}
	             */
	            MOUSEOUT : 'mouseout',
	            /**
	             * 鼠标按钮（手指）被按下，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEDOWN : 'mousedown',
	            /**
	             * 鼠标按键（手指）被松开，事件对象是：目标图形元素或空
	             * @type {string}
	             */
	            MOUSEUP : 'mouseup',
	            /**
	             * 全局离开，MOUSEOUT触发比较频繁，一次离开优化绑定
	             * @type {string}
	             */
	            GLOBALOUT : 'globalout',    // 
	
	            // 一次成功元素拖拽的行为事件过程是：
	            // dragstart > dragenter > dragover [> dragleave] > drop > dragend
	            /**
	             * 开始拖拽时触发，事件对象是：被拖拽图形元素
	             * @type {string}
	             */
	            DRAGSTART : 'dragstart',
	            /**
	             * 拖拽完毕时触发（在drop之后触发），事件对象是：被拖拽图形元素
	             * @type {string}
	             */
	            DRAGEND : 'dragend',
	            /**
	             * 拖拽图形元素进入目标图形元素时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DRAGENTER : 'dragenter',
	            /**
	             * 拖拽图形元素在目标图形元素上移动时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DRAGOVER : 'dragover',
	            /**
	             * 拖拽图形元素离开目标图形元素时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DRAGLEAVE : 'dragleave',
	            /**
	             * 拖拽图形元素放在目标图形元素内时触发，事件对象是：目标图形元素
	             * @type {string}
	             */
	            DROP : 'drop',
	            /**
	             * touch end - start < delay is click
	             * @type {number}
	             */
	            touchClickDelay : 300
	        },
	
	        elementClassName: 'zr-element',
	
	        // 是否异常捕获
	        catchBrushException: false,
	
	        /**
	         * debug日志选项：catchBrushException为true下有效
	         * 0 : 不生成debug数据，发布用
	         * 1 : 异常抛出，调试用
	         * 2 : 控制台输出，调试用
	         */
	        debugMode: 0,
	
	        // retina 屏幕优化
	        devicePixelRatio: Math.max(window.devicePixelRatio || 1, 1)
	    };
	    return config;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        var idStart = 0x0907;
	
	        return function () {
	            return 'zrender__' + (idStart++);
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Handler控制模块
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *
	 */
	// TODO mouseover 只触发一次
	// 目前的高亮因为每次都需要 addHover 所以不能只是开始的时候触发一次
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	        'use strict';
	
	        var config = __webpack_require__(175);
	        var env = __webpack_require__(172);
	        var eventTool = __webpack_require__(170);
	        var util = __webpack_require__(168);
	        var vec2 = __webpack_require__(178);
	        var mat2d = __webpack_require__(179);
	        var EVENT = config.EVENT;
	
	        var Eventful = __webpack_require__(171);
	
	        var domHandlerNames = [
	            'resize', 'click', 'dblclick',
	            'mousewheel', 'mousemove', 'mouseout', 'mouseup', 'mousedown',
	            'touchstart', 'touchend', 'touchmove'
	        ];
	
	        var isZRenderElement = function (event) {
	            // 暂时忽略 IE8-
	            if (window.G_vmlCanvasManager) {
	                return true;
	            }
	
	            event = event || window.event;
	
	            // 进入对象优先~
	            var target = event.toElement
	                          || event.relatedTarget
	                          || event.srcElement
	                          || event.target;
	
	            return target && target.className.match(config.elementClassName)
	        };
	
	        var domHandlers = {
	            /**
	             * 窗口大小改变响应函数
	             * @inner
	             * @param {Event} event
	             */
	            resize: function (event) {
	                event = event || window.event;
	                this._lastHover = null;
	                this._isMouseDown = 0;
	                
	                // 分发config.EVENT.RESIZE事件，global
	                this.dispatch(EVENT.RESIZE, event);
	            },
	
	            /**
	             * 点击响应函数
	             * @inner
	             * @param {Event} event
	             */
	            click: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                event = this._zrenderEventFixed(event);
	
	                // 分发config.EVENT.CLICK事件
	                var _lastHover = this._lastHover;
	                if ((_lastHover && _lastHover.clickable)
	                    || !_lastHover
	                ) {
	
	                    // 判断没有发生拖拽才触发click事件
	                    if (this._clickThreshold < 5) {
	                        this._dispatchAgency(_lastHover, EVENT.CLICK, event);
	                    }
	                }
	
	                this._mousemoveHandler(event);
	            },
	            
	            /**
	             * 双击响应函数
	             * @inner
	             * @param {Event} event
	             */
	            dblclick: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                event = event || window.event;
	                event = this._zrenderEventFixed(event);
	
	                // 分发config.EVENT.DBLCLICK事件
	                var _lastHover = this._lastHover;
	                if ((_lastHover && _lastHover.clickable)
	                    || !_lastHover
	                ) {
	
	                    // 判断没有发生拖拽才触发dblclick事件
	                    if (this._clickThreshold < 5) {
	                        this._dispatchAgency(_lastHover, EVENT.DBLCLICK, event);
	                    }
	                }
	
	                this._mousemoveHandler(event);
	            },
	            
	
	            /**
	             * 鼠标滚轮响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mousewheel: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                event = this._zrenderEventFixed(event);
	
	                // http://www.sitepoint.com/html5-javascript-mouse-wheel/
	                // https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference/mousewheel
	                var delta = event.wheelDelta // Webkit
	                            || -event.detail; // Firefox
	                var scale = delta > 0 ? 1.1 : 1 / 1.1;
	
	                var needsRefresh = false;
	
	                var mouseX = this._mouseX;
	                var mouseY = this._mouseY;
	                this.painter.eachBuildinLayer(function (layer) {
	                    var pos = layer.position;
	                    if (layer.zoomable) {
	                        layer.__zoom = layer.__zoom || 1;
	                        var newZoom = layer.__zoom;
	                        newZoom *= scale;
	                        newZoom = Math.max(
	                            Math.min(layer.maxZoom, newZoom),
	                            layer.minZoom
	                        );
	                        scale = newZoom / layer.__zoom;
	                        layer.__zoom = newZoom;
	                        // Keep the mouse center when scaling
	                        pos[0] -= (mouseX - pos[0]) * (scale - 1);
	                        pos[1] -= (mouseY - pos[1]) * (scale - 1);
	                        layer.scale[0] *= scale;
	                        layer.scale[1] *= scale;
	                        layer.dirty = true;
	                        needsRefresh = true;
	
	                        // Prevent browser default scroll action 
	                        eventTool.stop(event);
	                    }
	                });
	                if (needsRefresh) {
	                    this.painter.refresh();
	                }
	
	                // 分发config.EVENT.MOUSEWHEEL事件
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEWHEEL, event);
	                this._mousemoveHandler(event);
	            },
	
	            /**
	             * 鼠标（手指）移动响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mousemove: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                if (this.painter.isLoading()) {
	                    return;
	                }
	
	                event = this._zrenderEventFixed(event);
	                this._lastX = this._mouseX;
	                this._lastY = this._mouseY;
	                this._mouseX = eventTool.getX(event);
	                this._mouseY = eventTool.getY(event);
	                var dx = this._mouseX - this._lastX;
	                var dy = this._mouseY - this._lastY;
	
	                // 可能出现config.EVENT.DRAGSTART事件
	                // 避免手抖点击误认为拖拽
	                // if (this._mouseX - this._lastX > 1 || this._mouseY - this._lastY > 1) {
	                this._processDragStart(event);
	                // }
	                this._hasfound = 0;
	                this._event = event;
	
	                this._iterateAndFindHover();
	
	                // 找到的在迭代函数里做了处理，没找到得在迭代完后处理
	                if (!this._hasfound) {
	                    // 过滤首次拖拽产生的mouseout和dragLeave
	                    if (!this._draggingTarget
	                        || (this._lastHover && this._lastHover != this._draggingTarget)
	                    ) {
	                        // 可能出现config.EVENT.MOUSEOUT事件
	                        this._processOutShape(event);
	
	                        // 可能出现config.EVENT.DRAGLEAVE事件
	                        this._processDragLeave(event);
	                    }
	
	                    this._lastHover = null;
	                    this.storage.delHover();
	                    this.painter.clearHover();
	                }
	
	                // set cursor for root element
	                var cursor = 'default';
	
	                // 如果存在拖拽中元素，被拖拽的图形元素最后addHover
	                if (this._draggingTarget) {
	                    this.storage.drift(this._draggingTarget.id, dx, dy);
	                    this._draggingTarget.modSelf();
	                    this.storage.addHover(this._draggingTarget);
	
	                    // 拖拽不触发click事件
	                    this._clickThreshold++;
	                }
	                else if (this._isMouseDown) {
	                    var needsRefresh = false;
	                    // Layer dragging
	                    this.painter.eachBuildinLayer(function (layer) {
	                        if (layer.panable) {
	                            // PENDING
	                            cursor = 'move';
	                            // Keep the mouse center when scaling
	                            layer.position[0] += dx;
	                            layer.position[1] += dy;
	                            needsRefresh = true;
	                            layer.dirty = true;
	                        }
	                    });
	                    if (needsRefresh) {
	                        this.painter.refresh();
	                    }
	                }
	
	                if (this._draggingTarget || (this._hasfound && this._lastHover.draggable)) {
	                    cursor = 'move';
	                }
	                else if (this._hasfound && this._lastHover.clickable) {
	                    cursor = 'pointer';
	                }
	                this.root.style.cursor = cursor;
	
	                // 分发config.EVENT.MOUSEMOVE事件
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEMOVE, event);
	
	                if (this._draggingTarget || this._hasfound || this.storage.hasHoverShape()) {
	                    this.painter.refreshHover();
	                }
	            },
	
	            /**
	             * 鼠标（手指）离开响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mouseout: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                event = this._zrenderEventFixed(event);
	
	                var element = event.toElement || event.relatedTarget;
	                if (element != this.root) {
	                    while (element && element.nodeType != 9) {
	                        // 忽略包含在root中的dom引起的mouseOut
	                        if (element == this.root) {
	                            this._mousemoveHandler(event);
	                            return;
	                        }
	
	                        element = element.parentNode;
	                    }
	                }
	
	                event.zrenderX = this._lastX;
	                event.zrenderY = this._lastY;
	                this.root.style.cursor = 'default';
	                this._isMouseDown = 0;
	
	                this._processOutShape(event);
	                this._processDrop(event);
	                this._processDragEnd(event);
	                if (!this.painter.isLoading()) {
	                    this.painter.refreshHover();
	                }
	                
	                this.dispatch(EVENT.GLOBALOUT, event);
	            },
	
	            /**
	             * 鼠标（手指）按下响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mousedown: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                // 重置 clickThreshold
	                this._clickThreshold = 0;
	
	                if (this._lastDownButton == 2) {
	                    this._lastDownButton = event.button;
	                    this._mouseDownTarget = null;
	                    // 仅作为关闭右键菜单使用
	                    return;
	                }
	
	                this._lastMouseDownMoment = new Date();
	                event = this._zrenderEventFixed(event);
	                this._isMouseDown = 1;
	
	                // 分发config.EVENT.MOUSEDOWN事件
	                this._mouseDownTarget = this._lastHover;
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEDOWN, event);
	                this._lastDownButton = event.button;
	            },
	
	            /**
	             * 鼠标（手指）抬起响应函数
	             * @inner
	             * @param {Event} event
	             */
	            mouseup: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                event = this._zrenderEventFixed(event);
	                this.root.style.cursor = 'default';
	                this._isMouseDown = 0;
	                this._mouseDownTarget = null;
	
	                // 分发config.EVENT.MOUSEUP事件
	                this._dispatchAgency(this._lastHover, EVENT.MOUSEUP, event);
	                this._processDrop(event);
	                this._processDragEnd(event);
	            },
	
	            /**
	             * Touch开始响应函数
	             * @inner
	             * @param {Event} event
	             */
	            touchstart: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                // eventTool.stop(event);// 阻止浏览器默认事件，重要
	                event = this._zrenderEventFixed(event, true);
	                this._lastTouchMoment = new Date();
	
	                // 平板补充一次findHover
	                this._mobileFindFixed(event);
	                this._mousedownHandler(event);
	            },
	
	            /**
	             * Touch移动响应函数
	             * @inner
	             * @param {Event} event
	             */
	            touchmove: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                event = this._zrenderEventFixed(event, true);
	                this._mousemoveHandler(event);
	                if (this._isDragging) {
	                    eventTool.stop(event);// 阻止浏览器默认事件，重要
	                }
	            },
	
	            /**
	             * Touch结束响应函数
	             * @inner
	             * @param {Event} event
	             */
	            touchend: function (event, manually) {
	                if (! isZRenderElement(event) && ! manually) {
	                    return;
	                }
	
	                // eventTool.stop(event);// 阻止浏览器默认事件，重要
	                event = this._zrenderEventFixed(event, true);
	                this._mouseupHandler(event);
	                
	                var now = new Date();
	                if (now - this._lastTouchMoment < EVENT.touchClickDelay) {
	                    this._mobileFindFixed(event);
	                    this._clickHandler(event);
	                    if (now - this._lastClickMoment < EVENT.touchClickDelay / 2) {
	                        this._dblclickHandler(event);
	                        if (this._lastHover && this._lastHover.clickable) {
	                            eventTool.stop(event);// 阻止浏览器默认事件，重要
	                        }
	                    }
	                    this._lastClickMoment = now;
	                }
	                this.painter.clearHover();
	            }
	        };
	
	        /**
	         * bind一个参数的function
	         * 
	         * @inner
	         * @param {Function} handler 要bind的function
	         * @param {Object} context 运行时this环境
	         * @return {Function}
	         */
	        // function bind1Arg(handler, context) {
	        //     return function (e) {
	        //         return handler.call(context, e);
	        //     };
	        // }
	        function bind2Arg(handler, context) {
	            return function (arg1, arg2) {
	                return handler.call(context, arg1, arg2);
	            };
	        }
	
	        function bind3Arg(handler, context) {
	            return function (arg1, arg2, arg3) {
	                return handler.call(context, arg1, arg2, arg3);
	            };
	        }
	        /**
	         * 为控制类实例初始化dom 事件处理函数
	         * 
	         * @inner
	         * @param {module:zrender/Handler} instance 控制类实例
	         */
	        function initDomHandler(instance) {
	            var len = domHandlerNames.length;
	            while (len--) {
	                var name = domHandlerNames[len];
	                instance['_' + name + 'Handler'] = bind2Arg(domHandlers[name], instance);
	            }
	        }
	
	        /**
	         * @alias module:zrender/Handler
	         * @constructor
	         * @extends module:zrender/mixin/Eventful
	         * @param {HTMLElement} root 绘图区域
	         * @param {module:zrender/Storage} storage Storage实例
	         * @param {module:zrender/Painter} painter Painter实例
	         */
	        var Handler = function(root, storage, painter) {
	            // 添加事件分发器特性
	            Eventful.call(this);
	
	            this.root = root;
	            this.storage = storage;
	            this.painter = painter;
	
	            // 各种事件标识的私有变量
	            // this._hasfound = false;              //是否找到hover图形元素
	            // this._lastHover = null;              //最后一个hover图形元素
	            // this._mouseDownTarget = null;
	            // this._draggingTarget = null;         //当前被拖拽的图形元素
	            // this._isMouseDown = false;
	            // this._isDragging = false;
	            // this._lastMouseDownMoment;
	            // this._lastTouchMoment;
	            // this._lastDownButton;
	
	            this._lastX = 
	            this._lastY = 
	            this._mouseX = 
	            this._mouseY = 0;
	
	            this._findHover = bind3Arg(findHover, this);
	            this._domHover = painter.getDomHover();
	            initDomHandler(this);
	
	            // 初始化，事件绑定，支持的所有事件都由如下原生事件计算得来
	            if (window.addEventListener) {
	                window.addEventListener('resize', this._resizeHandler);
	                
	                if (env.os.tablet || env.os.phone) {
	                    // mobile支持
	                    root.addEventListener('touchstart', this._touchstartHandler);
	                    root.addEventListener('touchmove', this._touchmoveHandler);
	                    root.addEventListener('touchend', this._touchendHandler);
	                }
	                else {
	                    // mobile的click/move/up/down自己模拟
	                    root.addEventListener('click', this._clickHandler);
	                    root.addEventListener('dblclick', this._dblclickHandler);
	                    root.addEventListener('mousewheel', this._mousewheelHandler);
	                    root.addEventListener('mousemove', this._mousemoveHandler);
	                    root.addEventListener('mousedown', this._mousedownHandler);
	                    root.addEventListener('mouseup', this._mouseupHandler);
	                } 
	                root.addEventListener('DOMMouseScroll', this._mousewheelHandler);
	                root.addEventListener('mouseout', this._mouseoutHandler);
	            }
	            else {
	                window.attachEvent('onresize', this._resizeHandler);
	
	                root.attachEvent('onclick', this._clickHandler);
	                //root.attachEvent('ondblclick ', this._dblclickHandler);
	                root.ondblclick = this._dblclickHandler;
	                root.attachEvent('onmousewheel', this._mousewheelHandler);
	                root.attachEvent('onmousemove', this._mousemoveHandler);
	                root.attachEvent('onmouseout', this._mouseoutHandler);
	                root.attachEvent('onmousedown', this._mousedownHandler);
	                root.attachEvent('onmouseup', this._mouseupHandler);
	            }
	        };
	
	        /**
	         * 自定义事件绑定
	         * @param {string} eventName 事件名称，resize，hover，drag，etc~
	         * @param {Function} handler 响应函数
	         * @param {Object} [context] 响应函数
	         */
	        Handler.prototype.on = function (eventName, handler, context) {
	            this.bind(eventName, handler, context);
	            return this;
	        };
	
	        /**
	         * 自定义事件解绑
	         * @param {string} eventName 事件名称，resize，hover，drag，etc~
	         * @param {Function} handler 响应函数
	         */
	        Handler.prototype.un = function (eventName, handler) {
	            this.unbind(eventName, handler);
	            return this;
	        };
	
	        /**
	         * 事件触发
	         * @param {string} eventName 事件名称，resize，hover，drag，etc~
	         * @param {event=} eventArgs event dom事件对象
	         */
	        Handler.prototype.trigger = function (eventName, eventArgs) {
	            switch (eventName) {
	                case EVENT.RESIZE:
	                case EVENT.CLICK:
	                case EVENT.DBLCLICK:
	                case EVENT.MOUSEWHEEL:
	                case EVENT.MOUSEMOVE:
	                case EVENT.MOUSEDOWN:
	                case EVENT.MOUSEUP:
	                case EVENT.MOUSEOUT:
	                    this['_' + eventName + 'Handler'](eventArgs, true);
	                    break;
	            }
	        };
	
	        /**
	         * 释放，解绑所有事件
	         */
	        Handler.prototype.dispose = function () {
	            var root = this.root;
	
	            if (window.removeEventListener) {
	                window.removeEventListener('resize', this._resizeHandler);
	
	                if (env.os.tablet || env.os.phone) {
	                    // mobile支持
	                    root.removeEventListener('touchstart', this._touchstartHandler);
	                    root.removeEventListener('touchmove', this._touchmoveHandler);
	                    root.removeEventListener('touchend', this._touchendHandler);
	                }
	                else {
	                    // mobile的click自己模拟
	                    root.removeEventListener('click', this._clickHandler);
	                    root.removeEventListener('dblclick', this._dblclickHandler);
	                    root.removeEventListener('mousewheel', this._mousewheelHandler);
	                    root.removeEventListener('mousemove', this._mousemoveHandler);
	                    root.removeEventListener('mousedown', this._mousedownHandler);
	                    root.removeEventListener('mouseup', this._mouseupHandler);
	                }
	                root.removeEventListener('DOMMouseScroll', this._mousewheelHandler);
	                root.removeEventListener('mouseout', this._mouseoutHandler);
	            }
	            else {
	                window.detachEvent('onresize', this._resizeHandler);
	
	                root.detachEvent('onclick', this._clickHandler);
	                root.detachEvent('dblclick', this._dblclickHandler);
	                root.detachEvent('onmousewheel', this._mousewheelHandler);
	                root.detachEvent('onmousemove', this._mousemoveHandler);
	                root.detachEvent('onmouseout', this._mouseoutHandler);
	                root.detachEvent('onmousedown', this._mousedownHandler);
	                root.detachEvent('onmouseup', this._mouseupHandler);
	            }
	
	            this.root =
	            this._domHover =
	            this.storage =
	            this.painter = null;
	            
	            this.un();
	        };
	
	        /**
	         * 拖拽开始
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragStart = function (event) {
	            var _lastHover = this._lastHover;
	
	            if (this._isMouseDown
	                && _lastHover
	                && _lastHover.draggable
	                && !this._draggingTarget
	                && this._mouseDownTarget == _lastHover
	            ) {
	                // 拖拽点击生效时长阀门，某些场景需要降低拖拽敏感度
	                if (_lastHover.dragEnableTime && 
	                    new Date() - this._lastMouseDownMoment < _lastHover.dragEnableTime
	                ) {
	                    return;
	                }
	
	                var _draggingTarget = _lastHover;
	                this._draggingTarget = _draggingTarget;
	                this._isDragging = 1;
	
	                _draggingTarget.invisible = true;
	                this.storage.mod(_draggingTarget.id);
	
	                // 分发config.EVENT.DRAGSTART事件
	                this._dispatchAgency(
	                    _draggingTarget,
	                    EVENT.DRAGSTART,
	                    event
	                );
	                this.painter.refresh();
	            }
	        };
	
	        /**
	         * 拖拽进入目标元素
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragEnter = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGENTER事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DRAGENTER,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };
	
	        /**
	         * 拖拽在目标元素上移动
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragOver = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGOVER事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DRAGOVER,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };
	
	        /**
	         * 拖拽离开目标元素
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragLeave = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGLEAVE事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DRAGLEAVE,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };
	
	        /**
	         * 拖拽在目标元素上完成
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDrop = function (event) {
	            if (this._draggingTarget) {
	                this._draggingTarget.invisible = false;
	                this.storage.mod(this._draggingTarget.id);
	                this.painter.refresh();
	
	                // 分发config.EVENT.DROP事件
	                this._dispatchAgency(
	                    this._lastHover,
	                    EVENT.DROP,
	                    event,
	                    this._draggingTarget
	                );
	            }
	        };
	
	        /**
	         * 拖拽结束
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processDragEnd = function (event) {
	            if (this._draggingTarget) {
	                // 分发config.EVENT.DRAGEND事件
	                this._dispatchAgency(
	                    this._draggingTarget,
	                    EVENT.DRAGEND,
	                    event
	                );
	
	                this._lastHover = null;
	            }
	
	            this._isDragging = 0;
	            this._draggingTarget = null;
	        };
	
	        /**
	         * 鼠标在某个图形元素上移动
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processOverShape = function (event) {
	            // 分发config.EVENT.MOUSEOVER事件
	            this._dispatchAgency(this._lastHover, EVENT.MOUSEOVER, event);
	        };
	
	        /**
	         * 鼠标离开某个图形元素
	         * 
	         * @private
	         * @param {Object} event 事件对象
	         */
	        Handler.prototype._processOutShape = function (event) {
	            // 分发config.EVENT.MOUSEOUT事件
	            this._dispatchAgency(this._lastHover, EVENT.MOUSEOUT, event);
	        };
	
	        /**
	         * 事件分发代理
	         * 
	         * @private
	         * @param {Object} targetShape 目标图形元素
	         * @param {string} eventName 事件名称
	         * @param {Object} event 事件对象
	         * @param {Object=} draggedShape 拖拽事件特有，当前被拖拽图形元素
	         */
	        Handler.prototype._dispatchAgency = function (targetShape, eventName, event, draggedShape) {
	            var eventHandler = 'on' + eventName;
	            var eventPacket = {
	                type : eventName,
	                event : event,
	                target : targetShape,
	                cancelBubble: false
	            };
	
	            var el = targetShape;
	
	            if (draggedShape) {
	                eventPacket.dragged = draggedShape;
	            }
	
	            while (el) {
	                el[eventHandler] 
	                && (eventPacket.cancelBubble = el[eventHandler](eventPacket));
	                el.dispatch(eventName, eventPacket);
	
	                el = el.parent;
	                
	                if (eventPacket.cancelBubble) {
	                    break;
	                }
	            }
	
	            if (targetShape) {
	                // 冒泡到顶级 zrender 对象
	                if (!eventPacket.cancelBubble) {
	                    this.dispatch(eventName, eventPacket);
	                }
	            }
	            else if (!draggedShape) {
	                // 无hover目标，无拖拽对象，原生事件分发
	                var eveObj = {
	                    type: eventName,
	                    event: event
	                };
	                this.dispatch(eventName, eveObj);
	                // 分发事件到用户自定义层
	                this.painter.eachOtherLayer(function (layer) {
	                    if (typeof(layer[eventHandler]) == 'function') {
	                        layer[eventHandler](eveObj);
	                    }
	                    if (layer.dispatch) {
	                        layer.dispatch(eventName, eveObj);
	                    }
	                });
	            }
	        };
	
	        /**
	         * 迭代寻找hover shape
	         * @private
	         * @method
	         */
	        Handler.prototype._iterateAndFindHover = (function() {
	            var invTransform = mat2d.create();
	            return function() {
	                var list = this.storage.getShapeList();
	                var currentZLevel;
	                var currentLayer;
	                var tmp = [ 0, 0 ];
	                for (var i = list.length - 1; i >= 0 ; i--) {
	                    var shape = list[i];
	
	                    if (currentZLevel !== shape.zlevel) {
	                        currentLayer = this.painter.getLayer(shape.zlevel, currentLayer);
	                        tmp[0] = this._mouseX;
	                        tmp[1] = this._mouseY;
	
	                        if (currentLayer.needTransform) {
	                            mat2d.invert(invTransform, currentLayer.transform);
	                            vec2.applyTransform(tmp, tmp, invTransform);
	                        }
	                    }
	
	                    if (this._findHover(shape, tmp[0], tmp[1])) {
	                        break;
	                    }
	                }
	            };
	        })();
	        
	        // touch指尖错觉的尝试偏移量配置
	        var MOBILE_TOUCH_OFFSETS = [
	            { x: 10 },
	            { x: -20 },
	            { x: 10, y: 10 },
	            { y: -20 }
	        ];
	
	        // touch有指尖错觉，四向尝试，让touch上的点击更好触发事件
	        Handler.prototype._mobileFindFixed = function (event) {
	            this._lastHover = null;
	            this._mouseX = event.zrenderX;
	            this._mouseY = event.zrenderY;
	
	            this._event = event;
	
	            this._iterateAndFindHover();
	            for (var i = 0; !this._lastHover && i < MOBILE_TOUCH_OFFSETS.length ; i++) {
	                var offset = MOBILE_TOUCH_OFFSETS[ i ];
	                offset.x && (this._mouseX += offset.x);
	                offset.y && (this._mouseY += offset.y);
	
	                this._iterateAndFindHover();
	            }
	
	            if (this._lastHover) {
	                event.zrenderX = this._mouseX;
	                event.zrenderY = this._mouseY;
	            }
	        };
	
	        /**
	         * 迭代函数，查找hover到的图形元素并即时做些事件分发
	         * 
	         * @inner
	         * @param {Object} shape 图形元素
	         * @param {number} x
	         * @param {number} y
	         */
	        function findHover(shape, x, y) {
	            if (
	                (this._draggingTarget && this._draggingTarget.id == shape.id) // 迭代到当前拖拽的图形上
	                || shape.isSilent() // 打酱油的路过，啥都不响应的shape~
	            ) {
	                return false;
	            }
	
	            var event = this._event;
	            if (shape.isCover(x, y)) {
	                if (shape.hoverable) {
	                    this.storage.addHover(shape);
	                }
	                // 查找是否在 clipShape 中
	                var p = shape.parent;
	                while (p) {
	                    if (p.clipShape && !p.clipShape.isCover(this._mouseX, this._mouseY))  {
	                        // 已经被祖先 clip 掉了
	                        return false;
	                    }
	                    p = p.parent;
	                }
	
	                if (this._lastHover != shape) {
	                    this._processOutShape(event);
	
	                    // 可能出现config.EVENT.DRAGLEAVE事件
	                    this._processDragLeave(event);
	
	                    this._lastHover = shape;
	
	                    // 可能出现config.EVENT.DRAGENTER事件
	                    this._processDragEnter(event);
	                }
	
	                this._processOverShape(event);
	
	                // 可能出现config.EVENT.DRAGOVER
	                this._processDragOver(event);
	
	                this._hasfound = 1;
	
	                return true;    // 找到则中断迭代查找
	            }
	
	            return false;
	        }
	
	        /**
	         * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标
	         * 
	         * @private
	         */
	        Handler.prototype._zrenderEventFixed = function (event, isTouch) {
	            if (event.zrenderFixed) {
	                return event;
	            }
	
	            if (!isTouch) {
	                event = event || window.event;
	                // 进入对象优先~
	                var target = event.toElement
	                              || event.relatedTarget
	                              || event.srcElement
	                              || event.target;
	
	                if (target && target != this._domHover) {
	                    event.zrenderX = (typeof event.offsetX != 'undefined'
	                                        ? event.offsetX
	                                        : event.layerX)
	                                      + target.offsetLeft;
	                    event.zrenderY = (typeof event.offsetY != 'undefined'
	                                        ? event.offsetY
	                                        : event.layerY)
	                                      + target.offsetTop;
	                }
	            }
	            else {
	                var touch = event.type != 'touchend'
	                                ? event.targetTouches[0]
	                                : event.changedTouches[0];
	                if (touch) {
	                    var rBounding = this.painter._domRoot.getBoundingClientRect();
	                    // touch事件坐标是全屏的~
	                    event.zrenderX = touch.clientX - rBounding.left;
	                    event.zrenderY = touch.clientY - rBounding.top;
	                }
	            }
	
	            event.zrenderFixed = 1;
	            return event;
	        };
	
	        util.merge(Handler.prototype, Eventful.prototype, true);
	
	        return Handler;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	        var ArrayCtor = typeof Float32Array === 'undefined'
	            ? Array
	            : Float32Array;
	
	        /**
	         * @typedef {Float32Array|Array.<number>} Vector2
	         */
	        /**
	         * 二维向量类
	         * @exports zrender/tool/vector
	         */
	        var vector = {
	            /**
	             * 创建一个向量
	             * @param {number} [x=0]
	             * @param {number} [y=0]
	             * @return {Vector2}
	             */
	            create: function (x, y) {
	                var out = new ArrayCtor(2);
	                out[0] = x || 0;
	                out[1] = y || 0;
	                return out;
	            },
	
	            /**
	             * 复制向量数据
	             * @param {Vector2} out
	             * @param {Vector2} v
	             * @return {Vector2}
	             */
	            copy: function (out, v) {
	                out[0] = v[0];
	                out[1] = v[1];
	                return out;
	            },
	
	            /**
	             * 克隆一个向量
	             * @param {Vector2} v
	             * @return {Vector2}
	             */
	            clone: function (v) {
	                var out = new ArrayCtor(2);
	                out[0] = v[0];
	                out[1] = v[1];
	                return out;
	            },
	
	            /**
	             * 设置向量的两个项
	             * @param {Vector2} out
	             * @param {number} a
	             * @param {number} b
	             * @return {Vector2} 结果
	             */
	            set: function (out, a, b) {
	                out[0] = a;
	                out[1] = b;
	                return out;
	            },
	
	            /**
	             * 向量相加
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            add: function (out, v1, v2) {
	                out[0] = v1[0] + v2[0];
	                out[1] = v1[1] + v2[1];
	                return out;
	            },
	
	            /**
	             * 向量缩放后相加
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @param {number} a
	             */
	            scaleAndAdd: function (out, v1, v2, a) {
	                out[0] = v1[0] + v2[0] * a;
	                out[1] = v1[1] + v2[1] * a;
	                return out;
	            },
	
	            /**
	             * 向量相减
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            sub: function (out, v1, v2) {
	                out[0] = v1[0] - v2[0];
	                out[1] = v1[1] - v2[1];
	                return out;
	            },
	
	            /**
	             * 向量长度
	             * @param {Vector2} v
	             * @return {number}
	             */
	            len: function (v) {
	                return Math.sqrt(this.lenSquare(v));
	            },
	
	            /**
	             * 向量长度平方
	             * @param {Vector2} v
	             * @return {number}
	             */
	            lenSquare: function (v) {
	                return v[0] * v[0] + v[1] * v[1];
	            },
	
	            /**
	             * 向量乘法
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            mul: function (out, v1, v2) {
	                out[0] = v1[0] * v2[0];
	                out[1] = v1[1] * v2[1];
	                return out;
	            },
	
	            /**
	             * 向量除法
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             */
	            div: function (out, v1, v2) {
	                out[0] = v1[0] / v2[0];
	                out[1] = v1[1] / v2[1];
	                return out;
	            },
	
	            /**
	             * 向量点乘
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @return {number}
	             */
	            dot: function (v1, v2) {
	                return v1[0] * v2[0] + v1[1] * v2[1];
	            },
	
	            /**
	             * 向量缩放
	             * @param {Vector2} out
	             * @param {Vector2} v
	             * @param {number} s
	             */
	            scale: function (out, v, s) {
	                out[0] = v[0] * s;
	                out[1] = v[1] * s;
	                return out;
	            },
	
	            /**
	             * 向量归一化
	             * @param {Vector2} out
	             * @param {Vector2} v
	             */
	            normalize: function (out, v) {
	                var d = vector.len(v);
	                if (d === 0) {
	                    out[0] = 0;
	                    out[1] = 0;
	                }
	                else {
	                    out[0] = v[0] / d;
	                    out[1] = v[1] / d;
	                }
	                return out;
	            },
	
	            /**
	             * 计算向量间距离
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @return {number}
	             */
	            distance: function (v1, v2) {
	                return Math.sqrt(
	                    (v1[0] - v2[0]) * (v1[0] - v2[0])
	                    + (v1[1] - v2[1]) * (v1[1] - v2[1])
	                );
	            },
	
	            /**
	             * 向量距离平方
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @return {number}
	             */
	            distanceSquare: function (v1, v2) {
	                return (v1[0] - v2[0]) * (v1[0] - v2[0])
	                    + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	            },
	
	            /**
	             * 求负向量
	             * @param {Vector2} out
	             * @param {Vector2} v
	             */
	            negate: function (out, v) {
	                out[0] = -v[0];
	                out[1] = -v[1];
	                return out;
	            },
	
	            /**
	             * 插值两个点
	             * @param {Vector2} out
	             * @param {Vector2} v1
	             * @param {Vector2} v2
	             * @param {number} t
	             */
	            lerp: function (out, v1, v2, t) {
	                // var ax = v1[0];
	                // var ay = v1[1];
	                out[0] = v1[0] + t * (v2[0] - v1[0]);
	                out[1] = v1[1] + t * (v2[1] - v1[1]);
	                return out;
	            },
	            
	            /**
	             * 矩阵左乘向量
	             * @param {Vector2} out
	             * @param {Vector2} v
	             * @param {Vector2} m
	             */
	            applyTransform: function (out, v, m) {
	                var x = v[0];
	                var y = v[1];
	                out[0] = m[0] * x + m[2] * y + m[4];
	                out[1] = m[1] * x + m[3] * y + m[5];
	                return out;
	            },
	            /**
	             * 求两个向量最小值
	             * @param  {Vector2} out
	             * @param  {Vector2} v1
	             * @param  {Vector2} v2
	             */
	            min: function (out, v1, v2) {
	                out[0] = Math.min(v1[0], v2[0]);
	                out[1] = Math.min(v1[1], v2[1]);
	                return out;
	            },
	            /**
	             * 求两个向量最大值
	             * @param  {Vector2} out
	             * @param  {Vector2} v1
	             * @param  {Vector2} v2
	             */
	            max: function (out, v1, v2) {
	                out[0] = Math.max(v1[0], v2[0]);
	                out[1] = Math.max(v1[1], v2[1]);
	                return out;
	            }
	        };
	
	        vector.length = vector.len;
	        vector.lengthSquare = vector.lenSquare;
	        vector.dist = vector.distance;
	        vector.distSquare = vector.distanceSquare;
	        
	        return vector;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
	        var ArrayCtor = typeof Float32Array === 'undefined'
	            ? Array
	            : Float32Array;
	        /**
	         * 3x2矩阵操作类
	         * @exports zrender/tool/matrix
	         */
	        var matrix = {
	            /**
	             * 创建一个单位矩阵
	             * @return {Float32Array|Array.<number>}
	             */
	            create : function() {
	                var out = new ArrayCtor(6);
	                matrix.identity(out);
	                
	                return out;
	            },
	            /**
	             * 设置矩阵为单位矩阵
	             * @param {Float32Array|Array.<number>} out
	             */
	            identity : function(out) {
	                out[0] = 1;
	                out[1] = 0;
	                out[2] = 0;
	                out[3] = 1;
	                out[4] = 0;
	                out[5] = 0;
	                return out;
	            },
	            /**
	             * 复制矩阵
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} m
	             */
	            copy: function(out, m) {
	                out[0] = m[0];
	                out[1] = m[1];
	                out[2] = m[2];
	                out[3] = m[3];
	                out[4] = m[4];
	                out[5] = m[5];
	                return out;
	            },
	            /**
	             * 矩阵相乘
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} m1
	             * @param {Float32Array|Array.<number>} m2
	             */
	            mul : function (out, m1, m2) {
	                out[0] = m1[0] * m2[0] + m1[2] * m2[1];
	                out[1] = m1[1] * m2[0] + m1[3] * m2[1];
	                out[2] = m1[0] * m2[2] + m1[2] * m2[3];
	                out[3] = m1[1] * m2[2] + m1[3] * m2[3];
	                out[4] = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	                out[5] = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	                return out;
	            },
	            /**
	             * 平移变换
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             * @param {Float32Array|Array.<number>} v
	             */
	            translate : function(out, a, v) {
	                out[0] = a[0];
	                out[1] = a[1];
	                out[2] = a[2];
	                out[3] = a[3];
	                out[4] = a[4] + v[0];
	                out[5] = a[5] + v[1];
	                return out;
	            },
	            /**
	             * 旋转变换
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             * @param {number} rad
	             */
	            rotate : function(out, a, rad) {
	                var aa = a[0];
	                var ac = a[2];
	                var atx = a[4];
	                var ab = a[1];
	                var ad = a[3];
	                var aty = a[5];
	                var st = Math.sin(rad);
	                var ct = Math.cos(rad);
	
	                out[0] = aa * ct + ab * st;
	                out[1] = -aa * st + ab * ct;
	                out[2] = ac * ct + ad * st;
	                out[3] = -ac * st + ct * ad;
	                out[4] = ct * atx + st * aty;
	                out[5] = ct * aty - st * atx;
	                return out;
	            },
	            /**
	             * 缩放变换
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             * @param {Float32Array|Array.<number>} v
	             */
	            scale : function(out, a, v) {
	                var vx = v[0];
	                var vy = v[1];
	                out[0] = a[0] * vx;
	                out[1] = a[1] * vy;
	                out[2] = a[2] * vx;
	                out[3] = a[3] * vy;
	                out[4] = a[4] * vx;
	                out[5] = a[5] * vy;
	                return out;
	            },
	            /**
	             * 求逆矩阵
	             * @param {Float32Array|Array.<number>} out
	             * @param {Float32Array|Array.<number>} a
	             */
	            invert : function(out, a) {
	            
	                var aa = a[0];
	                var ac = a[2];
	                var atx = a[4];
	                var ab = a[1];
	                var ad = a[3];
	                var aty = a[5];
	
	                var det = aa * ad - ab * ac;
	                if (!det) {
	                    return null;
	                }
	                det = 1.0 / det;
	
	                out[0] = ad * det;
	                out[1] = -ab * det;
	                out[2] = -ac * det;
	                out[3] = aa * det;
	                out[4] = (ac * aty - ad * atx) * det;
	                out[5] = (ab * atx - aa * aty) * det;
	                return out;
	            }
	        };
	
	        return matrix;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Painter绘图模块
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	 !(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';
	
	        var config = __webpack_require__(175);
	        var util = __webpack_require__(168);
	        // var vec2 = require('./tool/vector');
	        var log = __webpack_require__(174);
	        // var matrix = require('./tool/matrix');
	        var BaseLoadingEffect = __webpack_require__(181);
	
	        var Layer = __webpack_require__(189);
	
	        // 返回false的方法，用于避免页面被选中
	        function returnFalse() {
	            return false;
	        }
	
	        // 什么都不干的空方法
	        function doNothing() {}
	
	        function isLayerValid(layer) {
	            if (!layer) {
	                return false;
	            }
	            
	            if (layer.isBuildin) {
	                return true;
	            }
	
	            if (typeof(layer.resize) !== 'function'
	                || typeof(layer.refresh) !== 'function'
	            ) {
	                return false;
	            }
	
	            return true;
	        }
	
	        /**
	         * @alias module:zrender/Painter
	         * @constructor
	         * @param {HTMLElement} root 绘图容器
	         * @param {module:zrender/Storage} storage
	         */
	        var Painter = function (root, storage) {
	            /**
	             * 绘图容器
	             * @type {HTMLElement}
	             */
	            this.root = root;
	            root.style['-webkit-tap-highlight-color'] = 'transparent';
	            root.style['-webkit-user-select'] = 'none';
	            root.style['user-select'] = 'none';
	            root.style['-webkit-touch-callout'] = 'none';
	
	            /**
	             * @type {module:zrender/Storage}
	             */
	            this.storage = storage;
	
	            root.innerHTML = '';
	            this._width = this._getWidth(); // 宽，缓存记录
	            this._height = this._getHeight(); // 高，缓存记录
	
	            var domRoot = document.createElement('div');
	            this._domRoot = domRoot;
	
	            // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	            domRoot.style.position = 'relative';
	            domRoot.style.overflow = 'hidden';
	            domRoot.style.width = this._width + 'px';
	            domRoot.style.height = this._height + 'px';
	            root.appendChild(domRoot);
	
	            this._layers = {};
	
	            this._zlevelList = [];
	
	            this._layerConfig = {};
	
	            this._loadingEffect = new BaseLoadingEffect({});
	            this.shapeToImage = this._createShapeToImageProcessor();
	
	            // 创建各层canvas
	            // 背景
	            this._bgDom = document.createElement('div');
	            this._bgDom.style.cssText = [
	                'position:absolute;left:0px;top:0px;width:',
	                this._width, 'px;height:', this._height + 'px;', 
	                '-webkit-user-select:none;user-select;none;',
	                '-webkit-touch-callout:none;'
	            ].join('');
	            this._bgDom.setAttribute('data-zr-dom-id', 'bg');
	            this._bgDom.className = config.elementClassName;
	
	            domRoot.appendChild(this._bgDom);
	            this._bgDom.onselectstart = returnFalse;
	
	            // 高亮
	            var hoverLayer = new Layer('_zrender_hover_', this);
	            this._layers['hover'] = hoverLayer;
	            domRoot.appendChild(hoverLayer.dom);
	            hoverLayer.initContext();
	
	            hoverLayer.dom.onselectstart = returnFalse;
	            hoverLayer.dom.style['-webkit-user-select'] = 'none';
	            hoverLayer.dom.style['user-select'] = 'none';
	            hoverLayer.dom.style['-webkit-touch-callout'] = 'none';
	
	            // Will be injected by zrender instance
	            this.refreshNextFrame = null;
	        };
	
	        /**
	         * 首次绘图，创建各种dom和context
	         * 
	         * @param {Function} callback 绘画结束后的回调函数
	         */
	        Painter.prototype.render = function (callback) {
	            if (this.isLoading()) {
	                this.hideLoading();
	            }
	            // TODO
	            this.refresh(callback, true);
	
	            return this;
	        };
	
	        /**
	         * 刷新
	         * @param {Function} callback 刷新结束后的回调函数
	         * @param {boolean} paintAll 强制绘制所有shape
	         */
	        Painter.prototype.refresh = function (callback, paintAll) {
	            var list = this.storage.getShapeList(true);
	            this._paintList(list, paintAll);
	
	            // Paint custum layers
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                var layer = this._layers[z];
	                if (! layer.isBuildin && layer.refresh) {
	                    layer.refresh();
	                }
	            }
	
	            if (typeof callback == 'function') {
	                callback();
	            }
	
	            return this;
	        };
	
	        Painter.prototype._preProcessLayer = function (layer) {
	            layer.unusedCount++;
	            layer.updateTransform();
	        };
	
	        Painter.prototype._postProcessLayer = function (layer) {
	            layer.dirty = false;
	            // 删除过期的层
	            // PENDING
	            // if (layer.unusedCount >= 500) {
	            //     this.delLayer(z);
	            // }
	            if (layer.unusedCount == 1) {
	                layer.clear();
	            }
	        };
	 
	        Painter.prototype._paintList = function (list, paintAll) {
	
	            if (typeof(paintAll) == 'undefined') {
	                paintAll = false;
	            }
	
	            this._updateLayerStatus(list);
	
	            var currentLayer;
	            var currentZLevel;
	            var ctx;
	
	            this.eachBuildinLayer(this._preProcessLayer);
	
	            // var invTransform = [];
	
	            for (var i = 0, l = list.length; i < l; i++) {
	                var shape = list[i];
	
	                // Change draw layer
	                if (currentZLevel !== shape.zlevel) {
	                    if (currentLayer) {
	                        if (currentLayer.needTransform) {
	                            ctx.restore();
	                        }
	                        ctx.flush && ctx.flush();
	                    }
	
	                    currentZLevel = shape.zlevel;
	                    currentLayer = this.getLayer(currentZLevel);
	
	                    if (!currentLayer.isBuildin) {
	                        log(
	                            'ZLevel ' + currentZLevel
	                            + ' has been used by unkown layer ' + currentLayer.id
	                        );
	                    }
	
	                    ctx = currentLayer.ctx;
	
	                    // Reset the count
	                    currentLayer.unusedCount = 0;
	
	                    if (currentLayer.dirty || paintAll) {
	                        currentLayer.clear();
	                    }
	
	                    if (currentLayer.needTransform) {
	                        ctx.save();
	                        currentLayer.setTransform(ctx);
	                    }
	                }
	
	                if ((currentLayer.dirty || paintAll) && !shape.invisible) {
	                    if (
	                        !shape.onbrush
	                        || (shape.onbrush && !shape.onbrush(ctx, false))
	                    ) {
	                        if (config.catchBrushException) {
	                            try {
	                                shape.brush(ctx, false, this.refreshNextFrame);
	                            }
	                            catch (error) {
	                                log(
	                                    error,
	                                    'brush error of ' + shape.type,
	                                    shape
	                                );
	                            }
	                        }
	                        else {
	                            shape.brush(ctx, false, this.refreshNextFrame);
	                        }
	                    }
	                }
	
	                shape.__dirty = false;
	            }
	
	            if (currentLayer) {
	                if (currentLayer.needTransform) {
	                    ctx.restore();
	                }
	                ctx.flush && ctx.flush();
	            }
	
	            this.eachBuildinLayer(this._postProcessLayer);
	        };
	
	        /**
	         * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	         * @param {number} zlevel
	         * @return {module:zrender/Layer}
	         */
	        Painter.prototype.getLayer = function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (!layer) {
	                // Create a new layer
	                layer = new Layer(zlevel, this);
	                layer.isBuildin = true;
	
	                if (this._layerConfig[zlevel]) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }
	
	                layer.updateTransform();
	
	                this.insertLayer(zlevel, layer);
	
	                // Context is created after dom inserted to document
	                // Or excanvas will get 0px clientWidth and clientHeight
	                layer.initContext();
	            }
	
	            return layer;
	        };
	
	        Painter.prototype.insertLayer = function (zlevel, layer) {
	            if (this._layers[zlevel]) {
	                log('ZLevel ' + zlevel + ' has been used already');
	                return;
	            }
	            // Check if is a valid layer
	            if (!isLayerValid(layer)) {
	                log('Layer of zlevel ' + zlevel + ' is not valid');
	                return;
	            }
	
	            var len = this._zlevelList.length;
	            var prevLayer = null;
	            var i = -1;
	            if (len > 0 && zlevel > this._zlevelList[0]) {
	                for (i = 0; i < len - 1; i++) {
	                    if (
	                        this._zlevelList[i] < zlevel
	                        && this._zlevelList[i + 1] > zlevel
	                    ) {
	                        break;
	                    }
	                }
	                prevLayer = this._layers[this._zlevelList[i]];
	            }
	            this._zlevelList.splice(i + 1, 0, zlevel);
	
	            var prevDom = prevLayer ? prevLayer.dom : this._bgDom;
	            if (prevDom.nextSibling) {
	                prevDom.parentNode.insertBefore(
	                    layer.dom,
	                    prevDom.nextSibling
	                );
	            }
	            else {
	                prevDom.parentNode.appendChild(layer.dom);
	            }
	
	            this._layers[zlevel] = layer;
	        };
	
	        // Iterate each layer
	        Painter.prototype.eachLayer = function (cb, context) {
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                cb.call(context, this._layers[z], z);
	            }
	        };
	
	        // Iterate each buildin layer
	        Painter.prototype.eachBuildinLayer = function (cb, context) {
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                var layer = this._layers[z];
	                if (layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        };
	
	        // Iterate each other layer except buildin layer
	        Painter.prototype.eachOtherLayer = function (cb, context) {
	            for (var i = 0; i < this._zlevelList.length; i++) {
	                var z = this._zlevelList[i];
	                var layer = this._layers[z];
	                if (! layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        };
	
	        /**
	         * 获取所有已创建的层
	         * @param {Array.<module:zrender/Layer>} [prevLayer]
	         */
	        Painter.prototype.getLayers = function () {
	            return this._layers;
	        };
	
	        Painter.prototype._updateLayerStatus = function (list) {
	            
	            var layers = this._layers;
	
	            var elCounts = {};
	
	            this.eachBuildinLayer(function (layer, z) {
	                elCounts[z] = layer.elCount;
	                layer.elCount = 0;
	            });
	
	            for (var i = 0, l = list.length; i < l; i++) {
	                var shape = list[i];
	                var zlevel = shape.zlevel;
	                var layer = layers[zlevel];
	                if (layer) {
	                    layer.elCount++;
	                    // 已经被标记为需要刷新
	                    if (layer.dirty) {
	                        continue;
	                    }
	                    layer.dirty = shape.__dirty;
	                }
	            }
	
	            // 层中的元素数量有发生变化
	            this.eachBuildinLayer(function (layer, z) {
	                if (elCounts[z] !== layer.elCount) {
	                    layer.dirty = true;
	                }
	            });
	        };
	
	        /**
	         * 指定的图形列表
	         * @param {Array.<module:zrender/shape/Base>} shapeList 需要更新的图形元素列表
	         * @param {Function} [callback] 视图更新后回调函数
	         */
	        Painter.prototype.refreshShapes = function (shapeList, callback) {
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                var shape = shapeList[i];
	                shape.modSelf();
	            }
	
	            this.refresh(callback);
	            return this;
	        };
	
	        /**
	         * 设置loading特效
	         * 
	         * @param {Object} loadingEffect loading特效
	         * @return {Painter}
	         */
	        Painter.prototype.setLoadingEffect = function (loadingEffect) {
	            this._loadingEffect = loadingEffect;
	            return this;
	        };
	
	        /**
	         * 清除hover层外所有内容
	         */
	        Painter.prototype.clear = function () {
	            this.eachBuildinLayer(this._clearLayer);
	            return this;
	        };
	
	        Painter.prototype._clearLayer = function (layer) {
	            layer.clear();
	        };
	
	        /**
	         * 修改指定zlevel的绘制参数
	         * 
	         * @param {string} zlevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @param {Array.<number>} [position] 层的平移
	         * @param {Array.<number>} [rotation] 层的旋转
	         * @param {Array.<number>} [scale] 层的缩放
	         * @param {boolean} [zoomable=false] 层是否支持鼠标缩放操作
	         * @param {boolean} [panable=false] 层是否支持鼠标平移操作
	         */
	        Painter.prototype.modLayer = function (zlevel, config) {
	            if (config) {
	                if (!this._layerConfig[zlevel]) {
	                    this._layerConfig[zlevel] = config;
	                }
	                else {
	                    util.merge(this._layerConfig[zlevel], config, true);
	                }
	
	                var layer = this._layers[zlevel];
	
	                if (layer) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }
	            }
	        };
	
	        /**
	         * 删除指定层
	         * @param {number} zlevel 层所在的zlevel
	         */
	        Painter.prototype.delLayer = function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (!layer) {
	                return;
	            }
	            // Save config
	            this.modLayer(zlevel, {
	                position: layer.position,
	                rotation: layer.rotation,
	                scale: layer.scale
	            });
	            layer.dom.parentNode.removeChild(layer.dom);
	            delete this._layers[zlevel];
	
	            this._zlevelList.splice(util.indexOf(this._zlevelList, zlevel), 1);
	        };
	
	        /**
	         * 刷新hover层
	         */
	        Painter.prototype.refreshHover = function () {
	            this.clearHover();
	            var list = this.storage.getHoverShapes(true);
	            for (var i = 0, l = list.length; i < l; i++) {
	                this._brushHover(list[i]);
	            }
	            var ctx = this._layers.hover.ctx;
	            ctx.flush && ctx.flush();
	
	            this.storage.delHover();
	
	            return this;
	        };
	
	        /**
	         * 清除hover层所有内容
	         */
	        Painter.prototype.clearHover = function () {
	            var hover = this._layers.hover;
	            hover && hover.clear();
	
	            return this;
	        };
	
	        /**
	         * 显示loading
	         * 
	         * @param {Object=} loadingEffect loading效果对象
	         */
	        Painter.prototype.showLoading = function (loadingEffect) {
	            this._loadingEffect && this._loadingEffect.stop();
	            loadingEffect && this.setLoadingEffect(loadingEffect);
	            this._loadingEffect.start(this);
	            this.loading = true;
	
	            return this;
	        };
	
	        /**
	         * loading结束
	         */
	        Painter.prototype.hideLoading = function () {
	            this._loadingEffect.stop();
	
	            this.clearHover();
	            this.loading = false;
	            return this;
	        };
	
	        /**
	         * loading结束判断
	         */
	        Painter.prototype.isLoading = function () {
	            return this.loading;
	        };
	
	        /**
	         * 区域大小变化后重绘
	         */
	        Painter.prototype.resize = function () {
	            var domRoot = this._domRoot;
	            domRoot.style.display = 'none';
	
	            var width = this._getWidth();
	            var height = this._getHeight();
	
	            domRoot.style.display = '';
	
	            // 优化没有实际改变的resize
	            if (this._width != width || height != this._height) {
	                this._width = width;
	                this._height = height;
	
	                domRoot.style.width = width + 'px';
	                domRoot.style.height = height + 'px';
	
	                for (var id in this._layers) {
	
	                    this._layers[id].resize(width, height);
	                }
	
	                this.refresh(null, true);
	            }
	
	            return this;
	        };
	
	        /**
	         * 清除单独的一个层
	         * @param {number} zLevel
	         */
	        Painter.prototype.clearLayer = function (zLevel) {
	            var layer = this._layers[zLevel];
	            if (layer) {
	                layer.clear();
	            }
	        };
	
	        /**
	         * 释放
	         */
	        Painter.prototype.dispose = function () {
	            if (this.isLoading()) {
	                this.hideLoading();
	            }
	
	            this.root.innerHTML = '';
	
	            this.root =
	            this.storage =
	
	            this._domRoot = 
	            this._layers = null;
	        };
	
	        Painter.prototype.getDomHover = function () {
	            return this._layers.hover.dom;
	        };
	
	        /**
	         * 图像导出
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff'] 背景色
	         * @return {string} 图片的Base64 url
	         */
	        Painter.prototype.toDataURL = function (type, backgroundColor, args) {
	            if (window['G_vmlCanvasManager']) {
	                return null;
	            }
	
	            var imageLayer = new Layer('image', this);
	            this._bgDom.appendChild(imageLayer.dom);
	            imageLayer.initContext();
	            
	            var ctx = imageLayer.ctx;
	            imageLayer.clearColor = backgroundColor || '#fff';
	            imageLayer.clear();
	            
	            var self = this;
	            // 升序遍历，shape上的zlevel指定绘画图层的z轴层叠
	
	            this.storage.iterShape(
	                function (shape) {
	                    if (!shape.invisible) {
	                        if (!shape.onbrush // 没有onbrush
	                            // 有onbrush并且调用执行返回false或undefined则继续粉刷
	                            || (shape.onbrush && !shape.onbrush(ctx, false))
	                        ) {
	                            if (config.catchBrushException) {
	                                try {
	                                    shape.brush(ctx, false, self.refreshNextFrame);
	                                }
	                                catch (error) {
	                                    log(
	                                        error,
	                                        'brush error of ' + shape.type,
	                                        shape
	                                    );
	                                }
	                            }
	                            else {
	                                shape.brush(ctx, false, self.refreshNextFrame);
	                            }
	                        }
	                    }
	                },
	                { normal: 'up', update: true }
	            );
	            var image = imageLayer.dom.toDataURL(type, args); 
	            ctx = null;
	            this._bgDom.removeChild(imageLayer.dom);
	            return image;
	        };
	
	        /**
	         * 获取绘图区域宽度
	         */
	        Painter.prototype.getWidth = function () {
	            return this._width;
	        };
	
	        /**
	         * 获取绘图区域高度
	         */
	        Painter.prototype.getHeight = function () {
	            return this._height;
	        };
	
	        Painter.prototype._getWidth = function () {
	            var root = this.root;
	            var stl = root.currentStyle
	                      || document.defaultView.getComputedStyle(root);
	
	            return ((root.clientWidth || parseInt(stl.width, 10))
	                    - parseInt(stl.paddingLeft, 10) // 请原谅我这比较粗暴
	                    - parseInt(stl.paddingRight, 10)).toFixed(0) - 0;
	        };
	
	        Painter.prototype._getHeight = function () {
	            var root = this.root;
	            var stl = root.currentStyle
	                      || document.defaultView.getComputedStyle(root);
	
	            return ((root.clientHeight || parseInt(stl.height, 10))
	                    - parseInt(stl.paddingTop, 10) // 请原谅我这比较粗暴
	                    - parseInt(stl.paddingBottom, 10)).toFixed(0) - 0;
	        };
	
	        Painter.prototype._brushHover = function (shape) {
	            var ctx = this._layers.hover.ctx;
	
	            if (!shape.onbrush // 没有onbrush
	                // 有onbrush并且调用执行返回false或undefined则继续粉刷
	                || (shape.onbrush && !shape.onbrush(ctx, true))
	            ) {
	                var layer = this.getLayer(shape.zlevel);
	                if (layer.needTransform) {
	                    ctx.save();
	                    layer.setTransform(ctx);
	                }
	                // Retina 优化
	                if (config.catchBrushException) {
	                    try {
	                        shape.brush(ctx, true, this.refreshNextFrame);
	                    }
	                    catch (error) {
	                        log(
	                            error, 'hoverBrush error of ' + shape.type, shape
	                        );
	                    }
	                }
	                else {
	                    shape.brush(ctx, true, this.refreshNextFrame);
	                }
	                if (layer.needTransform) {
	                    ctx.restore();
	                }
	            }
	        };
	
	        Painter.prototype._shapeToImage = function (
	            id, shape, width, height, devicePixelRatio
	        ) {
	            var canvas = document.createElement('canvas');
	            var ctx = canvas.getContext('2d');
	            
	            canvas.style.width = width + 'px';
	            canvas.style.height = height + 'px';
	            canvas.setAttribute('width', width * devicePixelRatio);
	            canvas.setAttribute('height', height * devicePixelRatio);
	
	            ctx.clearRect(0, 0, width * devicePixelRatio, height * devicePixelRatio);
	
	            var shapeTransform = {
	                position : shape.position,
	                rotation : shape.rotation,
	                scale : shape.scale
	            };
	            shape.position = [ 0, 0, 0 ];
	            shape.rotation = 0;
	            shape.scale = [ 1, 1 ];
	            if (shape) {
	                shape.brush(ctx, false);
	            }
	
	            var ImageShape = __webpack_require__(190);
	            var imgShape = new ImageShape({
	                id : id,
	                style : {
	                    x : 0,
	                    y : 0,
	                    image : canvas
	                }
	            });
	
	            if (shapeTransform.position != null) {
	                imgShape.position = shape.position = shapeTransform.position;
	            }
	
	            if (shapeTransform.rotation != null) {
	                imgShape.rotation = shape.rotation = shapeTransform.rotation;
	            }
	
	            if (shapeTransform.scale != null) {
	                imgShape.scale = shape.scale = shapeTransform.scale;
	            }
	
	            return imgShape;
	        };
	
	        Painter.prototype._createShapeToImageProcessor = function () {
	            if (window['G_vmlCanvasManager']) {
	                return doNothing;
	            }
	
	            var me = this;
	
	            return function (id, e, width, height) {
	                return me._shapeToImage(
	                    id, e, width, height, config.devicePixelRatio
	                );
	            };
	        };
	
	        return Painter;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: loading特效类
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        var util = __webpack_require__(168);
	        var TextShape = __webpack_require__(182);
	        var RectangleShape = __webpack_require__(188);
	
	
	        var DEFAULT_TEXT = 'Loading...';
	        var DEFAULT_TEXT_FONT = 'normal 16px Arial';
	
	        /**
	         * @constructor
	         * 
	         * @param {Object} options 选项
	         * @param {color} options.backgroundColor 背景颜色
	         * @param {Object} options.textStyle 文字样式，同shape/text.style
	         * @param {number=} options.progress 进度参数，部分特效有用
	         * @param {Object=} options.effect 特效参数，部分特效有用
	         * 
	         * {
	         *     effect,
	         *     //loading话术
	         *     text:'',
	         *     // 水平安放位置，默认为 'center'，可指定x坐标
	         *     x:'center' || 'left' || 'right' || {number},
	         *     // 垂直安放位置，默认为'top'，可指定y坐标
	         *     y:'top' || 'bottom' || {number},
	         *
	         *     textStyle:{
	         *         textFont: 'normal 20px Arial' || {textFont}, //文本字体
	         *         color: {color}
	         *     }
	         * }
	         */
	        function Base(options) {
	            this.setOptions(options);
	        }
	
	        /**
	         * 创建loading文字图形
	         * 
	         * @param {Object} textStyle 文字style，同shape/text.style
	         */
	        Base.prototype.createTextShape = function (textStyle) {
	            return new TextShape({
	                highlightStyle : util.merge(
	                    {
	                        x : this.canvasWidth / 2,
	                        y : this.canvasHeight / 2,
	                        text : DEFAULT_TEXT,
	                        textAlign : 'center',
	                        textBaseline : 'middle',
	                        textFont : DEFAULT_TEXT_FONT,
	                        color: '#333',
	                        brushType : 'fill'
	                    },
	                    textStyle,
	                    true
	                )
	            });
	        };
	        
	        /**
	         * 获取loading背景图形
	         * 
	         * @param {color} color 背景颜色
	         */
	        Base.prototype.createBackgroundShape = function (color) {
	            return new RectangleShape({
	                highlightStyle : {
	                    x : 0,
	                    y : 0,
	                    width : this.canvasWidth,
	                    height : this.canvasHeight,
	                    brushType : 'fill',
	                    color : color
	                }
	            });
	        };
	
	        Base.prototype.start = function (painter) {
	            this.canvasWidth = painter._width;
	            this.canvasHeight = painter._height;
	
	            function addShapeHandle(param) {
	                painter.storage.addHover(param);
	            }
	            function refreshHandle() {
	                painter.refreshHover();
	            }
	            this.loadingTimer = this._start(addShapeHandle, refreshHandle);
	        };
	
	        Base.prototype._start = function (/*addShapeHandle, refreshHandle*/) {
	            return setInterval(function () {
	            }, 10000);
	        };
	
	        Base.prototype.stop = function () {
	            clearInterval(this.loadingTimer);
	        };
	
	        Base.prototype.setOptions = function (options) {
	            this.options = options || {};
	        };
	        
	        Base.prototype.adjust = function (value, region) {
	            if (value <= region[0]) {
	                value = region[0];
	            }
	            else if (value >= region[1]) {
	                value = region[1];
	            }
	            return value;
	        };
	        
	        Base.prototype.getLocation = function(loc, totalWidth, totalHeight) {
	            var x = loc.x != null ? loc.x : 'center';
	            switch (x) {
	                case 'center' :
	                    x = Math.floor((this.canvasWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = 0;
	                    break;
	                case 'right' :
	                    x = this.canvasWidth - totalWidth;
	                    break;
	            }
	            var y = loc.y != null ? loc.y : 'center';
	            switch (y) {
	                case 'center' :
	                    y = Math.floor((this.canvasHeight - totalHeight) / 2);
	                    break;
	                case 'top' :
	                    y = 0;
	                    break;
	                case 'bottom' :
	                    y = this.canvasHeight - totalHeight;
	                    break;
	            }
	            return {
	                x : x,
	                y : y,
	                width : totalWidth,
	                height : totalHeight
	            };
	        };
	
	        return Base;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/shape/Text
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *     var Text = require('zrender/shape/Text');
	 *     var shape = new Text({
	 *         style: {
	 *             text: 'Label',
	 *             x: 100,
	 *             y: 100,
	 *             textFont: '14px Arial'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} ITextStyle
	 * @property {number} x 横坐标
	 * @property {number} y 纵坐标
	 * @property {string} text 文本内容
	 * @property {number} [maxWidth=null] 最大宽度限制
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textAlign] 可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var area = __webpack_require__(183);
	        var Base = __webpack_require__(185);
	        
	        /**
	         * @alias module:zrender/shape/Text
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Text = function (options) {
	            Base.call(this, options);
	            /**
	             * 文字绘制样式
	             * @name module:zrender/shape/Text#style
	             * @type {module:zrender/shape/Text~ITextStyle}
	             */
	            /**
	             * 文字高亮绘制样式
	             * @name module:zrender/shape/Text#highlightStyle
	             * @type {module:zrender/shape/Text~ITextStyle}
	             */
	        };
	
	        Text.prototype =  {
	            type: 'text',
	
	            brush : function (ctx, isHighlight) {
	                var style = this.style;
	                if (isHighlight) {
	                    // 根据style扩展默认高亮样式
	                    style = this.getHighlightStyle(
	                        style, this.highlightStyle || {}
	                    );
	                }
	                
	                if (typeof(style.text) == 'undefined' || style.text === false) {
	                    return;
	                }
	
	                ctx.save();
	                this.doClip(ctx);
	
	                this.setContext(ctx, style);
	
	                // 设置transform
	                this.setTransform(ctx);
	
	                if (style.textFont) {
	                    ctx.font = style.textFont;
	                }
	                ctx.textAlign = style.textAlign || 'start';
	                ctx.textBaseline = style.textBaseline || 'middle';
	
	                var text = (style.text + '').split('\n');
	                var lineHeight = area.getTextHeight('国', style.textFont);
	                var rect = this.getRect(style);
	                var x = style.x;
	                var y;
	                if (style.textBaseline == 'top') {
	                    y = rect.y;
	                }
	                else if (style.textBaseline == 'bottom') {
	                    y = rect.y + lineHeight;
	                }
	                else {
	                    y = rect.y + lineHeight / 2;
	                }
	                
	                for (var i = 0, l = text.length; i < l; i++) {
	                    if (style.maxWidth) {
	                        switch (style.brushType) {
	                            case 'fill':
	                                ctx.fillText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                break;
	                            case 'stroke':
	                                ctx.strokeText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                break;
	                            case 'both':
	                                ctx.fillText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                ctx.strokeText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                                break;
	                            default:
	                                ctx.fillText(
	                                    text[i],
	                                    x, y, style.maxWidth
	                                );
	                        }
	                    }
	                    else {
	                        switch (style.brushType) {
	                            case 'fill':
	                                ctx.fillText(text[i], x, y);
	                                break;
	                            case 'stroke':
	                                ctx.strokeText(text[i], x, y);
	                                break;
	                            case 'both':
	                                ctx.fillText(text[i], x, y);
	                                ctx.strokeText(text[i], x, y);
	                                break;
	                            default:
	                                ctx.fillText(text[i], x, y);
	                        }
	                    }
	                    y += lineHeight;
	                }
	
	                ctx.restore();
	                return;
	            },
	
	            /**
	             * 返回文字包围盒矩形
	             * @param {module:zrender/shape/Text~ITextStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var width = area.getTextWidth(style.text, style.textFont);
	                var height = area.getTextHeight(style.text, style.textFont);
	                
	                var textX = style.x;                 // 默认start == left
	                if (style.textAlign == 'end' || style.textAlign == 'right') {
	                    textX -= width;
	                }
	                else if (style.textAlign == 'center') {
	                    textX -= (width / 2);
	                }
	
	                var textY;
	                if (style.textBaseline == 'top') {
	                    textY = style.y;
	                }
	                else if (style.textBaseline == 'bottom') {
	                    textY = style.y - height;
	                }
	                else {
	                    // middle
	                    textY = style.y - height / 2;
	                }
	
	                style.__rect = {
	                    x : textX,
	                    y : textY,
	                    width : width,
	                    height : height
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Text, Base);
	        return Text;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: 图形空间辅助类
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 *
	 * isInside：是否在区域内部
	 * isOutside：是否在区域外部
	 * getTextWidth：测算单行文本宽度
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	        'use strict';
	
	        var util = __webpack_require__(168);
	        var curve = __webpack_require__(184);
	
	        var _ctx;
	        
	        var _textWidthCache = {};
	        var _textHeightCache = {};
	        var _textWidthCacheCounter = 0;
	        var _textHeightCacheCounter = 0;
	        var TEXT_CACHE_MAX = 5000;
	            
	        var PI2 = Math.PI * 2;
	
	        function normalizeRadian(angle) {
	            angle %= PI2;
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle;
	        }
	        /**
	         * 包含判断
	         *
	         * @param {Object} shape : 图形
	         * @param {Object} area ： 目标区域
	         * @param {number} x ： 横坐标
	         * @param {number} y ： 纵坐标
	         */
	        function isInside(shape, area, x, y) {
	            if (!area || !shape) {
	                // 无参数或不支持类型
	                return false;
	            }
	            var zoneType = shape.type;
	
	            _ctx = _ctx || util.getContext();
	
	            // 未实现或不可用时(excanvas不支持)则数学运算，主要是line，polyline，ring
	            var _mathReturn = _mathMethod(shape, area, x, y);
	            if (typeof _mathReturn != 'undefined') {
	                return _mathReturn;
	            }
	
	            if (shape.buildPath && _ctx.isPointInPath) {
	                return _buildPathMethod(shape, _ctx, area, x, y);
	            }
	
	            // 上面的方法都行不通时
	            switch (zoneType) {
	                case 'ellipse': // Todo，不精确
	                    return true;
	                // 旋轮曲线  不准确
	                case 'trochoid':
	                    var _r = area.location == 'out'
	                            ? area.r1 + area.r2 + area.d
	                            : area.r1 - area.r2 + area.d;
	                    return isInsideCircle(area, x, y, _r);
	                // 玫瑰线 不准确
	                case 'rose' :
	                    return isInsideCircle(area, x, y, area.maxr);
	                // 路径，椭圆，曲线等-----------------13
	                default:
	                    return false;   // Todo，暂不支持
	            }
	        }
	
	        /**
	         * @param {Object} shape : 图形
	         * @param {Object} area ：目标区域
	         * @param {number} x ： 横坐标
	         * @param {number} y ： 纵坐标
	         * @return {boolean=} true表示坐标处在图形中
	         */
	        function _mathMethod(shape, area, x, y) {
	            var zoneType = shape.type;
	            // 在矩形内则部分图形需要进一步判断
	            switch (zoneType) {
	                // 贝塞尔曲线
	                case 'bezier-curve':
	                    if (typeof(area.cpX2) === 'undefined') {
	                        return isInsideQuadraticStroke(
	                            area.xStart, area.yStart,
	                            area.cpX1, area.cpY1, 
	                            area.xEnd, area.yEnd,
	                            area.lineWidth, x, y
	                        );
	                    }
	                    return isInsideCubicStroke(
	                        area.xStart, area.yStart,
	                        area.cpX1, area.cpY1, 
	                        area.cpX2, area.cpY2, 
	                        area.xEnd, area.yEnd,
	                        area.lineWidth, x, y
	                    );
	                // 线
	                case 'line':
	                    return isInsideLine(
	                        area.xStart, area.yStart,
	                        area.xEnd, area.yEnd,
	                        area.lineWidth, x, y
	                    );
	                // 折线
	                case 'polyline':
	                    return isInsidePolyline(
	                        area.pointList, area.lineWidth, x, y
	                    );
	                // 圆环
	                case 'ring':
	                    return isInsideRing(
	                        area.x, area.y, area.r0, area.r, x, y
	                    );
	                // 圆形
	                case 'circle':
	                    return isInsideCircle(
	                        area.x, area.y, area.r, x, y
	                    );
	                // 扇形
	                case 'sector':
	                    var startAngle = area.startAngle * Math.PI / 180;
	                    var endAngle = area.endAngle * Math.PI / 180;
	                    if (!area.clockWise) {
	                        startAngle = -startAngle;
	                        endAngle = -endAngle;
	                    }
	                    return isInsideSector(
	                        area.x, area.y, area.r0, area.r,
	                        startAngle, endAngle,
	                        !area.clockWise,
	                        x, y
	                    );
	                // 多边形
	                case 'path':
	                    return area.pathArray && isInsidePath(
	                        area.pathArray, Math.max(area.lineWidth, 5),
	                        area.brushType, x, y
	                    );
	                case 'polygon':
	                case 'star':
	                case 'isogon':
	                    return isInsidePolygon(area.pointList, x, y);
	                // 文本
	                case 'text':
	                    var rect =  area.__rect || shape.getRect(area);
	                    return isInsideRect(
	                        rect.x, rect.y, rect.width, rect.height, x, y
	                    );
	                // 矩形
	                case 'rectangle':
	                // 图片
	                case 'image':
	                    return isInsideRect(
	                        area.x, area.y, area.width, area.height, x, y
	                    );
	            }
	        }
	
	        /**
	         * 通过buildPath方法来判断，三个方法中较快，但是不支持线条类型的shape，
	         * 而且excanvas不支持isPointInPath方法
	         *
	         * @param {Object} shape ： shape
	         * @param {Object} context : 上下文
	         * @param {Object} area ：目标区域
	         * @param {number} x ： 横坐标
	         * @param {number} y ： 纵坐标
	         * @return {boolean} true表示坐标处在图形中
	         */
	        function _buildPathMethod(shape, context, area, x, y) {
	            // 图形类实现路径创建了则用类的path
	            context.beginPath();
	            shape.buildPath(context, area);
	            context.closePath();
	            return context.isPointInPath(x, y);
	        }
	
	        /**
	         * !isInside
	         */
	        function isOutside(shape, area, x, y) {
	            return !isInside(shape, area, x, y);
	        }
	
	        /**
	         * 线段包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        function isInsideLine(x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l)
	                || (y < y0 - _l && y < y1 - _l)
	                || (x > x0 + _l && x > x1 + _l)
	                || (x < x0 - _l && x < x1 - _l)
	            ) {
	                return false;
	            }
	
	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
	            }
	            else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }
	
	        /**
	         * 三次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  x3
	         * @param  {number}  y3
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        function isInsideCubicStroke(
	            x0, y0, x1, y1, x2, y2, x3, y3,
	            lineWidth, x, y
	        ) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)
	            ) {
	                return false;
	            }
	            var d =  curve.cubicProjectPoint(
	                x0, y0, x1, y1, x2, y2, x3, y3,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	
	        /**
	         * 二次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        function isInsideQuadraticStroke(
	            x0, y0, x1, y1, x2, y2,
	            lineWidth, x, y
	        ) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)
	            ) {
	                return false;
	            }
	            var d =  curve.quadraticProjectPoint(
	                x0, y0, x1, y1, x2, y2,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	
	        /**
	         * 圆弧描边包含判断
	         * @param  {number}  cx
	         * @param  {number}  cy
	         * @param  {number}  r
	         * @param  {number}  startAngle
	         * @param  {number}  endAngle
	         * @param  {boolean}  anticlockwise
	         * @param  {number} lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {Boolean}
	         */
	        function isInsideArcStroke(
	            cx, cy, r, startAngle, endAngle, anticlockwise,
	            lineWidth, x, y
	        ) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = Math.max(lineWidth, 5);
	
	            x -= cx;
	            y -= cy;
	            var d = Math.sqrt(x * x + y * y);
	            if ((d - _l > r) || (d + _l < r)) {
	                return false;
	            }
	            if (Math.abs(startAngle - endAngle) >= PI2) {
	                // Is a circle
	                return true;
	            }
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }
	            
	            var angle = Math.atan2(y, x);
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return (angle >= startAngle && angle <= endAngle)
	                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);
	        }
	
	        function isInsidePolyline(points, lineWidth, x, y) {
	            var lineWidth = Math.max(lineWidth, 10);
	            for (var i = 0, l = points.length - 1; i < l; i++) {
	                var x0 = points[i][0];
	                var y0 = points[i][1];
	                var x1 = points[i + 1][0];
	                var y1 = points[i + 1][1];
	
	                if (isInsideLine(x0, y0, x1, y1, lineWidth, x, y)) {
	                    return true;
	                }
	            }
	
	            return false;
	        }
	
	        function isInsideRing(cx, cy, r0, r, x, y) {
	            var d = (x - cx) * (x - cx) + (y - cy) * (y - cy);
	            return (d < r * r) && (d > r0 * r0);
	        }
	
	        /**
	         * 矩形包含判断
	         */
	        function isInsideRect(x0, y0, width, height, x, y) {
	            return x >= x0 && x <= (x0 + width)
	                && y >= y0 && y <= (y0 + height);
	        }
	
	        /**
	         * 圆形包含判断
	         */
	        function isInsideCircle(x0, y0, r, x, y) {
	            return (x - x0) * (x - x0) + (y - y0) * (y - y0)
	                   < r * r;
	        }
	
	        /**
	         * 扇形包含判断
	         */
	        function isInsideSector(
	            cx, cy, r0, r, startAngle, endAngle, anticlockwise, x, y
	        ) {
	            return isInsideArcStroke(
	                cx, cy, (r0 + r) / 2, startAngle, endAngle, anticlockwise,
	                r - r0, x, y
	            );
	        }
	
	        /**
	         * 多边形包含判断
	         * 与 canvas 一样采用 non-zero winding rule
	         */
	        function isInsidePolygon(points, x, y) {
	            var N = points.length;
	            var w = 0;
	
	            for (var i = 0, j = N - 1; i < N; i++) {
	                var x0 = points[j][0];
	                var y0 = points[j][1];
	                var x1 = points[i][0];
	                var y1 = points[i][1];
	                w += windingLine(x0, y0, x1, y1, x, y);
	                j = i;
	            }
	            return w !== 0;
	        }
	
	        function windingLine(x0, y0, x1, y1, x, y) {
	            if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
	                return 0;
	            }
	            if (y1 == y0) {
	                return 0;
	            }
	            var dir = y1 < y0 ? 1 : -1;
	            var t = (y - y0) / (y1 - y0);
	            var x_ = t * (x1 - x0) + x0;
	
	            return x_ > x ? dir : 0;
	        }
	
	        // 临时数组
	        var roots = [-1, -1, -1];
	        var extrema = [-1, -1];
	
	        function swapExtrema() {
	            var tmp = extrema[0];
	            extrema[0] = extrema[1];
	            extrema[1] = tmp;
	        }
	        function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	            // Quick reject
	            if (
	                (y > y0 && y > y1 && y > y2 && y > y3)
	                || (y < y0 && y < y1 && y < y2 && y < y3)
	            ) {
	                return 0;
	            }
	            var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	            if (nRoots === 0) {
	                return 0;
	            }
	            else {
	                var w = 0;
	                var nExtrema = -1;
	                var y0_, y1_;
	                for (var i = 0; i < nRoots; i++) {
	                    var t = roots[i];
	                    var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	                    if (x_ < x) { // Quick reject
	                        continue;
	                    }
	                    if (nExtrema < 0) {
	                        nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                        if (extrema[1] < extrema[0] && nExtrema > 1) {
	                            swapExtrema();
	                        }
	                        y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                        if (nExtrema > 1) {
	                            y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                        }
	                    }
	                    if (nExtrema == 2) {
	                        // 分成三段单调函数
	                        if (t < extrema[0]) {
	                            w += y0_ < y0 ? 1 : -1;
	                        } 
	                        else if (t < extrema[1]) {
	                            w += y1_ < y0_ ? 1 : -1;
	                        } 
	                        else {
	                            w += y3 < y1_ ? 1 : -1;
	                        }
	                    } 
	                    else {
	                        // 分成两段单调函数
	                        if (t < extrema[0]) {
	                            w += y0_ < y0 ? 1 : -1;
	                        } 
	                        else {
	                            w += y3 < y0_ ? 1 : -1;
	                        }
	                    }
	                }
	                return w;
	            }
	        }
	
	        function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	            // Quick reject
	            if (
	                (y > y0 && y > y1 && y > y2)
	                || (y < y0 && y < y1 && y < y2)
	            ) {
	                return 0;
	            }
	            var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	            if (nRoots === 0) {
	                return 0;
	            } 
	            else {
	                var t = curve.quadraticExtremum(y0, y1, y2);
	                if (t >=0 && t <= 1) {
	                    var w = 0;
	                    var y_ = curve.quadraticAt(y0, y1, y2, t);
	                    for (var i = 0; i < nRoots; i++) {
	                        var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                        if (x_ < x) {
	                            continue;
	                        }
	                        if (roots[i] < t) {
	                            w += y_ < y0 ? 1 : -1;
	                        } 
	                        else {
	                            w += y2 < y_ ? 1 : -1;
	                        }
	                    }
	                    return w;
	                } 
	                else {
	                    var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	                    if (x_ < x) {
	                        return 0;
	                    }
	                    return y2 < y0 ? 1 : -1;
	                }
	            }
	        }
	        
	        // TODO
	        // Arc 旋转
	        function windingArc(
	            cx, cy, r, startAngle, endAngle, anticlockwise, x, y
	        ) {
	            y -= cy;
	            if (y > r || y < -r) {
	                return 0;
	            }
	            var tmp = Math.sqrt(r * r - y * y);
	            roots[0] = -tmp;
	            roots[1] = tmp;
	
	            if (Math.abs(startAngle - endAngle) >= PI2) {
	                // Is a circle
	                startAngle = 0;
	                endAngle = PI2;
	                var dir = anticlockwise ? 1 : -1;
	                if (x >= roots[0] + cx && x <= roots[1] + cx) {
	                    return dir;
	                } else {
	                    return 0;
	                }
	            }
	
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);   
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);   
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }
	
	            var w = 0;
	            for (var i = 0; i < 2; i++) {
	                var x_ = roots[i];
	                if (x_ + cx > x) {
	                    var angle = Math.atan2(y, x_);
	                    var dir = anticlockwise ? 1 : -1;
	                    if (angle < 0) {
	                        angle = PI2 + angle;
	                    }
	                    if (
	                        (angle >= startAngle && angle <= endAngle)
	                        || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)
	                    ) {
	                        if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                            dir = -dir;
	                        }
	                        w += dir;
	                    }
	                }
	            }
	            return w;
	        }
	
	        /**
	         * 路径包含判断
	         * 与 canvas 一样采用 non-zero winding rule
	         */
	        function isInsidePath(pathArray, lineWidth, brushType, x, y) {
	            var w = 0;
	            var xi = 0;
	            var yi = 0;
	            var x0 = 0;
	            var y0 = 0;
	            var beginSubpath = true;
	            var firstCmd = true;
	
	            brushType = brushType || 'fill';
	
	            var hasStroke = brushType === 'stroke' || brushType === 'both';
	            var hasFill = brushType === 'fill' || brushType === 'both';
	
	            // var roots = [-1, -1, -1];
	            for (var i = 0; i < pathArray.length; i++) {
	                var seg = pathArray[i];
	                var p = seg.points;
	                // Begin a new subpath
	                if (beginSubpath || seg.command === 'M') {
	                    if (i > 0) {
	                        // Close previous subpath
	                        if (hasFill) {
	                            w += windingLine(xi, yi, x0, y0, x, y);
	                        }
	                        if (w !== 0) {
	                            return true;
	                        }
	                    }
	                    x0 = p[p.length - 2];
	                    y0 = p[p.length - 1];
	                    beginSubpath = false;
	                    if (firstCmd && seg.command !== 'A') {
	                        // 如果第一个命令不是M, 是lineTo, bezierCurveTo
	                        // 等绘制命令的话，是会从该绘制的起点开始算的
	                        // Arc 会在之后做单独处理所以这里忽略
	                        firstCmd = false;
	                        xi = x0;
	                        yi = y0;
	                    }
	                }
	                switch (seg.command) {
	                    case 'M':
	                        xi = p[0];
	                        yi = p[1];
	                        break;
	                    case 'L':
	                        if (hasStroke) {
	                            if (isInsideLine(
	                                xi, yi, p[0], p[1], lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingLine(xi, yi, p[0], p[1], x, y);
	                        }
	                        xi = p[0];
	                        yi = p[1];
	                        break;
	                    case 'C':
	                        if (hasStroke) {
	                            if (isInsideCubicStroke(
	                                xi, yi, p[0], p[1], p[2], p[3], p[4], p[5],
	                                lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingCubic(
	                                xi, yi, p[0], p[1], p[2], p[3], p[4], p[5], x, y
	                            );
	                        }
	                        xi = p[4];
	                        yi = p[5];
	                        break;
	                    case 'Q':
	                        if (hasStroke) {
	                            if (isInsideQuadraticStroke(
	                                xi, yi, p[0], p[1], p[2], p[3],
	                                lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingQuadratic(
	                                xi, yi, p[0], p[1], p[2], p[3], x, y
	                            );
	                        }
	                        xi = p[2];
	                        yi = p[3];
	                        break;
	                    case 'A':
	                        // TODO Arc 旋转
	                        // TODO Arc 判断的开销比较大
	                        var cx = p[0];
	                        var cy = p[1];
	                        var rx = p[2];
	                        var ry = p[3];
	                        var theta = p[4];
	                        var dTheta = p[5];
	                        var x1 = Math.cos(theta) * rx + cx;
	                        var y1 = Math.sin(theta) * ry + cy;
	                        // 不是直接使用 arc 命令
	                        if (!firstCmd) {
	                            w += windingLine(xi, yi, x1, y1);
	                        } else {
	                            firstCmd = false;
	                            // 第一个命令起点还未定义
	                            x0 = x1;
	                            y0 = y1;
	                        }
	                        // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                        var _x = (x - cx) * ry / rx + cx;
	                        if (hasStroke) {
	                            if (isInsideArcStroke(
	                                cx, cy, ry, theta, theta + dTheta, 1 - p[7],
	                                lineWidth, _x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        if (hasFill) {
	                            w += windingArc(
	                                cx, cy, ry, theta, theta + dTheta, 1 - p[7],
	                                _x, y
	                            );
	                        }
	                        xi = Math.cos(theta + dTheta) * rx + cx;
	                        yi = Math.sin(theta + dTheta) * ry + cy;
	                        break;
	                    case 'z':
	                        if (hasStroke) {
	                            if (isInsideLine(
	                                xi, yi, x0, y0, lineWidth, x, y
	                            )) {
	                                return true;
	                            }
	                        }
	                        beginSubpath = true;
	                        break;
	                }
	            }
	            if (hasFill) {
	                w += windingLine(xi, yi, x0, y0, x, y);
	            }
	            return w !== 0;
	        }
	
	        /**
	         * 测算多行文本宽度
	         * @param {Object} text
	         * @param {Object} textFont
	         */
	        function getTextWidth(text, textFont) {
	            var key = text + ':' + textFont;
	            if (_textWidthCache[key]) {
	                return _textWidthCache[key];
	            }
	            _ctx = _ctx || util.getContext();
	            _ctx.save();
	
	            if (textFont) {
	                _ctx.font = textFont;
	            }
	            
	            text = (text + '').split('\n');
	            var width = 0;
	            for (var i = 0, l = text.length; i < l; i++) {
	                width =  Math.max(
	                    _ctx.measureText(text[i]).width,
	                    width
	                );
	            }
	            _ctx.restore();
	
	            _textWidthCache[key] = width;
	            if (++_textWidthCacheCounter > TEXT_CACHE_MAX) {
	                // 内存释放
	                _textWidthCacheCounter = 0;
	                _textWidthCache = {};
	            }
	            
	            return width;
	        }
	        
	        /**
	         * 测算多行文本高度
	         * @param {Object} text
	         * @param {Object} textFont
	         */
	        function getTextHeight(text, textFont) {
	            var key = text + ':' + textFont;
	            if (_textHeightCache[key]) {
	                return _textHeightCache[key];
	            }
	            
	            _ctx = _ctx || util.getContext();
	
	            _ctx.save();
	            if (textFont) {
	                _ctx.font = textFont;
	            }
	            
	            text = (text + '').split('\n');
	            // 比较粗暴
	            var height = (_ctx.measureText('国').width + 2) * text.length;
	
	            _ctx.restore();
	
	            _textHeightCache[key] = height;
	            if (++_textHeightCacheCounter > TEXT_CACHE_MAX) {
	                // 内存释放
	                _textHeightCacheCounter = 0;
	                _textHeightCache = {};
	            }
	            return height;
	        }
	
	        return {
	            isInside : isInside,
	            isOutside : isOutside,
	            getTextWidth : getTextWidth,
	            getTextHeight : getTextHeight,
	
	            isInsidePath: isInsidePath,
	            isInsidePolygon: isInsidePolygon,
	            isInsideSector: isInsideSector,
	            isInsideCircle: isInsideCircle,
	            isInsideLine: isInsideLine,
	            isInsideRect: isInsideRect,
	            isInsidePolyline: isInsidePolyline,
	
	            isInsideCubicStroke: isInsideCubicStroke,
	            isInsideQuadraticStroke: isInsideQuadraticStroke
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 曲线辅助模块
	 * @module zrender/tool/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	    var vector = __webpack_require__(178);
	
	    'use strict';
	
	    var EPSILON = 1e-4;
	
	    var THREE_SQRT = Math.sqrt(3);
	    var ONE_THIRD = 1 / 3;
	
	    // 临时变量
	    var _v0 = vector.create();
	    var _v1 = vector.create();
	    var _v2 = vector.create();
	    // var _v3 = vector.create();
	
	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /*
	    function evalCubicCoeff(a, b, c, d, t) {
	        return ((a * t + b) * t + c) * t + d;
	    }
	    */
	
	    /** 
	     * 计算三次贝塞尔值
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p0 + 3 * t * p1)
	             + t * t * (t * p3 + 3 * onet * p2);
	    }
	
	    /** 
	     * 计算三次贝塞尔导数值
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (
	            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet
	            + (p3 - p2) * t * t
	        );
	    }
	
	    /**
	     * 计算三次贝塞尔方程根，使用盛金公式
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} val
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function cubicRootAt(p0, p1, p2, p3, val, roots) {
	        // Evaluate roots of cubic functions
	        var a = p3 + 3 * (p1 - p2) - p0;
	        var b = 3 * (p2 - p1 * 2 + p0);
	        var c = 3 * (p1  - p0);
	        var d = p0 - val;
	
	        var A = b * b - 3 * a * c;
	        var B = b * c - 9 * a * d;
	        var C = c * c - 3 * b * d;
	
	        var n = 0;
	
	        if (isAroundZero(A) && isAroundZero(B)) {
	            if (isAroundZero(b)) {
	                roots[0] = 0;
	            }
	            else {
	                var t1 = -c / b;  //t1, t2, t3, b is not zero
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = B * B - 4 * A * C;
	
	            if (isAroundZero(disc)) {
	                var K = B / A;
	                var t1 = -b / a + K;  // t1, a is not zero
	                var t2 = -K / 2;  // t2, t3
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = Math.sqrt(disc);
	                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	                if (Y1 < 0) {
	                    Y1 = -Math.pow(-Y1, ONE_THIRD);
	                }
	                else {
	                    Y1 = Math.pow(Y1, ONE_THIRD);
	                }
	                if (Y2 < 0) {
	                    Y2 = -Math.pow(-Y2, ONE_THIRD);
	                }
	                else {
	                    Y2 = Math.pow(Y2, ONE_THIRD);
	                }
	                var t1 = (-b - (Y1 + Y2)) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else {
	                var T = (2 * A * b - 3 * a * B) / (2 * Math.sqrt(A * A * A));
	                var theta = Math.acos(T) / 3;
	                var ASqrt = Math.sqrt(A);
	                var tmp = Math.cos(theta);
	                
	                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	                if (t3 >= 0 && t3 <= 1) {
	                    roots[n++] = t3;
	                }
	            }
	        }
	        return n;
	    }
	
	    /**
	     * 计算三次贝塞尔方程极限值的位置
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {Array.<number>} extrema
	     * @return {number} 有效数目
	     */
	    function cubicExtrema(p0, p1, p2, p3, extrema) {
	        var b = 6 * p2 - 12 * p1 + 6 * p0;
	        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	        var c = 3 * p1 - 3 * p0;
	
	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <=1) {
	                    extrema[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                extrema[0] = -b / (2 * a);
	            }
	            else if (disc > 0) {
	                var discSqrt = Math.sqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    extrema[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }
	
	    /**
	     * 细分三次贝塞尔曲线
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function cubicSubdivide(p0, p1, p2, p3, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p23 = (p3 - p2) * t + p2;
	
	        var p012 = (p12 - p01) * t + p01;
	        var p123 = (p23 - p12) * t + p12;
	
	        var p0123 = (p123 - p012) * t + p012;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        out[3] = p0123;
	        // Seg1
	        out[4] = p0123;
	        out[5] = p123;
	        out[6] = p23;
	        out[7] = p3;
	    }
	
	    /**
	     * 投射点到三次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} [out] 投射点
	     * @return {number}
	     */
	    function cubicProjectPoint(
	        x0, y0, x1, y1, x2, y2, x3, y3,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	
	        _v0[0] = x;
	        _v0[1] = y;
	
	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	            var d1 = vector.distSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;
	
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	            _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	
	            var d1 = vector.distSquare(_v1, _v0);
	
	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = cubicAt(x0, x1, x2, x3, next);
	                _v2[1] = cubicAt(y0, y1, y2, y3, next);
	                var d2 = vector.distSquare(_v2, _v0);
	
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = cubicAt(x0, x1, x2, x3, t);
	            out[1] = cubicAt(y0, y1, y2, y3, t);   
	        }
	        // console.log(interval, i);
	        return Math.sqrt(d);
	    }
	
	    /**
	     * 计算二次方贝塞尔值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	    }
	
	    /**
	     * 计算二次方贝塞尔导数值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticDerivativeAt(p0, p1, p2, t) {
	        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	    }
	
	    /**
	     * 计算二次方贝塞尔方程根
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function quadraticRootAt(p0, p1, p2, val, roots) {
	        var a = p0 - 2 * p1 + p2;
	        var b = 2 * (p1 - p0);
	        var c = p0 - val;
	
	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                var t1 = -b / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = Math.sqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }
	
	    /**
	     * 计算二次贝塞尔方程极限值
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @return {number}
	     */
	    function quadraticExtremum(p0, p1, p2) {
	        var divider = p0 + p2 - 2 * p1;
	        if (divider === 0) {
	            // p1 is center of p0 and p2 
	            return 0.5;
	        }
	        else {
	            return (p0 - p1) / divider;
	        }
	    }
	
	    /**
	     * 细分二次贝塞尔曲线
	     * @memberOf module:zrender/tool/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function quadraticSubdivide(p0, p1, p2, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p012 = (p12 - p01) * t + p01;
	
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	
	        // Seg1
	        out[3] = p012;
	        out[4] = p12;
	        out[5] = p2;
	    }
	
	    /**
	     * 投射点到二次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} out 投射点
	     * @return {number}
	     */
	    function quadraticProjectPoint(
	        x0, y0, x1, y1, x2, y2,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	
	        _v0[0] = x;
	        _v0[1] = y;
	
	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = quadraticAt(x0, x1, x2, _t);
	            _v1[1] = quadraticAt(y0, y1, y2, _t);
	            var d1 = vector.distSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;
	
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = quadraticAt(x0, x1, x2, prev);
	            _v1[1] = quadraticAt(y0, y1, y2, prev);
	
	            var d1 = vector.distSquare(_v1, _v0);
	
	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = quadraticAt(x0, x1, x2, next);
	                _v2[1] = quadraticAt(y0, y1, y2, next);
	                var d2 = vector.distSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = quadraticAt(x0, x1, x2, t);
	            out[1] = quadraticAt(y0, y1, y2, t);   
	        }
	        // console.log(interval, i);
	        return Math.sqrt(d);
	    }
	
	    return {
	
	        cubicAt: cubicAt,
	
	        cubicDerivativeAt: cubicDerivativeAt,
	
	        cubicRootAt: cubicRootAt,
	
	        cubicExtrema: cubicExtrema,
	
	        cubicSubdivide: cubicSubdivide,
	
	        cubicProjectPoint: cubicProjectPoint,
	
	        quadraticAt: quadraticAt,
	
	        quadraticDerivativeAt: quadraticDerivativeAt,
	
	        quadraticRootAt: quadraticRootAt,
	
	        quadraticExtremum: quadraticExtremum,
	
	        quadraticSubdivide: quadraticSubdivide,
	
	        quadraticProjectPoint: quadraticProjectPoint
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * shape基类
	 * @module zrender/shape/Base
	 * @author  Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *          errorrik (errorrik@gmail.com)
	 */
	
	/**
	 * @typedef {Object} IBaseShapeStyle
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	
	/**
	 * @typedef {Object} module:zrender/shape/Base~IBoundingRect
	 * @property {number} x 左上角顶点x轴坐标 
	 * @property {number} y 左上角顶点y轴坐标
	 * @property {number} width 包围盒矩形宽度
	 * @property {number} height 包围盒矩形高度
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        var vmlCanvasManager = window['G_vmlCanvasManager'];
	
	        var matrix = __webpack_require__(179);
	        var guid = __webpack_require__(176);
	        var util = __webpack_require__(168);
	        var log = __webpack_require__(174);
	
	        var Transformable = __webpack_require__(186);
	        var Eventful = __webpack_require__(171);
	
	        function _fillText(ctx, text, x, y, textFont, textAlign, textBaseline) {
	            if (textFont) {
	                ctx.font = textFont;
	            }
	            ctx.textAlign = textAlign;
	            ctx.textBaseline = textBaseline;
	            var rect = _getTextRect(
	                text, x, y, textFont, textAlign, textBaseline
	            );
	            
	            text = (text + '').split('\n');
	            var lineHeight = __webpack_require__(183).getTextHeight('国', textFont);
	            
	            switch (textBaseline) {
	                case 'top':
	                    y = rect.y;
	                    break;
	                case 'bottom':
	                    y = rect.y + lineHeight;
	                    break;
	                default:
	                    y = rect.y + lineHeight / 2;
	            }
	            
	            for (var i = 0, l = text.length; i < l; i++) {
	                ctx.fillText(text[i], x, y);
	                y += lineHeight;
	            }
	        }
	
	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @inner
	         * @param {string} text
	         * @param {number} x
	         * @param {number} y
	         * @param {string} textFont
	         * @param {string} textAlign
	         * @param {string} textBaseline
	         */
	        function _getTextRect(text, x, y, textFont, textAlign, textBaseline) {
	            var area = __webpack_require__(183);
	            var width = area.getTextWidth(text, textFont);
	            var lineHeight = area.getTextHeight('国', textFont);
	            
	            text = (text + '').split('\n');
	            
	            switch (textAlign) {
	                case 'end':
	                case 'right':
	                    x -= width;
	                    break;
	                case 'center':
	                    x -= (width / 2);
	                    break;
	            }
	
	            switch (textBaseline) {
	                case 'top':
	                    break;
	                case 'bottom':
	                    y -= lineHeight * text.length;
	                    break;
	                default:
	                    y -= lineHeight * text.length / 2;
	            }
	
	            return {
	                x : x,
	                y : y,
	                width : width,
	                height : lineHeight * text.length
	            };
	        }
	
	        /**
	         * @alias module:zrender/shape/Base
	         * @constructor
	         * @extends module:zrender/mixin/Transformable
	         * @extends module:zrender/mixin/Eventful
	         * @param {Object} options 关于shape的配置项，可以是shape的自有属性，也可以是自定义的属性。
	         */
	        var Base = function(options) {
	            
	            options = options || {};
	            
	            /**
	             * Shape id, 全局唯一
	             * @type {string}
	             */
	            this.id = options.id || guid();
	
	            for (var key in options) {
	                this[key] = options[key];
	            }
	
	            /**
	             * 基础绘制样式
	             * @type {module:zrender/shape/Base~IBaseShapeStyle}
	             */
	            this.style = this.style || {};
	
	            /**
	             * 高亮样式
	             * @type {module:zrender/shape/Base~IBaseShapeStyle}
	             */
	            this.highlightStyle = this.highlightStyle || null;
	
	            /**
	             * 父节点
	             * @readonly
	             * @type {module:zrender/Group}
	             * @default null
	             */
	            this.parent = null;
	
	            this.__dirty = true;
	
	            this.__clipShapes = [];
	
	            Transformable.call(this);
	            Eventful.call(this);
	        };
	        /**
	         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	         * @name module:zrender/shape/Base#invisible
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.invisible = false;
	
	        /**
	         * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	         * @name module:zrender/shape/Base#ignore
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.ignore = false;
	
	        /**
	         * z层level，决定绘画在哪层canvas中
	         * @name module:zrender/shape/Base#zlevel
	         * @type {number}
	         * @default 0
	         */
	        Base.prototype.zlevel = 0;
	
	        /**
	         * 是否可拖拽
	         * @name module:zrender/shape/Base#draggable
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.draggable = false;
	
	        /**
	         * 是否可点击
	         * @name module:zrender/shape/Base#clickable
	         * @type {boolean}
	         * @default false
	         */
	        Base.prototype.clickable = false;
	
	        /**
	         * 是否可以hover
	         * @name module:zrender/shape/Base#hoverable
	         * @type {boolean}
	         * @default true
	         */
	        Base.prototype.hoverable = true;
	        
	        /**
	         * z值，跟zlevel一样影响shape绘制的前后顺序，z值大的shape会覆盖在z值小的上面，
	         * 但是并不会创建新的canvas，所以优先级低于zlevel，而且频繁改动的开销比zlevel小很多。
	         * 
	         * @name module:zrender/shape/Base#z
	         * @type {number}
	         * @default 0
	         */
	        Base.prototype.z = 0;
	
	        /**
	         * 绘制图形
	         * 
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {boolean} [isHighlight=false] 是否使用高亮属性
	         * @param {Function} [updateCallback]
	         *        需要异步加载资源的shape可以通过这个callback(e), 
	         *        让painter更新视图，base.brush没用，需要的话重载brush
	         */
	        Base.prototype.brush = function (ctx, isHighlight) {
	
	            var style = this.beforeBrush(ctx, isHighlight);
	
	            ctx.beginPath();
	            this.buildPath(ctx, style);
	
	            switch (style.brushType) {
	                /* jshint ignore:start */
	                case 'both':
	                    ctx.fill();
	                case 'stroke':
	                    style.lineWidth > 0 && ctx.stroke();
	                    break;
	                /* jshint ignore:end */
	                default:
	                    ctx.fill();
	            }
	            
	            this.drawText(ctx, style, this.style);
	
	            this.afterBrush(ctx);
	        };
	
	        /**
	         * 具体绘制操作前的一些公共操作
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {boolean} [isHighlight=false] 是否使用高亮属性
	         * @return {Object} 处理后的样式
	         */
	        Base.prototype.beforeBrush = function (ctx, isHighlight) {
	            var style = this.style;
	            
	            if (this.brushTypeOnly) {
	                style.brushType = this.brushTypeOnly;
	            }
	
	            if (isHighlight) {
	                // 根据style扩展默认高亮样式
	                style = this.getHighlightStyle(
	                    style,
	                    this.highlightStyle || {},
	                    this.brushTypeOnly
	                );
	            }
	
	            if (this.brushTypeOnly == 'stroke') {
	                style.strokeColor = style.strokeColor || style.color;
	            }
	
	            ctx.save();
	
	            this.doClip(ctx);
	
	            this.setContext(ctx, style);
	
	            // 设置transform
	            this.setTransform(ctx);
	
	            return style;
	        };
	
	        /**
	         * 绘制后的处理
	         * @param {CanvasRenderingContext2D} ctx
	         */
	        Base.prototype.afterBrush = function (ctx) {
	            ctx.restore();
	        };
	
	        var STYLE_CTX_MAP = [
	            [ 'color', 'fillStyle' ],
	            [ 'strokeColor', 'strokeStyle' ],
	            [ 'opacity', 'globalAlpha' ],
	            [ 'lineCap', 'lineCap' ],
	            [ 'lineJoin', 'lineJoin' ],
	            [ 'miterLimit', 'miterLimit' ],
	            [ 'lineWidth', 'lineWidth' ],
	            [ 'shadowBlur', 'shadowBlur' ],
	            [ 'shadowColor', 'shadowColor' ],
	            [ 'shadowOffsetX', 'shadowOffsetX' ],
	            [ 'shadowOffsetY', 'shadowOffsetY' ]
	        ];
	
	        /**
	         * 设置 fillStyle, strokeStyle, shadow 等通用绘制样式
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style
	         */
	        Base.prototype.setContext = function (ctx, style) {
	            for (var i = 0, len = STYLE_CTX_MAP.length; i < len; i++) {
	                var styleProp = STYLE_CTX_MAP[i][0];
	                var styleValue = style[styleProp];
	                var ctxProp = STYLE_CTX_MAP[i][1];
	
	                if (typeof styleValue != 'undefined') {
	                    ctx[ctxProp] = styleValue;
	                }
	            }
	        };
	
	        var clipShapeInvTransform = matrix.create();
	        Base.prototype.doClip = function (ctx) {
	            if (this.__clipShapes && !vmlCanvasManager) {
	                for (var i = 0; i < this.__clipShapes.length; i++) {
	                    var clipShape = this.__clipShapes[i];
	                    if (clipShape.needTransform) {
	                        var m = clipShape.transform;
	                        matrix.invert(clipShapeInvTransform, m);
	                        ctx.transform(
	                            m[0], m[1],
	                            m[2], m[3],
	                            m[4], m[5]
	                        );
	                    }
	                    ctx.beginPath();
	                    clipShape.buildPath(ctx, clipShape.style);
	                    ctx.clip();
	                    // Transform back
	                    if (clipShape.needTransform) {
	                        var m = clipShapeInvTransform;
	                        ctx.transform(
	                            m[0], m[1],
	                            m[2], m[3],
	                            m[4], m[5]
	                        );
	                    }
	                }
	            }
	        };
	    
	        /**
	         * 根据默认样式扩展高亮样式
	         * 
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style 默认样式
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} highlightStyle 高亮样式
	         * @param {string} brushTypeOnly
	         */
	        Base.prototype.getHighlightStyle = function (style, highlightStyle, brushTypeOnly) {
	            var newStyle = {};
	            for (var k in style) {
	                newStyle[k] = style[k];
	            }
	
	            var color = __webpack_require__(187);
	            var highlightColor = color.getHighlightColor();
	            // 根据highlightStyle扩展
	            if (style.brushType != 'stroke') {
	                // 带填充则用高亮色加粗边线
	                newStyle.strokeColor = highlightColor;
	                newStyle.lineWidth = (style.lineWidth || 1)
	                                      + this.getHighlightZoom();
	                newStyle.brushType = 'both';
	            }
	            else {
	                if (brushTypeOnly != 'stroke') {
	                    // 描边型的则用原色加工高亮
	                    newStyle.strokeColor = highlightColor;
	                    newStyle.lineWidth = (style.lineWidth || 1)
	                                          + this.getHighlightZoom();
	                } 
	                else {
	                    // 线型的则用原色加工高亮
	                    newStyle.strokeColor = highlightStyle.strokeColor
	                                           || color.mix(
	                                                 style.strokeColor,
	                                                 color.toRGB(highlightColor)
	                                              );
	                }
	            }
	
	            // 可自定义覆盖默认值
	            for (var k in highlightStyle) {
	                if (typeof highlightStyle[k] != 'undefined') {
	                    newStyle[k] = highlightStyle[k];
	                }
	            }
	
	            return newStyle;
	        };
	
	        // 高亮放大效果参数
	        // 当前统一设置为6，如有需要差异设置，通过this.type判断实例类型
	        Base.prototype.getHighlightZoom = function () {
	            return this.type != 'text' ? 6 : 2;
	        };
	
	        /**
	         * 移动位置
	         * @param {number} dx 横坐标变化
	         * @param {number} dy 纵坐标变化
	         */
	        Base.prototype.drift = function (dx, dy) {
	            this.position[0] += dx;
	            this.position[1] += dy;
	        };
	
	        /**
	         * 构建绘制的Path
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style
	         */
	        Base.prototype.buildPath = function (ctx, style) {
	            log('buildPath not implemented in ' + this.type);
	        };
	
	        /**
	         * 计算返回包围盒矩形
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style
	         * @return {module:zrender/shape/Base~IBoundingRect}
	         */
	        Base.prototype.getRect = function (style) {
	            log('getRect not implemented in ' + this.type);   
	        };
	        
	        /**
	         * 判断鼠标位置是否在图形内
	         * @param {number} x
	         * @param {number} y
	         * @return {boolean}
	         */
	        Base.prototype.isCover = function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];
	
	            // 快速预判并保留判断矩形
	            if (this.isCoverRect(x, y)) {
	                // 矩形内
	                return __webpack_require__(183).isInside(this, this.style, x, y);
	            }
	            
	            return false;
	        };
	
	        Base.prototype.isCoverRect = function (x, y) {
	            // 快速预判并保留判断矩形
	            var rect = this.style.__rect;
	            if (!rect) {
	                rect = this.style.__rect = this.getRect(this.style);
	            }
	            return x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height);
	        };
	
	        /**
	         * 绘制附加文本
	         * @param {CanvasRenderingContext2D} ctx
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} style 样式
	         * @param {module:zrender/shape/Base~IBaseShapeStyle} normalStyle 默认样式，用于定位文字显示
	         */
	        Base.prototype.drawText = function (ctx, style, normalStyle) {
	            if (typeof(style.text) == 'undefined' || style.text === false) {
	                return;
	            }
	            // 字体颜色策略
	            var textColor = style.textColor || style.color || style.strokeColor;
	            ctx.fillStyle = textColor;
	
	            // 文本与图形间空白间隙
	            var dd = 10;
	            var al;         // 文本水平对齐
	            var bl;         // 文本垂直对齐
	            var tx;         // 文本横坐标
	            var ty;         // 文本纵坐标
	
	            var textPosition = style.textPosition       // 用户定义
	                               || this.textPosition     // shape默认
	                               || 'top';                // 全局默认
	
	            switch (textPosition) {
	                case 'inside': 
	                case 'top': 
	                case 'bottom': 
	                case 'left': 
	                case 'right': 
	                    if (this.getRect) {
	                        var rect = (normalStyle || style).__rect
	                                   || this.getRect(normalStyle || style);
	
	                        switch (textPosition) {
	                            case 'inside':
	                                tx = rect.x + rect.width / 2;
	                                ty = rect.y + rect.height / 2;
	                                al = 'center';
	                                bl = 'middle';
	                                if (style.brushType != 'stroke'
	                                    && textColor == style.color
	                                ) {
	                                    ctx.fillStyle = '#fff';
	                                }
	                                break;
	                            case 'left':
	                                tx = rect.x - dd;
	                                ty = rect.y + rect.height / 2;
	                                al = 'end';
	                                bl = 'middle';
	                                break;
	                            case 'right':
	                                tx = rect.x + rect.width + dd;
	                                ty = rect.y + rect.height / 2;
	                                al = 'start';
	                                bl = 'middle';
	                                break;
	                            case 'top':
	                                tx = rect.x + rect.width / 2;
	                                ty = rect.y - dd;
	                                al = 'center';
	                                bl = 'bottom';
	                                break;
	                            case 'bottom':
	                                tx = rect.x + rect.width / 2;
	                                ty = rect.y + rect.height + dd;
	                                al = 'center';
	                                bl = 'top';
	                                break;
	                        }
	                    }
	                    break;
	                case 'start':
	                case 'end':
	                    var pointList = style.pointList
	                                    || [
	                                        [style.xStart || 0, style.yStart || 0],
	                                        [style.xEnd || 0, style.yEnd || 0]
	                                    ];
	                    var length = pointList.length;
	                    if (length < 2) {
	                        // 少于2个点就不画了~
	                        return;
	                    }
	                    var xStart;
	                    var xEnd;
	                    var yStart;
	                    var yEnd;
	                    switch (textPosition) {
	                        case 'start':
	                            xStart = pointList[1][0];
	                            xEnd = pointList[0][0];
	                            yStart = pointList[1][1];
	                            yEnd = pointList[0][1];
	                            break;
	                        case 'end':
	                            xStart = pointList[length - 2][0];
	                            xEnd = pointList[length - 1][0];
	                            yStart = pointList[length - 2][1];
	                            yEnd = pointList[length - 1][1];
	                            break;
	                    }
	                    tx = xEnd;
	                    ty = yEnd;
	                    
	                    var angle = Math.atan((yStart - yEnd) / (xEnd - xStart)) / Math.PI * 180;
	                    if ((xEnd - xStart) < 0) {
	                        angle += 180;
	                    }
	                    else if ((yStart - yEnd) < 0) {
	                        angle += 360;
	                    }
	                    
	                    dd = 5;
	                    if (angle >= 30 && angle <= 150) {
	                        al = 'center';
	                        bl = 'bottom';
	                        ty -= dd;
	                    }
	                    else if (angle > 150 && angle < 210) {
	                        al = 'right';
	                        bl = 'middle';
	                        tx -= dd;
	                    }
	                    else if (angle >= 210 && angle <= 330) {
	                        al = 'center';
	                        bl = 'top';
	                        ty += dd;
	                    }
	                    else {
	                        al = 'left';
	                        bl = 'middle';
	                        tx += dd;
	                    }
	                    break;
	                case 'specific':
	                    tx = style.textX || 0;
	                    ty = style.textY || 0;
	                    al = 'start';
	                    bl = 'middle';
	                    break;
	            }
	
	            if (tx != null && ty != null) {
	                _fillText(
	                    ctx,
	                    style.text, 
	                    tx, ty, 
	                    style.textFont,
	                    style.textAlign || al,
	                    style.textBaseline || bl
	                );
	            }
	        };
	
	        Base.prototype.modSelf = function() {
	            this.__dirty = true;
	            if (this.style) {
	                this.style.__rect = null;
	            }
	            if (this.highlightStyle) {
	                this.highlightStyle.__rect = null;
	            }
	        };
	
	        /**
	         * 图形是否会触发事件
	         * @return {boolean}
	         */
	        // TODO, 通过 bind 绑定的事件
	        Base.prototype.isSilent = function () {
	            return !(
	                this.hoverable || this.draggable || this.clickable
	                || this.onmousemove || this.onmouseover || this.onmouseout
	                || this.onmousedown || this.onmouseup || this.onclick
	                || this.ondragenter || this.ondragover || this.ondragleave
	                || this.ondrop
	            );
	        };
	
	        util.merge(Base.prototype, Transformable.prototype, true);
	        util.merge(Base.prototype, Eventful.prototype, true);
	
	        return Base;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    'use strict';
	
	    var matrix = __webpack_require__(179);
	    var vector = __webpack_require__(178);
	    var origin = [0, 0];
	
	    var mTranslate = matrix.translate;
	
	    var EPSILON = 5e-5;
	
	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	
	    /**
	     * @alias module:zrender/mixin/Transformable
	     * @constructor
	     */
	    var Transformable = function () {
	
	        if (!this.position) {
	            /**
	             * 平移
	             * @type {Array.<number>}
	             * @default [0, 0]
	             */
	            this.position = [ 0, 0 ];
	        }
	        if (typeof(this.rotation) == 'undefined') {
	            /**
	             * 旋转，可以通过数组二三项指定旋转的原点
	             * @type {Array.<number>}
	             * @default [0, 0, 0]
	             */
	            this.rotation = [ 0, 0, 0 ];
	        }
	        if (!this.scale) {
	            /**
	             * 缩放，可以通过数组三四项指定缩放的原点
	             * @type {Array.<number>}
	             * @default [1, 1, 0, 0]
	             */
	            this.scale = [ 1, 1, 0, 0 ];
	        }
	
	        this.needLocalTransform = false;
	
	        /**
	         * 是否有坐标变换
	         * @type {boolean}
	         * @readOnly
	         */
	        this.needTransform = false;
	    };
	
	    Transformable.prototype = {
	        
	        constructor: Transformable,
	
	        updateNeedTransform: function () {
	            this.needLocalTransform = isNotAroundZero(this.rotation[0])
	                || isNotAroundZero(this.position[0])
	                || isNotAroundZero(this.position[1])
	                || isNotAroundZero(this.scale[0] - 1)
	                || isNotAroundZero(this.scale[1] - 1);
	        },
	
	        /**
	         * 判断是否需要有坐标变换，更新needTransform属性。
	         * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	         */
	        updateTransform: function () {
	            
	            this.updateNeedTransform();
	
	            var parentHasTransform = this.parent && this.parent.needTransform;
	            this.needTransform = this.needLocalTransform || parentHasTransform;
	            
	            if (!this.needTransform) {
	                return;
	            }
	
	            var m = this.transform || matrix.create();
	            matrix.identity(m);
	
	            if (this.needLocalTransform) {
	                var scale = this.scale;
	                if (
	                    isNotAroundZero(scale[0])
	                 || isNotAroundZero(scale[1])
	                ) {
	                    origin[0] = -scale[2] || 0;
	                    origin[1] = -scale[3] || 0;
	                    var haveOrigin = isNotAroundZero(origin[0])
	                                  || isNotAroundZero(origin[1]);
	                    if (haveOrigin) {
	                        mTranslate(m, m, origin);
	                    }
	                    matrix.scale(m, m, scale);
	                    if (haveOrigin) {
	                        origin[0] = -origin[0];
	                        origin[1] = -origin[1];
	                        mTranslate(m, m, origin);
	                    }
	                }
	
	                if (this.rotation instanceof Array) {
	                    if (this.rotation[0] !== 0) {
	                        origin[0] = -this.rotation[1] || 0;
	                        origin[1] = -this.rotation[2] || 0;
	                        var haveOrigin = isNotAroundZero(origin[0])
	                                      || isNotAroundZero(origin[1]);
	                        if (haveOrigin) {
	                            mTranslate(m, m, origin);
	                        }
	                        matrix.rotate(m, m, this.rotation[0]);
	                        if (haveOrigin) {
	                            origin[0] = -origin[0];
	                            origin[1] = -origin[1];
	                            mTranslate(m, m, origin);
	                        }
	                    }
	                }
	                else {
	                    if (this.rotation !== 0) {
	                        matrix.rotate(m, m, this.rotation);
	                    }
	                }
	
	                if (
	                    isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1])
	                ) {
	                    mTranslate(m, m, this.position);
	                }
	            }
	
	            // 应用父节点变换
	            if (parentHasTransform) {
	                if (this.needLocalTransform) {
	                    matrix.mul(m, this.parent.transform, m);
	                }
	                else {
	                    matrix.copy(m, this.parent.transform);
	                }
	            }
	            // 保存这个变换矩阵
	            this.transform = m;
	
	            this.invTransform = this.invTransform || matrix.create();
	            matrix.invert(this.invTransform, m);
	        },
	        /**
	         * 将自己的transform应用到context上
	         * @param {Context2D} ctx
	         */
	        setTransform: function (ctx) {
	            if (this.needTransform) {
	                var m = this.transform;
	                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            }
	        },
	        /**
	         * 设置图形的朝向
	         * @param  {Array.<number>|Float32Array} target
	         * @method
	         */
	        lookAt: (function () {
	            var v = vector.create();
	            return function(target) {
	                if (!this.transform) {
	                    this.transform = matrix.create();
	                }
	                var m = this.transform;
	                vector.sub(v, target, this.position);
	                if (isAroundZero(v[0]) && isAroundZero(v[1])) {
	                    return;
	                }
	                vector.normalize(v, v);
	                var scale = this.scale;
	                // Y Axis
	                // TODO Scale origin ?
	                m[2] = v[0] * scale[1];
	                m[3] = v[1] * scale[1];
	                // X Axis
	                m[0] = v[1] * scale[0];
	                m[1] = -v[0] * scale[0];
	                // Position
	                m[4] = this.position[0];
	                m[5] = this.position[1];
	
	                this.decomposeTransform();
	            };
	        })(),
	        /**
	         * 分解`transform`矩阵到`position`, `rotation`, `scale`
	         */
	        decomposeTransform: function () {
	            if (!this.transform) {
	                return;
	            }
	            var m = this.transform;
	            var sx = m[0] * m[0] + m[1] * m[1];
	            var position = this.position;
	            var scale = this.scale;
	            var rotation = this.rotation;
	            if (isNotAroundZero(sx - 1)) {
	                sx = Math.sqrt(sx);
	            }
	            var sy = m[2] * m[2] + m[3] * m[3];
	            if (isNotAroundZero(sy - 1)) {
	                sy = Math.sqrt(sy);
	            }
	            position[0] = m[4];
	            position[1] = m[5];
	            scale[0] = sx;
	            scale[1] = sy;
	            scale[2] = scale[3] = 0;
	            rotation[0] = Math.atan2(-m[1] / sy, m[0] / sx);
	            rotation[1] = rotation[2] = 0;
	        },
	
	        /**
	         * 变换坐标位置到 shape 的局部坐标空间
	         * @method
	         * @param {number} x
	         * @param {number} y
	         * @return {Array.<number>}
	         */
	        transformCoordToLocal: function (x, y) {
	            var v2 = [x, y];
	            if (this.needTransform && this.invTransform) {
	                vector.applyTransform(v2, v2, this.invTransform);
	            }
	            return v2;
	        }
	    };
	
	    return Transformable;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 颜色辅助模块
	 * @module zrender/tool/color
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	    var util = __webpack_require__(168);
	
	    var _ctx;
	
	    // Color palette is an array containing the default colors for the chart's
	    // series.
	    // When all colors are used, new colors are selected from the start again.
	    // Defaults to:
	    // 默认色板
	    var palette = [
	        '#ff9277', ' #dddd00', ' #ffc877', ' #bbe3ff', ' #d5ffbb',
	        '#bbbbff', ' #ddb000', ' #b0dd00', ' #e2bbff', ' #ffbbe3',
	        '#ff7777', ' #ff9900', ' #83dd00', ' #77e3ff', ' #778fff',
	        '#c877ff', ' #ff77ab', ' #ff6600', ' #aa8800', ' #77c7ff',
	        '#ad77ff', ' #ff77ff', ' #dd0083', ' #777700', ' #00aa00',
	        '#0088aa', ' #8400dd', ' #aa0088', ' #dd0000', ' #772e00'
	    ];
	    var _palette = palette;
	
	    var highlightColor = 'rgba(255,255,0,0.5)';
	    var _highlightColor = highlightColor;
	
	    // 颜色格式
	    /*jshint maxlen: 330 */
	    var colorRegExp = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i;
	
	    var _nameColors = {
	        aliceblue : '#f0f8ff',
	        antiquewhite : '#faebd7',
	        aqua : '#0ff',
	        aquamarine : '#7fffd4',
	        azure : '#f0ffff',
	        beige : '#f5f5dc',
	        bisque : '#ffe4c4',
	        black : '#000',
	        blanchedalmond : '#ffebcd',
	        blue : '#00f',
	        blueviolet : '#8a2be2',
	        brown : '#a52a2a',
	        burlywood : '#deb887',
	        cadetblue : '#5f9ea0',
	        chartreuse : '#7fff00',
	        chocolate : '#d2691e',
	        coral : '#ff7f50',
	        cornflowerblue : '#6495ed',
	        cornsilk : '#fff8dc',
	        crimson : '#dc143c',
	        cyan : '#0ff',
	        darkblue : '#00008b',
	        darkcyan : '#008b8b',
	        darkgoldenrod : '#b8860b',
	        darkgray : '#a9a9a9',
	        darkgrey : '#a9a9a9',
	        darkgreen : '#006400',
	        darkkhaki : '#bdb76b',
	        darkmagenta : '#8b008b',
	        darkolivegreen : '#556b2f',
	        darkorange : '#ff8c00',
	        darkorchid : '#9932cc',
	        darkred : '#8b0000',
	        darksalmon : '#e9967a',
	        darkseagreen : '#8fbc8f',
	        darkslateblue : '#483d8b',
	        darkslategray : '#2f4f4f',
	        darkslategrey : '#2f4f4f',
	        darkturquoise : '#00ced1',
	        darkviolet : '#9400d3',
	        deeppink : '#ff1493',
	        deepskyblue : '#00bfff',
	        dimgray : '#696969',
	        dimgrey : '#696969',
	        dodgerblue : '#1e90ff',
	        firebrick : '#b22222',
	        floralwhite : '#fffaf0',
	        forestgreen : '#228b22',
	        fuchsia : '#f0f',
	        gainsboro : '#dcdcdc',
	        ghostwhite : '#f8f8ff',
	        gold : '#ffd700',
	        goldenrod : '#daa520',
	        gray : '#808080',
	        grey : '#808080',
	        green : '#008000',
	        greenyellow : '#adff2f',
	        honeydew : '#f0fff0',
	        hotpink : '#ff69b4',
	        indianred : '#cd5c5c',
	        indigo : '#4b0082',
	        ivory : '#fffff0',
	        khaki : '#f0e68c',
	        lavender : '#e6e6fa',
	        lavenderblush : '#fff0f5',
	        lawngreen : '#7cfc00',
	        lemonchiffon : '#fffacd',
	        lightblue : '#add8e6',
	        lightcoral : '#f08080',
	        lightcyan : '#e0ffff',
	        lightgoldenrodyellow : '#fafad2',
	        lightgray : '#d3d3d3',
	        lightgrey : '#d3d3d3',
	        lightgreen : '#90ee90',
	        lightpink : '#ffb6c1',
	        lightsalmon : '#ffa07a',
	        lightseagreen : '#20b2aa',
	        lightskyblue : '#87cefa',
	        lightslategray : '#789',
	        lightslategrey : '#789',
	        lightsteelblue : '#b0c4de',
	        lightyellow : '#ffffe0',
	        lime : '#0f0',
	        limegreen : '#32cd32',
	        linen : '#faf0e6',
	        magenta : '#f0f',
	        maroon : '#800000',
	        mediumaquamarine : '#66cdaa',
	        mediumblue : '#0000cd',
	        mediumorchid : '#ba55d3',
	        mediumpurple : '#9370d8',
	        mediumseagreen : '#3cb371',
	        mediumslateblue : '#7b68ee',
	        mediumspringgreen : '#00fa9a',
	        mediumturquoise : '#48d1cc',
	        mediumvioletred : '#c71585',
	        midnightblue : '#191970',
	        mintcream : '#f5fffa',
	        mistyrose : '#ffe4e1',
	        moccasin : '#ffe4b5',
	        navajowhite : '#ffdead',
	        navy : '#000080',
	        oldlace : '#fdf5e6',
	        olive : '#808000',
	        olivedrab : '#6b8e23',
	        orange : '#ffa500',
	        orangered : '#ff4500',
	        orchid : '#da70d6',
	        palegoldenrod : '#eee8aa',
	        palegreen : '#98fb98',
	        paleturquoise : '#afeeee',
	        palevioletred : '#d87093',
	        papayawhip : '#ffefd5',
	        peachpuff : '#ffdab9',
	        peru : '#cd853f',
	        pink : '#ffc0cb',
	        plum : '#dda0dd',
	        powderblue : '#b0e0e6',
	        purple : '#800080',
	        red : '#f00',
	        rosybrown : '#bc8f8f',
	        royalblue : '#4169e1',
	        saddlebrown : '#8b4513',
	        salmon : '#fa8072',
	        sandybrown : '#f4a460',
	        seagreen : '#2e8b57',
	        seashell : '#fff5ee',
	        sienna : '#a0522d',
	        silver : '#c0c0c0',
	        skyblue : '#87ceeb',
	        slateblue : '#6a5acd',
	        slategray : '#708090',
	        slategrey : '#708090',
	        snow : '#fffafa',
	        springgreen : '#00ff7f',
	        steelblue : '#4682b4',
	        tan : '#d2b48c',
	        teal : '#008080',
	        thistle : '#d8bfd8',
	        tomato : '#ff6347',
	        turquoise : '#40e0d0',
	        violet : '#ee82ee',
	        wheat : '#f5deb3',
	        white : '#fff',
	        whitesmoke : '#f5f5f5',
	        yellow : '#ff0',
	        yellowgreen : '#9acd32'
	    };
	
	    /**
	     * 自定义调色板
	     */
	    function customPalette(userPalete) {
	        palette = userPalete;
	    }
	
	    /**
	     * 复位默认色板
	     */
	    function resetPalette() {
	        palette = _palette;
	    }
	
	    /**
	     * 获取色板颜色
	     * @memberOf module:zrender/tool/color
	     * @param {number} idx 色板位置
	     * @param {Array.<string>} [userPalete] 自定义色板
	     * @return {string} 颜色
	     */
	    function getColor(idx, userPalete) {
	        idx = idx | 0;
	        userPalete = userPalete || palette;
	        return userPalete[idx % userPalete.length];
	    }
	
	    /**
	     * 自定义默认高亮颜色
	     */
	    function customHighlight(userHighlightColor) {
	        highlightColor = userHighlightColor;
	    }
	
	    /**
	     * 重置默认高亮颜色
	     */
	    function resetHighlight() {
	        _highlightColor = highlightColor;
	    }
	
	    /**
	     * 获取默认高亮颜色
	     */
	    function getHighlightColor() {
	        return highlightColor;
	    }
	
	    /**
	     * 径向渐变
	     * @memberOf module:zrender/tool/color
	     * @param {number} x0 渐变起点
	     * @param {number} y0
	     * @param {number} r0
	     * @param {number} x1 渐变终点
	     * @param {number} y1
	     * @param {number} r1
	     * @param {Array} colorList 颜色列表
	     * @return {CanvasGradient}
	     */
	    function getRadialGradient(x0, y0, r0, x1, y1, r1, colorList) {
	        if (!_ctx) {
	            _ctx = util.getContext();
	        }
	        var gradient = _ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
	        for (var i = 0, l = colorList.length; i < l; i++) {
	            gradient.addColorStop(colorList[i][0], colorList[i][1]);
	        }
	        gradient.__nonRecursion = true;
	        return gradient;
	    }
	
	    /**
	     * 线性渐变
	     * @param {Object} x0 渐变起点
	     * @param {Object} y0
	     * @param {Object} x1 渐变终点
	     * @param {Object} y1
	     * @param {Array} colorList 颜色列表
	     */
	    function getLinearGradient(x0, y0, x1, y1, colorList) {
	        if (!_ctx) {
	            _ctx = util.getContext();
	        }
	        var gradient = _ctx.createLinearGradient(x0, y0, x1, y1);
	        for (var i = 0, l = colorList.length; i < l; i++) {
	            gradient.addColorStop(colorList[i][0], colorList[i][1]);
	        }
	        gradient.__nonRecursion = true;
	        return gradient;
	    }
	
	    /**
	     * 获取两种颜色之间渐变颜色数组
	     * @param {color} start 起始颜色
	     * @param {color} end 结束颜色
	     * @param {number} step 渐变级数
	     * @return {Array}  颜色数组
	     */
	    function getStepColors(start, end, step) {
	        start = toRGBA(start);
	        end = toRGBA(end);
	        start = getData(start);
	        end = getData(end);
	
	        var colors = [];
	        var stepR = (end[0] - start[0]) / step;
	        var stepG = (end[1] - start[1]) / step;
	        var stepB = (end[2] - start[2]) / step;
	        var stepA = (end[3] - start[3]) / step;
	        // 生成颜色集合
	        // fix by linfeng 颜色堆积
	        for (var i = 0, r = start[0], g = start[1], b = start[2], a = start[3]; i < step; i++) {
	            colors[i] = toColor([
	                adjust(Math.floor(r), [ 0, 255 ]),
	                adjust(Math.floor(g), [ 0, 255 ]), 
	                adjust(Math.floor(b), [ 0, 255 ]),
	                a.toFixed(4) - 0
	            ],'rgba');
	            r += stepR;
	            g += stepG;
	            b += stepB;
	            a += stepA;
	        }
	        r = end[0];
	        g = end[1];
	        b = end[2];
	        a = end[3];
	        colors[i] = toColor([r, g, b, a], 'rgba');
	        return colors;
	    }
	
	    /**
	     * 获取指定级数的渐变颜色数组
	     * @memberOf module:zrender/tool/color
	     * @param {Array.<string>} colors 颜色组
	     * @param {number} [step=20] 渐变级数
	     * @return {Array.<string>}  颜色数组
	     */
	    function getGradientColors(colors, step) {
	        var ret = [];
	        var len = colors.length;
	        if (step === undefined) {
	            step = 20;
	        }
	        if (len === 1) {
	            ret = getStepColors(colors[0], colors[0], step);
	        }
	        else if (len > 1) {
	            for (var i = 0, n = len - 1; i < n; i++) {
	                var steps = getStepColors(colors[i], colors[i + 1], step);
	                if (i < n - 1) {
	                    steps.pop();
	                }
	                ret = ret.concat(steps);
	            }
	        }
	        return ret;
	    }
	
	    /**
	     * 颜色值数组转为指定格式颜色,例如:<br/>
	     * data = [60,20,20,0.1] format = 'rgba'
	     * 返回：rgba(60,20,20,0.1)
	     * @param {Array} data 颜色值数组
	     * @param {string} format 格式,默认rgb
	     * @return {string} 颜色
	     */
	    function toColor(data, format) {
	        format = format || 'rgb';
	        if (data && (data.length === 3 || data.length === 4)) {
	            data = map(data,
	                function(c) {
	                    return c > 1 ? Math.ceil(c) : c;
	                }
	            );
	
	            if (format.indexOf('hex') > -1) {
	                return '#' + ((1 << 24) + (data[0] << 16) + (data[1] << 8) + (+data[2])).toString(16).slice(1);
	            }
	            else if (format.indexOf('hs') > -1) {
	                var sx = map(data.slice(1, 3),
	                    function(c) {
	                        return c + '%';
	                    }
	                );
	                data[1] = sx[0];
	                data[2] = sx[1];
	            }
	
	            if (format.indexOf('a') > -1) {
	                if (data.length === 3) {
	                    data.push(1);
	                }
	                data[3] = adjust(data[3], [ 0, 1 ]);
	                return format + '(' + data.slice(0, 4).join(',') + ')';
	            }
	
	            return format + '(' + data.slice(0, 3).join(',') + ')';
	        }
	    }
	
	    /**
	     * 颜色字符串转换为rgba数组
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {Array.<number>} 颜色值数组
	     */
	    function toArray(color) {
	        color = trim(color);
	        if (color.indexOf('rgba') < 0) {
	            color = toRGBA(color);
	        }
	
	        var data = [];
	        var i = 0;
	        color.replace(/[\d.]+/g, function (n) {
	            if (i < 3) {
	                n = n | 0;
	            }
	            else {
	                // Alpha
	                n = +n;
	            }
	            data[i++] = n;
	        });
	        return data;
	    }
	
	    /**
	     * 颜色格式转化
	     *
	     * @param {string} color 颜色值数组
	     * @param {string} format 格式,默认rgb
	     * @return {string} 颜色
	     */
	    function convert(color, format) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        var data = getData(color);
	        var alpha = data[3];
	        if (typeof alpha === 'undefined') {
	            alpha = 1;
	        }
	
	        if (color.indexOf('hsb') > -1) {
	            data = _HSV_2_RGB(data);
	        }
	        else if (color.indexOf('hsl') > -1) {
	            data = _HSL_2_RGB(data);
	        }
	
	        if (format.indexOf('hsb') > -1 || format.indexOf('hsv') > -1) {
	            data = _RGB_2_HSB(data);
	        }
	        else if (format.indexOf('hsl') > -1) {
	            data = _RGB_2_HSL(data);
	        }
	
	        data[3] = alpha;
	
	        return toColor(data, format);
	    }
	
	    /**
	     * 转换为rgba格式的颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} rgba颜色，rgba(r,g,b,a)
	     */
	    function toRGBA(color) {
	        return convert(color, 'rgba');
	    }
	
	    /**
	     * 转换为rgb数字格式的颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} rgb颜色，rgb(0,0,0)格式
	     */
	    function toRGB(color) {
	        return convert(color, 'rgb');
	    }
	
	    /**
	     * 转换为16进制颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} 16进制颜色，#rrggbb格式
	     */
	    function toHex(color) {
	        return convert(color, 'hex');
	    }
	
	    /**
	     * 转换为HSV颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSVA颜色，hsva(h,s,v,a)
	     */
	    function toHSVA(color) {
	        return convert(color, 'hsva');
	    }
	
	    /**
	     * 转换为HSV颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSV颜色，hsv(h,s,v)
	     */
	    function toHSV(color) {
	        return convert(color, 'hsv');
	    }
	
	    /**
	     * 转换为HSBA颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSBA颜色，hsba(h,s,b,a)
	     */
	    function toHSBA(color) {
	        return convert(color, 'hsba');
	    }
	
	    /**
	     * 转换为HSB颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSB颜色，hsb(h,s,b)
	     */
	    function toHSB(color) {
	        return convert(color, 'hsb');
	    }
	
	    /**
	     * 转换为HSLA颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSLA颜色，hsla(h,s,l,a)
	     */
	    function toHSLA(color) {
	        return convert(color, 'hsla');
	    }
	
	    /**
	     * 转换为HSL颜色
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} HSL颜色，hsl(h,s,l)
	     */
	    function toHSL(color) {
	        return convert(color, 'hsl');
	    }
	
	    /**
	     * 转换颜色名
	     * 
	     * @param {string} color 颜色
	     * @return {string} 颜色名
	     */
	    function toName(color) {
	        for (var key in _nameColors) {
	            if (toHex(_nameColors[key]) === toHex(color)) {
	                return key;
	            }
	        }
	        return null;
	    }
	
	    /**
	     * 移除颜色中多余空格
	     * 
	     * @param {string} color 颜色
	     * @return {string} 无空格颜色
	     */
	    function trim(color) {
	        return String(color).replace(/\s+/g, '');
	    }
	
	    /**
	     * 颜色规范化
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} 规范化后的颜色
	     */
	    function normalize(color) {
	        // 颜色名
	        if (_nameColors[color]) {
	            color = _nameColors[color];
	        }
	        // 去掉空格
	        color = trim(color);
	        // hsv与hsb等价
	        color = color.replace(/hsv/i, 'hsb');
	        // rgb转为rrggbb
	        if (/^#[\da-f]{3}$/i.test(color)) {
	            color = parseInt(color.slice(1), 16);
	            var r = (color & 0xf00) << 8;
	            var g = (color & 0xf0) << 4;
	            var b = color & 0xf;
	
	            color = '#' + ((1 << 24) + (r << 4) + r + (g << 4) + g + (b << 4) + b).toString(16).slice(1);
	        }
	        // 或者使用以下正则替换，不过 chrome 下性能相对差点
	        // color = color.replace(/^#([\da-f])([\da-f])([\da-f])$/i, '#$1$1$2$2$3$3');
	        return color;
	    }
	
	    /**
	     * 颜色加深或减淡，当level>0加深，当level<0减淡
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @param {number} level 升降程度,取值区间[-1,1]
	     * @return {string} 加深或减淡后颜色值
	     */
	    function lift(color, level) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        var direct = level > 0 ? 1 : -1;
	        if (typeof level === 'undefined') {
	            level = 0;
	        }
	        level = Math.abs(level) > 1 ? 1 : Math.abs(level);
	        color = toRGB(color);
	        var data = getData(color);
	        for (var i = 0; i < 3; i++) {
	            if (direct === 1) {
	                data[i] = data[i] * (1 - level) | 0;
	            }
	            else {
	                data[i] = ((255 - data[i]) * level + data[i]) | 0;
	            }
	        }
	        return 'rgb(' + data.join(',') + ')';
	    }
	
	    /**
	     * 颜色翻转,[255-r,255-g,255-b,1-a]
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @return {string} 翻转颜色
	     */
	    function reverse(color) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        var data = getData(toRGBA(color));
	        data = map(data,
	            function(c) {
	                return 255 - c;
	            }
	        );
	        return toColor(data, 'rgb');
	    }
	
	    /**
	     * 简单两种颜色混合
	     * @memberOf module:zrender/tool/color
	     * @param {string} color1 第一种颜色
	     * @param {string} color2 第二种颜色
	     * @param {number} weight 混合权重[0-1]
	     * @return {string} 结果色,rgb(r,g,b)或rgba(r,g,b,a)
	     */
	    function mix(color1, color2, weight) {
	        if (!isCalculableColor(color1) || !isCalculableColor(color2)) {
	            return color1;
	        }
	        
	        if (typeof weight === 'undefined') {
	            weight = 0.5;
	        }
	        weight = 1 - adjust(weight, [ 0, 1 ]);
	
	        var w = weight * 2 - 1;
	        var data1 = getData(toRGBA(color1));
	        var data2 = getData(toRGBA(color2));
	
	        var d = data1[3] - data2[3];
	
	        var weight1 = (((w * d === -1) ? w : (w + d) / (1 + w * d)) + 1) / 2;
	        var weight2 = 1 - weight1;
	
	        var data = [];
	
	        for (var i = 0; i < 3; i++) {
	            data[i] = data1[i] * weight1 + data2[i] * weight2;
	        }
	
	        var alpha = data1[3] * weight + data2[3] * (1 - weight);
	        alpha = Math.max(0, Math.min(1, alpha));
	
	        if (data1[3] === 1 && data2[3] === 1) {// 不考虑透明度
	            return toColor(data, 'rgb');
	        }
	        data[3] = alpha;
	        return toColor(data, 'rgba');
	    }
	
	    /**
	     * 随机颜色
	     * 
	     * @return {string} 颜色值，#rrggbb格式
	     */
	    function random() {
	        return '#' + (Math.random().toString(16) + '0000').slice(2, 8);
	    }
	
	    /**
	     * 获取颜色值数组,返回值范围： <br/>
	     * RGB 范围[0-255] <br/>
	     * HSL/HSV/HSB 范围[0-1]<br/>
	     * A透明度范围[0-1]
	     * 支持格式：
	     * #rgb
	     * #rrggbb
	     * rgb(r,g,b)
	     * rgb(r%,g%,b%)
	     * rgba(r,g,b,a)
	     * hsb(h,s,b) // hsv与hsb等价
	     * hsb(h%,s%,b%)
	     * hsba(h,s,b,a)
	     * hsl(h,s,l)
	     * hsl(h%,s%,l%)
	     * hsla(h,s,l,a)
	     *
	     * @param {string} color 颜色
	     * @return {Array.<number>} 颜色值数组或null
	     */
	    function getData(color) {
	        color = normalize(color);
	        var r = color.match(colorRegExp);
	        if (r === null) {
	            throw new Error('The color format error'); // 颜色格式错误
	        }
	        var d;
	        var a;
	        var data = [];
	        var rgb;
	
	        if (r[2]) {
	            // #rrggbb
	            d = r[2].replace('#', '').split('');
	            rgb = [ d[0] + d[1], d[2] + d[3], d[4] + d[5] ];
	            data = map(rgb,
	                function(c) {
	                    return adjust(parseInt(c, 16), [ 0, 255 ]);
	                }
	            );
	
	        }
	        else if (r[4]) {
	            // rgb rgba
	            var rgba = (r[4]).split(',');
	            a = rgba[3];
	            rgb = rgba.slice(0, 3);
	            data = map(
	                rgb,
	                function(c) {
	                    c = Math.floor(
	                        c.indexOf('%') > 0 ? parseInt(c, 0) * 2.55 : c
	                    );
	                    return adjust(c, [ 0, 255 ]);
	                }
	            );
	
	            if (typeof a !== 'undefined') {
	                data.push(adjust(parseFloat(a), [ 0, 1 ]));
	            }
	        }
	        else if (r[5] || r[6]) {
	            // hsb hsba hsl hsla
	            var hsxa = (r[5] || r[6]).split(',');
	            var h = parseInt(hsxa[0], 0) / 360;
	            var s = hsxa[1];
	            var x = hsxa[2];
	            a = hsxa[3];
	            data = map([ s, x ],
	                function(c) {
	                    return adjust(parseFloat(c) / 100, [ 0, 1 ]);
	                }
	            );
	            data.unshift(h);
	            if (typeof a !== 'undefined') {
	                data.push(adjust(parseFloat(a), [ 0, 1 ]));
	            }
	        }
	        return data;
	    }
	
	    /**
	     * 设置颜色透明度
	     * @memberOf module:zrender/tool/color
	     * @param {string} color 颜色
	     * @param {number} a 透明度,区间[0,1]
	     * @return {string} rgba颜色值
	     */
	    function alpha(color, a) {
	        if (!isCalculableColor(color)) {
	            return color;
	        }
	        if (a === null) {
	            a = 1;
	        }
	        var data = getData(toRGBA(color));
	        data[3] = adjust(Number(a).toFixed(4), [ 0, 1 ]);
	
	        return toColor(data, 'rgba');
	    }
	
	    // 数组映射
	    function map(array, fun) {
	        if (typeof fun !== 'function') {
	            throw new TypeError();
	        }
	        var len = array ? array.length : 0;
	        for (var i = 0; i < len; i++) {
	            array[i] = fun(array[i]);
	        }
	        return array;
	    }
	
	    // 调整值区间
	    function adjust(value, region) {
	        // < to <= & > to >=
	        // modify by linzhifeng 2014-05-25 because -0 == 0
	        if (value <= region[0]) {
	            value = region[0];
	        }
	        else if (value >= region[1]) {
	            value = region[1];
	        }
	        return value;
	    }
	    
	    function isCalculableColor(color) {
	        return color instanceof Array || typeof color === 'string';
	    }
	
	    // 参见 http:// www.easyrgb.com/index.php?X=MATH
	    function _HSV_2_RGB(data) {
	        var H = data[0];
	        var S = data[1];
	        var V = data[2];
	        // HSV from 0 to 1
	        var R; 
	        var G;
	        var B;
	        if (S === 0) {
	            R = V * 255;
	            G = V * 255;
	            B = V * 255;
	        }
	        else {
	            var h = H * 6;
	            if (h === 6) {
	                h = 0;
	            }
	            var i = h | 0;
	            var v1 = V * (1 - S);
	            var v2 = V * (1 - S * (h - i));
	            var v3 = V * (1 - S * (1 - (h - i)));
	            var r = 0;
	            var g = 0;
	            var b = 0;
	
	            if (i === 0) {
	                r = V;
	                g = v3;
	                b = v1;
	            }
	            else if (i === 1) {
	                r = v2;
	                g = V;
	                b = v1;
	            }
	            else if (i === 2) {
	                r = v1;
	                g = V;
	                b = v3;
	            }
	            else if (i === 3) {
	                r = v1;
	                g = v2;
	                b = V;
	            }
	            else if (i === 4) {
	                r = v3;
	                g = v1;
	                b = V;
	            }
	            else {
	                r = V;
	                g = v1;
	                b = v2;
	            }
	
	            // RGB results from 0 to 255
	            R = r * 255;
	            G = g * 255;
	            B = b * 255;
	        }
	        return [ R, G, B ];
	    }
	
	    function _HSL_2_RGB(data) {
	        var H = data[0];
	        var S = data[1];
	        var L = data[2];
	        // HSL from 0 to 1
	        var R;
	        var G;
	        var B;
	        if (S === 0) {
	            R = L * 255;
	            G = L * 255;
	            B = L * 255;
	        }
	        else {
	            var v2;
	            if (L < 0.5) {
	                v2 = L * (1 + S);
	            }
	            else {
	                v2 = (L + S) - (S * L);
	            }
	
	            var v1 = 2 * L - v2;
	
	            R = 255 * _HUE_2_RGB(v1, v2, H + (1 / 3));
	            G = 255 * _HUE_2_RGB(v1, v2, H);
	            B = 255 * _HUE_2_RGB(v1, v2, H - (1 / 3));
	        }
	        return [ R, G, B ];
	    }
	
	    function _HUE_2_RGB(v1, v2, vH) {
	        if (vH < 0) {
	            vH += 1;
	        }
	        if (vH > 1) {
	            vH -= 1;
	        }
	        if ((6 * vH) < 1) {
	            return (v1 + (v2 - v1) * 6 * vH);
	        }
	        if ((2 * vH) < 1) {
	            return (v2);
	        }
	        if ((3 * vH) < 2) {
	            return (v1 + (v2 - v1) * ((2 / 3) - vH) * 6);
	        }
	        return v1;
	    }
	
	    function _RGB_2_HSB(data) {
	        // RGB from 0 to 255
	        var R = (data[0] / 255);
	        var G = (data[1] / 255);
	        var B = (data[2] / 255);
	
	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value
	        var V = vMax;
	        var H;
	        var S;
	
	        // HSV results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            S = delta / vMax;
	
	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;
	
	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }
	
	            if (H < 0) {
	                H += 1;
	            }
	            if (H > 1) {
	                H -= 1;
	            }
	        }
	        H = H * 360;
	        S = S * 100;
	        V = V * 100;
	        return [ H, S, V ];
	    }
	
	    function _RGB_2_HSL(data) {
	        // RGB from 0 to 255
	        var R = (data[0] / 255);
	        var G = (data[1] / 255);
	        var B = (data[2] / 255);
	
	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value
	
	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            }
	            else {
	                S = delta / (2 - vMax - vMin);
	            }
	
	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;
	
	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }
	
	            if (H < 0) {
	                H += 1;
	            }
	
	            if (H > 1) {
	                H -= 1;
	            }
	        }
	
	        H = H * 360;
	        S = S * 100;
	        L = L * 100;
	
	        return [ H, S, L ];
	    }
	
	    return {
	        customPalette : customPalette,
	        resetPalette : resetPalette,
	        getColor : getColor,
	        getHighlightColor : getHighlightColor,
	        customHighlight : customHighlight,
	        resetHighlight : resetHighlight,
	        getRadialGradient : getRadialGradient,
	        getLinearGradient : getLinearGradient,
	        getGradientColors : getGradientColors,
	        getStepColors : getStepColors,
	        reverse : reverse,
	        mix : mix,
	        lift : lift,
	        trim : trim,
	        random : random,
	        toRGB : toRGB,
	        toRGBA : toRGBA,
	        toHex : toHex,
	        toHSL : toHSL,
	        toHSLA : toHSLA,
	        toHSB : toHSB,
	        toHSBA : toHSBA,
	        toHSV : toHSV,
	        toHSVA : toHSVA,
	        toName : toName,
	        toColor : toColor,
	        toArray : toArray,
	        alpha : alpha,
	        getData : getData
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 矩形
	 * @module zrender/shape/Rectangle
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com) , 
	 *         strwind (@劲风FEI)
	 * @example
	 *     var Rectangle = require('zrender/shape/Rectangle');
	 *     var shape = new Rectangle({
	 *         style: {
	 *             x: 0,
	 *             y: 0,
	 *             width: 100,
	 *             height: 100,
	 *             radius: 20
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IRectangleStyle
	 * @property {number} x 左上角x坐标
	 * @property {number} y 左上角y坐标
	 * @property {number} width 宽度
	 * @property {number} height 高度
	 * @property {number|Array.<number>} radius 矩形圆角，可以用数组分别指定四个角的圆角
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(185);
	        
	        /**
	         * @alias module:zrender/shape/Rectangle
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Rectangle = function (options) {
	            Base.call(this, options);
	            /**
	             * 矩形绘制样式
	             * @name module:zrender/shape/Rectangle#style
	             * @type {module:zrender/shape/Rectangle~IRectangleStyle}
	             */
	            /**
	             * 矩形高亮绘制样式
	             * @name module:zrender/shape/Rectangle#highlightStyle
	             * @type {module:zrender/shape/Rectangle~IRectangleStyle}
	             */
	        };
	
	        Rectangle.prototype =  {
	            type: 'rectangle',
	
	            _buildRadiusPath: function (ctx, style) {
	                // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	                // r缩写为1         相当于 [1, 1, 1, 1]
	                // r缩写为[1]       相当于 [1, 1, 1, 1]
	                // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	                // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	                var x = style.x;
	                var y = style.y;
	                var width = style.width;
	                var height = style.height;
	                var r = style.radius;
	                var r1; 
	                var r2; 
	                var r3; 
	                var r4;
	                  
	                if (typeof r === 'number') {
	                    r1 = r2 = r3 = r4 = r;
	                }
	                else if (r instanceof Array) {
	                    if (r.length === 1) {
	                        r1 = r2 = r3 = r4 = r[0];
	                    }
	                    else if (r.length === 2) {
	                        r1 = r3 = r[0];
	                        r2 = r4 = r[1];
	                    }
	                    else if (r.length === 3) {
	                        r1 = r[0];
	                        r2 = r4 = r[1];
	                        r3 = r[2];
	                    }
	                    else {
	                        r1 = r[0];
	                        r2 = r[1];
	                        r3 = r[2];
	                        r4 = r[3];
	                    }
	                }
	                else {
	                    r1 = r2 = r3 = r4 = 0;
	                }
	                
	                var total;
	                if (r1 + r2 > width) {
	                    total = r1 + r2;
	                    r1 *= width / total;
	                    r2 *= width / total;
	                }
	                if (r3 + r4 > width) {
	                    total = r3 + r4;
	                    r3 *= width / total;
	                    r4 *= width / total;
	                }
	                if (r2 + r3 > height) {
	                    total = r2 + r3;
	                    r2 *= height / total;
	                    r3 *= height / total;
	                }
	                if (r1 + r4 > height) {
	                    total = r1 + r4;
	                    r1 *= height / total;
	                    r4 *= height / total;
	                }
	                ctx.moveTo(x + r1, y);
	                ctx.lineTo(x + width - r2, y);
	                r2 !== 0 && ctx.quadraticCurveTo(
	                    x + width, y, x + width, y + r2
	                );
	                ctx.lineTo(x + width, y + height - r3);
	                r3 !== 0 && ctx.quadraticCurveTo(
	                    x + width, y + height, x + width - r3, y + height
	                );
	                ctx.lineTo(x + r4, y + height);
	                r4 !== 0 && ctx.quadraticCurveTo(
	                    x, y + height, x, y + height - r4
	                );
	                ctx.lineTo(x, y + r1);
	                r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	            },
	            
	            /**
	             * 创建矩形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {Object} style
	             */
	            buildPath : function (ctx, style) {
	                if (!style.radius) {
	                    ctx.moveTo(style.x, style.y);
	                    ctx.lineTo(style.x + style.width, style.y);
	                    ctx.lineTo(style.x + style.width, style.y + style.height);
	                    ctx.lineTo(style.x, style.y + style.height);
	                    ctx.lineTo(style.x, style.y);
	                    // ctx.rect(style.x, style.y, style.width, style.height);
	                }
	                else {
	                    this._buildRadiusPath(ctx, style);
	                }
	                ctx.closePath();
	                return;
	            },
	
	            /**
	             * 计算返回矩形包围盒矩阵
	             * @param {module:zrender/shape/Rectangle~IRectangleStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - lineWidth / 2),
	                    y : Math.round(style.y - lineWidth / 2),
	                    width : style.width + lineWidth,
	                    height : style.height + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Rectangle, Base);
	        return Rectangle;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    var Transformable = __webpack_require__(186);
	    var util = __webpack_require__(168);
	    var vmlCanvasManager = window['G_vmlCanvasManager'];
	    var config = __webpack_require__(175);
	
	    function returnFalse() {
	        return false;
	    }
	
	    /**
	     * 创建dom
	     * 
	     * @inner
	     * @param {string} id dom id 待用
	     * @param {string} type dom type，such as canvas, div etc.
	     * @param {Painter} painter painter instance
	     */
	    function createDom(id, type, painter) {
	        var newDom = document.createElement(type);
	        var width = painter.getWidth();
	        var height = painter.getHeight();
	
	        // 没append呢，请原谅我这样写，清晰~
	        newDom.style.position = 'absolute';
	        newDom.style.left = 0;
	        newDom.style.top = 0;
	        newDom.style.width = width + 'px';
	        newDom.style.height = height + 'px';
	        newDom.width = width * config.devicePixelRatio;
	        newDom.height = height * config.devicePixelRatio;
	
	        // id不作为索引用，避免可能造成的重名，定义为私有属性
	        newDom.setAttribute('data-zr-dom-id', id);
	        return newDom;
	    }
	
	    /**
	     * @alias module:zrender/Layer
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @param {string} id
	     * @param {module:zrender/Painter} painter
	     */
	    var Layer = function(id, painter) {
	
	        this.id = id;
	
	        this.dom = createDom(id, 'canvas', painter);
	        this.dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	        this.dom.style['-webkit-user-select'] = 'none';
	        this.dom.style['user-select'] = 'none';
	        this.dom.style['-webkit-touch-callout'] = 'none';
	        this.dom.style['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	
	        this.dom.className = config.elementClassName;
	
	        vmlCanvasManager && vmlCanvasManager.initElement(this.dom);
	
	        this.domBack = null;
	        this.ctxBack = null;
	
	        this.painter = painter;
	
	        this.unusedCount = 0;
	
	        this.config = null;
	
	        this.dirty = true;
	
	        this.elCount = 0;
	
	        // Configs
	        /**
	         * 每次清空画布的颜色
	         * @type {string}
	         * @default 0
	         */
	        this.clearColor = 0;
	        /**
	         * 是否开启动态模糊
	         * @type {boolean}
	         * @default false
	         */
	        this.motionBlur = false;
	        /**
	         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @type {number}
	         * @default 0.7
	         */
	        this.lastFrameAlpha = 0.7;
	        /**
	         * 层是否支持鼠标平移操作
	         * @type {boolean}
	         * @default false
	         */
	        this.zoomable = false;
	        /**
	         * 层是否支持鼠标缩放操作
	         * @type {boolean}
	         * @default false
	         */
	        this.panable = false;
	
	        this.maxZoom = Infinity;
	        this.minZoom = 0;
	
	        Transformable.call(this);
	    };
	
	    Layer.prototype.initContext = function () {
	        this.ctx = this.dom.getContext('2d');
	
	        var dpr = config.devicePixelRatio;
	        if (dpr != 1) { 
	            this.ctx.scale(dpr, dpr);
	        }
	    };
	
	    Layer.prototype.createBackBuffer = function () {
	        if (vmlCanvasManager) { // IE 8- should not support back buffer
	            return;
	        }
	        this.domBack = createDom('back-' + this.id, 'canvas', this.painter);
	        this.ctxBack = this.domBack.getContext('2d');
	
	        var dpr = config.devicePixelRatio;
	
	        if (dpr != 1) { 
	            this.ctxBack.scale(dpr, dpr);
	        }
	    };
	
	    /**
	     * @param  {number} width
	     * @param  {number} height
	     */
	    Layer.prototype.resize = function (width, height) {
	        var dpr = config.devicePixelRatio;
	
	        this.dom.style.width = width + 'px';
	        this.dom.style.height = height + 'px';
	
	        this.dom.setAttribute('width', width * dpr);
	        this.dom.setAttribute('height', height * dpr);
	
	        if (dpr != 1) { 
	            this.ctx.scale(dpr, dpr);
	        }
	
	        if (this.domBack) {
	            this.domBack.setAttribute('width', width * dpr);
	            this.domBack.setAttribute('height', height * dpr);
	
	            if (dpr != 1) { 
	                this.ctxBack.scale(dpr, dpr);
	            }
	        }
	    };
	
	    /**
	     * 清空该层画布
	     */
	    Layer.prototype.clear = function () {
	        var dom = this.dom;
	        var ctx = this.ctx;
	        var width = dom.width;
	        var height = dom.height;
	
	        var haveClearColor = this.clearColor && !vmlCanvasManager;
	        var haveMotionBLur = this.motionBlur && !vmlCanvasManager;
	        var lastFrameAlpha = this.lastFrameAlpha;
	        
	        var dpr = config.devicePixelRatio;
	
	        if (haveMotionBLur) {
	            if (!this.domBack) {
	                this.createBackBuffer();
	            } 
	
	            this.ctxBack.globalCompositeOperation = 'copy';
	            this.ctxBack.drawImage(
	                dom, 0, 0,
	                width / dpr,
	                height / dpr
	            );
	        }
	
	        ctx.clearRect(0, 0, width / dpr, height / dpr);
	        if (haveClearColor) {
	            ctx.save();
	            ctx.fillStyle = this.clearColor;
	            ctx.fillRect(0, 0, width / dpr, height / dpr);
	            ctx.restore();
	        }
	
	        if (haveMotionBLur) {
	            var domBack = this.domBack;
	            ctx.save();
	            ctx.globalAlpha = lastFrameAlpha;
	            ctx.drawImage(domBack, 0, 0, width / dpr, height / dpr);
	            ctx.restore();
	        }
	    };
	
	    util.merge(Layer.prototype, Transformable.prototype);
	
	    return Layer;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 图片绘制
	 * @module zrender/shape/Image
	 * @author pissang(https://www.github.com/pissang)
	 * @example
	 *     var ImageShape = require('zrender/shape/Image');
	 *     var image = new ImageShape({
	 *         style: {
	 *             image: 'test.jpg',
	 *             x: 100,
	 *             y: 100
	 *         }
	 *     });
	 *     zr.addShape(image);
	 */
	
	/**
	 * @typedef {Object} IImageStyle
	 * @property {string|HTMLImageElement|HTMLCanvasElement} image 图片url或者图片对象
	 * @property {number} x 左上角横坐标
	 * @property {number} y 左上角纵坐标
	 * @property {number} [width] 绘制到画布上的宽度，默认为图片宽度
	 * @property {number} [height] 绘制到画布上的高度，默认为图片高度
	 * @property {number} [sx=0] 从图片中裁剪的左上角横坐标
	 * @property {number} [sy=0] 从图片中裁剪的左上角纵坐标
	 * @property {number} [sWidth] 从图片中裁剪的宽度，默认为图片高度
	 * @property {number} [sHeight] 从图片中裁剪的高度，默认为图片高度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	        var Base = __webpack_require__(185);
	
	        /**
	         * @alias zrender/shape/Image
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var ZImage = function(options) {
	            Base.call(this, options);
	            /**
	             * 图片绘制样式
	             * @name module:zrender/shape/Image#style
	             * @type {module:zrender/shape/Image~IImageStyle}
	             */
	            /**
	             * 图片高亮绘制样式
	             * @name module:zrender/shape/Image#highlightStyle
	             * @type {module:zrender/shape/Image~IImageStyle}
	             */
	        };
	
	        ZImage.prototype = {
	            
	            type: 'image',
	
	            brush : function(ctx, isHighlight, refreshNextFrame) {
	                var style = this.style || {};
	
	                if (isHighlight) {
	                    // 根据style扩展默认高亮样式
	                    style = this.getHighlightStyle(
	                        style, this.highlightStyle || {}
	                    );
	                }
	
	                var image = style.image;
	                var self = this;
	
	                if (!this._imageCache) {
	                    this._imageCache = {};
	                }
	                if (typeof(image) === 'string') {
	                    var src = image;
	                    if (this._imageCache[src]) {
	                        image = this._imageCache[src];
	                    } else {
	                        image = new Image();
	                        image.onload = function () {
	                            image.onload = null;
	                            self.modSelf();
	                            refreshNextFrame();
	                        };
	
	                        image.src = src;
	                        this._imageCache[src] = image;
	                    }
	                }
	                if (image) {
	                    // 图片已经加载完成
	                    if (image.nodeName.toUpperCase() == 'IMG') {
	                        if (window.ActiveXObject) {
	                            if (image.readyState != 'complete') {
	                                return;
	                            }
	                        }
	                        else {
	                            if (!image.complete) {
	                                return;
	                            }
	                        }
	                    }
	                    // Else is canvas
	                    var width = style.width || image.width;
	                    var height = style.height || image.height;
	                    var x = style.x;
	                    var y = style.y;
	                    // 图片加载失败
	                    if (!image.width || !image.height) {
	                        return;
	                    }
	
	                    ctx.save();
	
	                    this.doClip(ctx);
	
	                    this.setContext(ctx, style);
	
	                    // 设置transform
	                    this.setTransform(ctx);
	
	                    if (style.sWidth && style.sHeight) {
	                        var sx = style.sx || 0;
	                        var sy = style.sy || 0;
	                        ctx.drawImage(
	                            image,
	                            sx, sy, style.sWidth, style.sHeight,
	                            x, y, width, height
	                        );
	                    }
	                    else if (style.sx && style.sy) {
	                        var sx = style.sx;
	                        var sy = style.sy;
	                        var sWidth = width - sx;
	                        var sHeight = height - sy;
	                        ctx.drawImage(
	                            image,
	                            sx, sy, sWidth, sHeight,
	                            x, y, width, height
	                        );
	                    }
	                    else {
	                        ctx.drawImage(image, x, y, width, height);
	                    }
	                    // 如果没设置宽和高的话自动根据图片宽高设置
	                    if (!style.width) {
	                        style.width = width;
	                    }
	                    if (!style.height) {
	                        style.height = height;
	                    }
	                    if (!this.style.width) {
	                        this.style.width = width;
	                    }
	                    if (!this.style.height) {
	                        this.style.height = height;
	                    }
	
	                    this.drawText(ctx, style, this.style);
	
	                    ctx.restore();
	                }
	            },
	
	            /**
	             * 计算返回图片的包围盒矩形
	             * @param {module:zrender/shape/Image~IImageStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect: function(style) {
	                return {
	                    x : style.x,
	                    y : style.y,
	                    width : style.width,
	                    height : style.height
	                };
	            },
	
	            clearCache: function() {
	                this._imageCache = {};
	            }
	        };
	
	        __webpack_require__(168).inherits(ZImage, Base);
	        return ZImage;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	        'use strict';
	
	        var util = __webpack_require__(168);
	
	        var Group = __webpack_require__(192);
	
	        var defaultIterateOption = {
	            hover: false,
	            normal: 'down',
	            update: false
	        };
	
	        function shapeCompareFunc(a, b) {
	            if (a.zlevel == b.zlevel) {
	                if (a.z == b.z) {
	                    return a.__renderidx - b.__renderidx;
	                }
	                return a.z - b.z;
	            }
	            return a.zlevel - b.zlevel;
	        }
	        /**
	         * 内容仓库 (M)
	         * @alias module:zrender/Storage
	         * @constructor
	         */
	        var Storage = function () {
	            // 所有常规形状，id索引的map
	            this._elements = {};
	
	            // 高亮层形状，不稳定，动态增删，数组位置也是z轴方向，靠前显示在下方
	            this._hoverElements = [];
	
	            this._roots = [];
	
	            this._shapeList = [];
	
	            this._shapeListOffset = 0;
	        };
	
	        /**
	         * 遍历迭代器
	         * 
	         * @param {Function} fun 迭代回调函数，return true终止迭代
	         * @param {Object} [option] 迭代参数，缺省为仅降序遍历普通层图形
	         * @param {boolean} [option.hover=true] 是否是高亮层图形
	         * @param {string} [option.normal='up'] 是否是普通层图形，迭代时是否指定及z轴顺序
	         * @param {boolean} [option.update=false] 是否在迭代前更新形状列表
	         * 
	         */
	        Storage.prototype.iterShape = function (fun, option) {
	            if (!option) {
	                option = defaultIterateOption;
	            }
	
	            if (option.hover) {
	                // 高亮层数据遍历
	                for (var i = 0, l = this._hoverElements.length; i < l; i++) {
	                    var el = this._hoverElements[i];
	                    el.updateTransform();
	                    if (fun(el)) {
	                        return this;
	                    }
	                }
	            }
	
	            if (option.update) {
	                this.updateShapeList();
	            }
	
	            // 遍历: 'down' | 'up'
	            switch (option.normal) {
	                case 'down':
	                    // 降序遍历，高层优先
	                    var l = this._shapeList.length;
	                    while (l--) {
	                        if (fun(this._shapeList[l])) {
	                            return this;
	                        }
	                    }
	                    break;
	                // case 'up':
	                default:
	                    // 升序遍历，底层优先
	                    for (var i = 0, l = this._shapeList.length; i < l; i++) {
	                        if (fun(this._shapeList[i])) {
	                            return this;
	                        }
	                    }
	                    break;
	            }
	
	            return this;
	        };
	
	        /**
	         * 返回hover层的形状数组
	         * @param  {boolean} [update=false] 是否在返回前更新图形的变换
	         * @return {Array.<module:zrender/shape/Base>}
	         */
	        Storage.prototype.getHoverShapes = function (update) {
	            // hoverConnect
	            var hoverElements = [];
	            for (var i = 0, l = this._hoverElements.length; i < l; i++) {
	                hoverElements.push(this._hoverElements[i]);
	                var target = this._hoverElements[i].hoverConnect;
	                if (target) {
	                    var shape;
	                    target = target instanceof Array ? target : [target];
	                    for (var j = 0, k = target.length; j < k; j++) {
	                        shape = target[j].id ? target[j] : this.get(target[j]);
	                        if (shape) {
	                            hoverElements.push(shape);
	                        }
	                    }
	                }
	            }
	            hoverElements.sort(shapeCompareFunc);
	            if (update) {
	                for (var i = 0, l = hoverElements.length; i < l; i++) {
	                    hoverElements[i].updateTransform();
	                }
	            }
	            return hoverElements;
	        };
	
	        /**
	         * 返回所有图形的绘制队列
	         * @param  {boolean} [update=false] 是否在返回前更新该数组
	         * 详见{@link module:zrender/shape/Base.prototype.updateShapeList}
	         * @return {Array.<module:zrender/shape/Base>}
	         */
	        Storage.prototype.getShapeList = function (update) {
	            if (update) {
	                this.updateShapeList();
	            }
	            return this._shapeList;
	        };
	
	        /**
	         * 更新图形的绘制队列。
	         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	         */
	        Storage.prototype.updateShapeList = function () {
	            this._shapeListOffset = 0;
	            for (var i = 0, len = this._roots.length; i < len; i++) {
	                var root = this._roots[i];
	                this._updateAndAddShape(root);
	            }
	            this._shapeList.length = this._shapeListOffset;
	
	            for (var i = 0, len = this._shapeList.length; i < len; i++) {
	                this._shapeList[i].__renderidx = i;
	            }
	
	            this._shapeList.sort(shapeCompareFunc);
	        };
	
	        Storage.prototype._updateAndAddShape = function (el, clipShapes) {
	            
	            if (el.ignore) {
	                return;
	            }
	
	            el.updateTransform();
	
	            if (el.clipShape) {
	                // clipShape 的变换是基于 group 的变换
	                el.clipShape.parent = el;
	                el.clipShape.updateTransform();
	
	                // PENDING 效率影响
	                if (clipShapes) {
	                    clipShapes = clipShapes.slice();
	                    clipShapes.push(el.clipShape);
	                } else {
	                    clipShapes = [el.clipShape];
	                }
	            }
	
	            if (el.type == 'group') {
	                
	                for (var i = 0; i < el._children.length; i++) {
	                    var child = el._children[i];
	
	                    // Force to mark as dirty if group is dirty
	                    child.__dirty = el.__dirty || child.__dirty;
	
	                    this._updateAndAddShape(child, clipShapes);
	                }
	
	                // Mark group clean here
	                el.__dirty = false;
	                
	            }
	            else {
	                el.__clipShapes = clipShapes;
	
	                this._shapeList[this._shapeListOffset++] = el;
	            }
	        };
	
	        /**
	         * 修改图形(Shape)或者组(Group)
	         * 
	         * @param {string|module:zrender/shape/Base|module:zrender/Group} el
	         * @param {Object} [params] 参数
	         */
	        Storage.prototype.mod = function (el, params) {
	            if (typeof (el) === 'string') {
	                el = this._elements[el];
	            }
	            if (el) {
	
	                el.modSelf();
	
	                if (params) {
	                    // 如果第二个参数直接使用 shape
	                    // parent, _storage, __clipShapes 三个属性会有循环引用
	                    // 主要为了向 1.x 版本兼容，2.x 版本不建议使用第二个参数
	                    if (params.parent || params._storage || params.__clipShapes) {
	                        var target = {};
	                        for (var name in params) {
	                            if (
	                                name === 'parent'
	                                || name === '_storage'
	                                || name === '__clipShapes'
	                            ) {
	                                continue;
	                            }
	                            if (params.hasOwnProperty(name)) {
	                                target[name] = params[name];
	                            }
	                        }
	                        util.merge(el, target, true);
	                    }
	                    else {
	                        util.merge(el, params, true);
	                    }
	                }
	            }
	
	            return this;
	        };
	
	        /**
	         * 移动指定的图形(Shape)或者组(Group)的位置
	         * @param {string} shapeId 形状唯一标识
	         * @param {number} dx
	         * @param {number} dy
	         */
	        Storage.prototype.drift = function (shapeId, dx, dy) {
	            var shape = this._elements[shapeId];
	            if (shape) {
	                shape.needTransform = true;
	                if (shape.draggable === 'horizontal') {
	                    dy = 0;
	                }
	                else if (shape.draggable === 'vertical') {
	                    dx = 0;
	                }
	                if (!shape.ondrift // ondrift
	                    // 有onbrush并且调用执行返回false或undefined则继续
	                    || (shape.ondrift && !shape.ondrift(dx, dy))
	                ) {
	                    shape.drift(dx, dy);
	                }
	            }
	
	            return this;
	        };
	
	        /**
	         * 添加高亮层数据
	         * 
	         * @param {module:zrender/shape/Base} shape
	         */
	        Storage.prototype.addHover = function (shape) {
	            shape.updateNeedTransform();
	            this._hoverElements.push(shape);
	            return this;
	        };
	
	        /**
	         * 清空高亮层数据
	         */
	        Storage.prototype.delHover = function () {
	            this._hoverElements = [];
	            return this;
	        };
	
	        /**
	         * 是否有图形在高亮层里
	         * @return {boolean}
	         */
	        Storage.prototype.hasHoverShape = function () {
	            return this._hoverElements.length > 0;
	        };
	
	        /**
	         * 添加图形(Shape)或者组(Group)到根节点
	         * @param {module:zrender/shape/Shape|module:zrender/Group} el
	         */
	        Storage.prototype.addRoot = function (el) {
	            // Element has been added
	            if (this._elements[el.id]) {
	                return;
	            }
	
	            if (el instanceof Group) {
	                el.addChildrenToStorage(this);
	            }
	
	            this.addToMap(el);
	            this._roots.push(el);
	        };
	
	        /**
	         * 删除指定的图形(Shape)或者组(Group)
	         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	         */
	        Storage.prototype.delRoot = function (elId) {
	            if (typeof(elId) == 'undefined') {
	                // 不指定elId清空
	                for (var i = 0; i < this._roots.length; i++) {
	                    var root = this._roots[i];
	                    if (root instanceof Group) {
	                        root.delChildrenFromStorage(this);
	                    }
	                }
	
	                this._elements = {};
	                this._hoverElements = [];
	                this._roots = [];
	                this._shapeList = [];
	                this._shapeListOffset = 0;
	
	                return;
	            }
	
	            if (elId instanceof Array) {
	                for (var i = 0, l = elId.length; i < l; i++) {
	                    this.delRoot(elId[i]);
	                }
	                return;
	            }
	
	            var el;
	            if (typeof(elId) == 'string') {
	                el = this._elements[elId];
	            }
	            else {
	                el = elId;
	            }
	
	            var idx = util.indexOf(this._roots, el);
	            if (idx >= 0) {
	                this.delFromMap(el.id);
	                this._roots.splice(idx, 1);
	                if (el instanceof Group) {
	                    el.delChildrenFromStorage(this);
	                }
	            }
	        };
	
	        Storage.prototype.addToMap = function (el) {
	            if (el instanceof Group) {
	                el._storage = this;
	            }
	            el.modSelf();
	
	            this._elements[el.id] = el;
	
	            return this;
	        };
	
	        Storage.prototype.get = function (elId) {
	            return this._elements[elId];
	        };
	
	        Storage.prototype.delFromMap = function (elId) {
	            var el = this._elements[elId];
	            if (el) {
	                delete this._elements[elId];
	
	                if (el instanceof Group) {
	                    el._storage = null;
	                }
	            }
	
	            return this;
	        };
	
	        /**
	         * 清空并且释放Storage
	         */
	        Storage.prototype.dispose = function () {
	            this._elements = 
	            this._renderList = 
	            this._roots =
	            this._hoverElements = null;
	        };
	
	        return Storage;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/Group
	 * @example
	 *     var Group = require('zrender/Group');
	 *     var Circle = require('zrender/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.addChild(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *             brushType: 'fill'
	 *         }
	 *     }));
	 *     zr.addGroup(g);
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	    var guid = __webpack_require__(176);
	    var util = __webpack_require__(168);
	
	    var Transformable = __webpack_require__(186);
	    var Eventful = __webpack_require__(171);
	
	    /**
	     * @alias module:zrender/Group
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @extends module:zrender/mixin/Eventful
	     */
	    var Group = function(options) {
	
	        options = options || {};
	
	        /**
	         * Group id
	         * @type {string}
	         */
	        this.id = options.id || guid();
	
	        for (var key in options) {
	            this[key] = options[key];
	        }
	
	        /**
	         * @type {string}
	         */
	        this.type = 'group';
	
	        /**
	         * 用于裁剪的图形(shape)，所有 Group 内的图形在绘制时都会被这个图形裁剪
	         * 该图形会继承Group的变换
	         * @type {module:zrender/shape/Base}
	         * @see http://www.w3.org/TR/2dcontext/#clipping-region
	         */
	        this.clipShape = null;
	
	        this._children = [];
	
	        this._storage = null;
	
	        this.__dirty = true;
	
	        // Mixin
	        Transformable.call(this);
	        Eventful.call(this);
	    };
	
	    /**
	     * 是否忽略该 Group 及其所有子节点
	     * @type {boolean}
	     * @default false
	     */
	    Group.prototype.ignore = false;
	
	    /**
	     * 复制并返回一份新的包含所有儿子节点的数组
	     * @return {Array.<module:zrender/Group|module:zrender/shape/Base>}
	     */
	    Group.prototype.children = function() {
	        return this._children.slice();
	    };
	
	    /**
	     * 获取指定 index 的儿子节点
	     * @param  {number} idx
	     * @return {module:zrender/Group|module:zrender/shape/Base}
	     */
	    Group.prototype.childAt = function(idx) {
	        return this._children[idx];
	    };
	
	    /**
	     * 添加子节点，可以是Shape或者Group
	     * @param {module:zrender/Group|module:zrender/shape/Base} child
	     */
	    // TODO Type Check
	    Group.prototype.addChild = function(child) {
	        if (child == this) {
	            return;
	        }
	        
	        if (child.parent == this) {
	            return;
	        }
	        if (child.parent) {
	            child.parent.removeChild(child);
	        }
	
	        this._children.push(child);
	        child.parent = this;
	
	        if (this._storage && this._storage !== child._storage) {
	            
	            this._storage.addToMap(child);
	
	            if (child instanceof Group) {
	                child.addChildrenToStorage(this._storage);
	            }
	        }
	    };
	
	    /**
	     * 移除子节点
	     * @param {module:zrender/Group|module:zrender/shape/Base} child
	     */
	    // TODO Type Check
	    Group.prototype.removeChild = function(child) {
	        var idx = util.indexOf(this._children, child);
	
	        if (idx >= 0) {
	            this._children.splice(idx, 1);
	        }
	        child.parent = null;
	
	        if (this._storage) {
	            
	            this._storage.delFromMap(child.id);
	
	            if (child instanceof Group) {
	                child.delChildrenFromStorage(this._storage);
	            }
	        }
	    };
	
	    /**
	     * 移除所有子节点
	     */
	    Group.prototype.clearChildren = function () {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            if (this._storage) {
	                this._storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(this._storage);
	                }
	            }
	        }
	        this._children.length = 0;
	    };
	
	    /**
	     * 遍历所有子节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    Group.prototype.eachChild = function(cb, context) {
	        var haveContext = !!context;
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            if (haveContext) {
	                cb.call(context, child);
	            } else {
	                cb(child);
	            }
	        }
	    };
	
	    /**
	     * 深度优先遍历所有子孙节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    Group.prototype.traverse = function(cb, context) {
	        var haveContext = !!context;
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            if (haveContext) {
	                cb.call(context, child);
	            } else {
	                cb(child);
	            }
	
	            if (child.type === 'group') {
	                child.traverse(cb, context);
	            }
	        }
	    };
	
	    Group.prototype.addChildrenToStorage = function(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.addToMap(child);
	            if (child instanceof Group) {
	                child.addChildrenToStorage(storage);
	            }
	        }
	    };
	
	    Group.prototype.delChildrenFromStorage = function(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.delFromMap(child.id);
	            if (child instanceof Group) {
	                child.delChildrenFromStorage(storage);
	            }
	        }
	    };
	
	    Group.prototype.modSelf = function() {
	        this.__dirty = true;
	    };
	
	    util.merge(Group.prototype, Transformable.prototype, true);
	    util.merge(Group.prototype, Eventful.prototype, true);
	
	    return Group;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 动画主类, 调度和管理所有动画控制器
	 * 
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	        
	        'use strict';
	
	        var Clip = __webpack_require__(194);
	        var color = __webpack_require__(187);
	        var util = __webpack_require__(168);
	        var Dispatcher = __webpack_require__(170).Dispatcher;
	
	        var requestAnimationFrame = window.requestAnimationFrame
	                                    || window.msRequestAnimationFrame
	                                    || window.mozRequestAnimationFrame
	                                    || window.webkitRequestAnimationFrame
	                                    || function (func) {
	                                        setTimeout(func, 16);
	                                    };
	
	        var arraySlice = Array.prototype.slice;
	
	        /**
	         * @typedef {Object} IZRenderStage
	         * @property {Function} update
	         */
	        
	        /** 
	         * @alias module:zrender/animation/Animation
	         * @constructor
	         * @param {Object} [options]
	         * @param {Function} [options.onframe]
	         * @param {IZRenderStage} [options.stage]
	         * @example
	         *     var animation = new Animation();
	         *     var obj = {
	         *         x: 100,
	         *         y: 100
	         *     };
	         *     animation.animate(node.position)
	         *         .when(1000, {
	         *             x: 500,
	         *             y: 500
	         *         })
	         *         .when(2000, {
	         *             x: 100,
	         *             y: 100
	         *         })
	         *         .start('spline');
	         */
	        var Animation = function (options) {
	
	            options = options || {};
	
	            this.stage = options.stage || {};
	
	            this.onframe = options.onframe || function() {};
	
	            // private properties
	            this._clips = [];
	
	            this._running = false;
	
	            this._time = 0;
	
	            Dispatcher.call(this);
	        };
	
	        Animation.prototype = {
	            /**
	             * 添加动画片段
	             * @param {module:zrender/animation/Clip} clip
	             */
	            add: function(clip) {
	                this._clips.push(clip);
	            },
	            /**
	             * 删除动画片段
	             * @param {module:zrender/animation/Clip} clip
	             */
	            remove: function(clip) {
	                if (clip.__inStep) {
	                    // 如果是在 step 中，不能直接移除
	                    // 需要标记为 needsRemove 然后在所有 clip step 完成后移除
	                    clip.__needsRemove = true;
	                }
	                else {
	                    var idx = util.indexOf(this._clips, clip);
	                    if (idx >= 0) {
	                        this._clips.splice(idx, 1);
	                    }
	                }
	            },
	            _update: function() {
	
	                var time = new Date().getTime();
	                var delta = time - this._time;
	                var clips = this._clips;
	                var len = clips.length;
	
	                var deferredEvents = [];
	                var deferredClips = [];
	                for (var i = 0; i < len; i++) {
	                    var clip = clips[i];
	                    clip.__inStep = true;
	                    var e = clip.step(time);
	                    clip.__inStep = false;
	                    // Throw out the events need to be called after
	                    // stage.update, like destroy
	                    if (e) {
	                        deferredEvents.push(e);
	                        deferredClips.push(clip);
	                    }
	                }
	
	                // Remove the finished clip
	                for (var i = 0; i < len;) {
	                    if (clips[i].__needsRemove) {
	                        clips[i] = clips[len - 1];
	                        clips.pop();
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	
	                len = deferredEvents.length;
	                for (var i = 0; i < len; i++) {
	                    deferredClips[i].fire(deferredEvents[i]);
	                }
	
	                this._time = time;
	
	                this.onframe(delta);
	
	                this.dispatch('frame', delta);
	
	                if (this.stage.update) {
	                    this.stage.update();
	                }
	            },
	            /**
	             * 开始运行动画
	             */
	            start: function () {
	                var self = this;
	
	                this._running = true;
	
	                function step() {
	                    if (self._running) {
	                        
	                        requestAnimationFrame(step);
	
	                        self._update();
	                    }
	                }
	
	                this._time = new Date().getTime();
	                requestAnimationFrame(step);
	            },
	            /**
	             * 停止运行动画
	             */
	            stop: function () {
	                this._running = false;
	            },
	            /**
	             * 清除所有动画片段
	             */
	            clear : function () {
	                this._clips = [];
	            },
	            /**
	             * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	             * @param  {Object} target
	             * @param  {Object} options
	             * @param  {boolean} [options.loop=false] 是否循环播放动画
	             * @param  {Function} [options.getter=null]
	             *         如果指定getter函数，会通过getter函数取属性值
	             * @param  {Function} [options.setter=null]
	             *         如果指定setter函数，会通过setter函数设置属性值
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            animate : function (target, options) {
	                options = options || {};
	                var deferred = new Animator(
	                    target,
	                    options.loop,
	                    options.getter, 
	                    options.setter
	                );
	                deferred.animation = this;
	                return deferred;
	            },
	            constructor: Animation
	        };
	
	        util.merge(Animation.prototype, Dispatcher.prototype, true);
	
	        function _defaultGetter(target, key) {
	            return target[key];
	        }
	
	        function _defaultSetter(target, key, value) {
	            target[key] = value;
	        }
	
	        function _interpolateNumber(p0, p1, percent) {
	            return (p1 - p0) * percent + p0;
	        }
	
	        function _interpolateArray(p0, p1, percent, out, arrDim) {
	            var len = p0.length;
	            if (arrDim == 1) {
	                for (var i = 0; i < len; i++) {
	                    out[i] = _interpolateNumber(p0[i], p1[i], percent); 
	                }
	            }
	            else {
	                var len2 = p0[0].length;
	                for (var i = 0; i < len; i++) {
	                    for (var j = 0; j < len2; j++) {
	                        out[i][j] = _interpolateNumber(
	                            p0[i][j], p1[i][j], percent
	                        );
	                    }
	                }
	            }
	        }
	
	        function _isArrayLike(data) {
	            switch (typeof data) {
	                case 'undefined':
	                case 'string':
	                    return false;
	            }
	            
	            return typeof data.length !== 'undefined';
	        }
	
	        function _catmullRomInterpolateArray(
	            p0, p1, p2, p3, t, t2, t3, out, arrDim
	        ) {
	            var len = p0.length;
	            if (arrDim == 1) {
	                for (var i = 0; i < len; i++) {
	                    out[i] = _catmullRomInterpolate(
	                        p0[i], p1[i], p2[i], p3[i], t, t2, t3
	                    );
	                }
	            }
	            else {
	                var len2 = p0[0].length;
	                for (var i = 0; i < len; i++) {
	                    for (var j = 0; j < len2; j++) {
	                        out[i][j] = _catmullRomInterpolate(
	                            p0[i][j], p1[i][j], p2[i][j], p3[i][j],
	                            t, t2, t3
	                        );
	                    }
	                }
	            }
	        }
	
	        function _catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	            var v0 = (p2 - p0) * 0.5;
	            var v1 = (p3 - p1) * 0.5;
	            return (2 * (p1 - p2) + v0 + v1) * t3 
	                    + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                    + v0 * t + p1;
	        }
	
	        function _cloneValue(value) {
	            if (_isArrayLike(value)) {
	                var len = value.length;
	                if (_isArrayLike(value[0])) {
	                    var ret = [];
	                    for (var i = 0; i < len; i++) {
	                        ret.push(arraySlice.call(value[i]));
	                    }
	                    return ret;
	                }
	                else {
	                    return arraySlice.call(value);
	                }
	            }
	            else {
	                return value;
	            }
	        }
	
	        function rgba2String(rgba) {
	            rgba[0] = Math.floor(rgba[0]);
	            rgba[1] = Math.floor(rgba[1]);
	            rgba[2] = Math.floor(rgba[2]);
	
	            return 'rgba(' + rgba.join(',') + ')';
	        }
	
	        /**
	         * @alias module:zrender/animation/Animation~Animator
	         * @constructor
	         * @param {Object} target
	         * @param {boolean} loop
	         * @param {Function} getter
	         * @param {Function} setter
	         */
	        var Animator = function(target, loop, getter, setter) {
	            this._tracks = {};
	            this._target = target;
	
	            this._loop = loop || false;
	
	            this._getter = getter || _defaultGetter;
	            this._setter = setter || _defaultSetter;
	
	            this._clipCount = 0;
	
	            this._delay = 0;
	
	            this._doneList = [];
	
	            this._onframeList = [];
	
	            this._clipList = [];
	        };
	
	        Animator.prototype = {
	            /**
	             * 设置动画关键帧
	             * @param  {number} time 关键帧时间，单位是ms
	             * @param  {Object} props 关键帧的属性值，key-value表示
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            when : function(time /* ms */, props) {
	                for (var propName in props) {
	                    if (!this._tracks[propName]) {
	                        this._tracks[propName] = [];
	                        // If time is 0 
	                        //  Then props is given initialize value
	                        // Else
	                        //  Initialize value from current prop value
	                        if (time !== 0) {
	                            this._tracks[propName].push({
	                                time : 0,
	                                value : _cloneValue(
	                                    this._getter(this._target, propName)
	                                )
	                            });
	                        }
	                    }
	                    this._tracks[propName].push({
	                        time : parseInt(time, 10),
	                        value : props[propName]
	                    });
	                }
	                return this;
	            },
	            /**
	             * 添加动画每一帧的回调函数
	             * @param  {Function} callback
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            during: function (callback) {
	                this._onframeList.push(callback);
	                return this;
	            },
	            /**
	             * 开始执行动画
	             * @param  {string|Function} easing 
	             *         动画缓动函数，详见{@link module:zrender/animation/easing}
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            start: function (easing) {
	
	                var self = this;
	                var setter = this._setter;
	                var getter = this._getter;
	                var useSpline = easing === 'spline';
	
	                var ondestroy = function() {
	                    self._clipCount--;
	                    if (self._clipCount === 0) {
	                        // Clear all tracks
	                        self._tracks = {};
	
	                        var len = self._doneList.length;
	                        for (var i = 0; i < len; i++) {
	                            self._doneList[i].call(self);
	                        }
	                    }
	                };
	
	                var createTrackClip = function (keyframes, propName) {
	                    var trackLen = keyframes.length;
	                    if (!trackLen) {
	                        return;
	                    }
	                    // Guess data type
	                    var firstVal = keyframes[0].value;
	                    var isValueArray = _isArrayLike(firstVal);
	                    var isValueColor = false;
	
	                    // For vertices morphing
	                    var arrDim = (
	                            isValueArray 
	                            && _isArrayLike(firstVal[0])
	                        )
	                        ? 2 : 1;
	                    // Sort keyframe as ascending
	                    keyframes.sort(function(a, b) {
	                        return a.time - b.time;
	                    });
	                    var trackMaxTime;
	                    if (trackLen) {
	                        trackMaxTime = keyframes[trackLen - 1].time;
	                    }
	                    else {
	                        return;
	                    }
	                    // Percents of each keyframe
	                    var kfPercents = [];
	                    // Value of each keyframe
	                    var kfValues = [];
	                    for (var i = 0; i < trackLen; i++) {
	                        kfPercents.push(keyframes[i].time / trackMaxTime);
	                        // Assume value is a color when it is a string
	                        var value = keyframes[i].value;
	                        if (typeof(value) == 'string') {
	                            value = color.toArray(value);
	                            if (value.length === 0) {    // Invalid color
	                                value[0] = value[1] = value[2] = 0;
	                                value[3] = 1;
	                            }
	                            isValueColor = true;
	                        }
	                        kfValues.push(value);
	                    }
	
	                    // Cache the key of last frame to speed up when 
	                    // animation playback is sequency
	                    var cacheKey = 0;
	                    var cachePercent = 0;
	                    var start;
	                    var i;
	                    var w;
	                    var p0;
	                    var p1;
	                    var p2;
	                    var p3;
	
	
	                    if (isValueColor) {
	                        var rgba = [ 0, 0, 0, 0 ];
	                    }
	
	                    var onframe = function (target, percent) {
	                        // Find the range keyframes
	                        // kf1-----kf2---------current--------kf3
	                        // find kf2 and kf3 and do interpolation
	                        if (percent < cachePercent) {
	                            // Start from next key
	                            start = Math.min(cacheKey + 1, trackLen - 1);
	                            for (i = start; i >= 0; i--) {
	                                if (kfPercents[i] <= percent) {
	                                    break;
	                                }
	                            }
	                            i = Math.min(i, trackLen - 2);
	                        }
	                        else {
	                            for (i = cacheKey; i < trackLen; i++) {
	                                if (kfPercents[i] > percent) {
	                                    break;
	                                }
	                            }
	                            i = Math.min(i - 1, trackLen - 2);
	                        }
	                        cacheKey = i;
	                        cachePercent = percent;
	
	                        var range = (kfPercents[i + 1] - kfPercents[i]);
	                        if (range === 0) {
	                            return;
	                        }
	                        else {
	                            w = (percent - kfPercents[i]) / range;
	                        }
	                        if (useSpline) {
	                            p1 = kfValues[i];
	                            p0 = kfValues[i === 0 ? i : i - 1];
	                            p2 = kfValues[i > trackLen - 2 ? trackLen - 1 : i + 1];
	                            p3 = kfValues[i > trackLen - 3 ? trackLen - 1 : i + 2];
	                            if (isValueArray) {
	                                _catmullRomInterpolateArray(
	                                    p0, p1, p2, p3, w, w * w, w * w * w,
	                                    getter(target, propName),
	                                    arrDim
	                                );
	                            }
	                            else {
	                                var value;
	                                if (isValueColor) {
	                                    value = _catmullRomInterpolateArray(
	                                        p0, p1, p2, p3, w, w * w, w * w * w,
	                                        rgba, 1
	                                    );
	                                    value = rgba2String(rgba);
	                                }
	                                else {
	                                    value = _catmullRomInterpolate(
	                                        p0, p1, p2, p3, w, w * w, w * w * w
	                                    );
	                                }
	                                setter(
	                                    target,
	                                    propName,
	                                    value
	                                );
	                            }
	                        }
	                        else {
	                            if (isValueArray) {
	                                _interpolateArray(
	                                    kfValues[i], kfValues[i + 1], w,
	                                    getter(target, propName),
	                                    arrDim
	                                );
	                            }
	                            else {
	                                var value;
	                                if (isValueColor) {
	                                    _interpolateArray(
	                                        kfValues[i], kfValues[i + 1], w,
	                                        rgba, 1
	                                    );
	                                    value = rgba2String(rgba);
	                                }
	                                else {
	                                    value = _interpolateNumber(kfValues[i], kfValues[i + 1], w);
	                                }
	                                setter(
	                                    target,
	                                    propName,
	                                    value
	                                );
	                            }
	                        }
	
	                        for (i = 0; i < self._onframeList.length; i++) {
	                            self._onframeList[i](target, percent);
	                        }
	                    };
	
	                    var clip = new Clip({
	                        target : self._target,
	                        life : trackMaxTime,
	                        loop : self._loop,
	                        delay : self._delay,
	                        onframe : onframe,
	                        ondestroy : ondestroy
	                    });
	
	                    if (easing && easing !== 'spline') {
	                        clip.easing = easing;
	                    }
	                    self._clipList.push(clip);
	                    self._clipCount++;
	                    self.animation.add(clip);
	                };
	
	                for (var propName in this._tracks) {
	                    createTrackClip(this._tracks[propName], propName);
	                }
	                return this;
	            },
	            /**
	             * 停止动画
	             */
	            stop : function() {
	                for (var i = 0; i < this._clipList.length; i++) {
	                    var clip = this._clipList[i];
	                    this.animation.remove(clip);
	                }
	                this._clipList = [];
	            },
	            /**
	             * 设置动画延迟开始的时间
	             * @param  {number} time 单位ms
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            delay : function (time) {
	                this._delay = time;
	                return this;
	            },
	            /**
	             * 添加动画结束的回调
	             * @param  {Function} cb
	             * @return {module:zrender/animation/Animation~Animator}
	             */
	            done : function(cb) {
	                if (cb) {
	                    this._doneList.push(cb);
	                }
	                return this;
	            }
	        };
	
	        return Animation;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	        var Easing = __webpack_require__(195);
	
	        function Clip(options) {
	
	            this._targetPool = options.target || {};
	            if (!(this._targetPool instanceof Array)) {
	                this._targetPool = [ this._targetPool ];
	            }
	
	            // 生命周期
	            this._life = options.life || 1000;
	            // 延时
	            this._delay = options.delay || 0;
	            // 开始时间
	            this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	
	            // 结束时间
	            this._endTime = this._startTime + this._life * 1000;
	
	            // 是否循环
	            this.loop = typeof options.loop == 'undefined'
	                        ? false : options.loop;
	
	            this.gap = options.gap || 0;
	
	            this.easing = options.easing || 'Linear';
	
	            this.onframe = options.onframe;
	            this.ondestroy = options.ondestroy;
	            this.onrestart = options.onrestart;
	        }
	
	        Clip.prototype = {
	            step : function (time) {
	                var percent = (time - this._startTime) / this._life;
	
	                // 还没开始
	                if (percent < 0) {
	                    return;
	                }
	
	                percent = Math.min(percent, 1);
	
	                var easingFunc = typeof this.easing == 'string'
	                                 ? Easing[this.easing]
	                                 : this.easing;
	                var schedule = typeof easingFunc === 'function'
	                    ? easingFunc(percent)
	                    : percent;
	
	                this.fire('frame', schedule);
	
	                // 结束
	                if (percent == 1) {
	                    if (this.loop) {
	                        this.restart();
	                        // 重新开始周期
	                        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                        return 'restart';
	                    }
	                    
	                    // 动画完成将这个控制器标识为待删除
	                    // 在Animation.update中进行批量删除
	                    this.__needsRemove = true;
	                    return 'destroy';
	                }
	                
	                return null;
	            },
	            restart : function() {
	                var time = new Date().getTime();
	                var remainder = (time - this._startTime) % this._life;
	                this._startTime = new Date().getTime() - remainder + this.gap;
	
	                this.__needsRemove = false;
	            },
	            fire : function(eventType, arg) {
	                for (var i = 0, len = this._targetPool.length; i < len; i++) {
	                    if (this['on' + eventType]) {
	                        this['on' + eventType](this._targetPool[i], arg);
	                    }
	                }
	            },
	            constructor: Clip
	        };
	
	        return Clip;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        /**
	         * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	         * @see http://sole.github.io/tween.js/examples/03_graphs.html
	         * @exports zrender/animation/easing
	         */
	        var easing = {
	            // 线性
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            Linear: function (k) {
	                return k;
	            },
	
	            // 二次方的缓动（t^2）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuadraticIn: function (k) {
	                return k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuadraticOut: function (k) {
	                return k * (2 - k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuadraticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k;
	                }
	                return -0.5 * (--k * (k - 2) - 1);
	            },
	
	            // 三次方的缓动（t^3）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CubicIn: function (k) {
	                return k * k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CubicOut: function (k) {
	                return --k * k * k + 1;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CubicInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k;
	                }
	                return 0.5 * ((k -= 2) * k * k + 2);
	            },
	
	            // 四次方的缓动（t^4）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuarticIn: function (k) {
	                return k * k * k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuarticOut: function (k) {
	                return 1 - (--k * k * k * k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuarticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k * k;
	                }
	                return -0.5 * ((k -= 2) * k * k * k - 2);
	            },
	
	            // 五次方的缓动（t^5）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuinticIn: function (k) {
	                return k * k * k * k * k;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuinticOut: function (k) {
	                return --k * k * k * k * k + 1;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            QuinticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k * k * k;
	                }
	                return 0.5 * ((k -= 2) * k * k * k * k + 2);
	            },
	
	            // 正弦曲线的缓动（sin(t)）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            SinusoidalIn: function (k) {
	                return 1 - Math.cos(k * Math.PI / 2);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            SinusoidalOut: function (k) {
	                return Math.sin(k * Math.PI / 2);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            SinusoidalInOut: function (k) {
	                return 0.5 * (1 - Math.cos(Math.PI * k));
	            },
	
	            // 指数曲线的缓动（2^t）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ExponentialIn: function (k) {
	                return k === 0 ? 0 : Math.pow(1024, k - 1);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ExponentialOut: function (k) {
	                return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ExponentialInOut: function (k) {
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if ((k *= 2) < 1) {
	                    return 0.5 * Math.pow(1024, k - 1);
	                }
	                return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	            },
	
	            // 圆形曲线的缓动（sqrt(1-t^2)）
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CircularIn: function (k) {
	                return 1 - Math.sqrt(1 - k * k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CircularOut: function (k) {
	                return Math.sqrt(1 - (--k * k));
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            CircularInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return -0.5 * (Math.sqrt(1 - k * k) - 1);
	                }
	                return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	            },
	
	            // 创建类似于弹簧在停止前来回振荡的动画
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ElasticIn: function (k) {
	                var s; 
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1; s = p / 4;
	                }
	                else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                return -(a * Math.pow(2, 10 * (k -= 1)) *
	                            Math.sin((k - s) * (2 * Math.PI) / p));
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ElasticOut: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1; s = p / 4;
	                }
	                else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                return (a * Math.pow(2, -10 * k) *
	                        Math.sin((k - s) * (2 * Math.PI) / p) + 1);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            ElasticInOut: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1; s = p / 4;
	                }
	                else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                if ((k *= 2) < 1) {
	                    return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
	                        * Math.sin((k - s) * (2 * Math.PI) / p));
	                }
	                return a * Math.pow(2, -10 * (k -= 1))
	                        * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	
	            },
	
	            // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BackIn: function (k) {
	                var s = 1.70158;
	                return k * k * ((s + 1) * k - s);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BackOut: function (k) {
	                var s = 1.70158;
	                return --k * k * ((s + 1) * k + s) + 1;
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BackInOut: function (k) {
	                var s = 1.70158 * 1.525;
	                if ((k *= 2) < 1) {
	                    return 0.5 * (k * k * ((s + 1) * k - s));
	                }
	                return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	            },
	
	            // 创建弹跳效果
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BounceIn: function (k) {
	                return 1 - easing.BounceOut(1 - k);
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BounceOut: function (k) {
	                if (k < (1 / 2.75)) {
	                    return 7.5625 * k * k;
	                }
	                else if (k < (2 / 2.75)) {
	                    return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	                }
	                else if (k < (2.5 / 2.75)) {
	                    return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	                }
	                else {
	                    return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	                }
	            },
	            /**
	             * @param {number} k
	             * @return {number}
	             */
	            BounceInOut: function (k) {
	                if (k < 0.5) {
	                    return easing.BounceIn(k * 2) * 0.5;
	                }
	                return easing.BounceOut(k * 2 - 1) * 0.5 + 0.5;
	            }
	        };
	
	        return easing;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：孤岛数据
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ChartBase = __webpack_require__(197);
	    
	    // 图形依赖
	    var CircleShape = __webpack_require__(218);
	    
	    var ecConfig = __webpack_require__(167);
	    ecConfig.island = {
	        zlevel: 0,                  // 一级层叠
	        z: 5,                       // 二级层叠
	        r: 15,
	        calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%
	    };
	
	    var ecData = __webpack_require__(215);
	    var zrUtil = __webpack_require__(168);
	    var zrEvent = __webpack_require__(170);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表选项
	     */
	    function Island(ecTheme, messageCenter, zr, option, myChart) {
	        // 图表基类
	        ChartBase.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this._nameConnector;
	        this._valueConnector;
	        this._zrHeight = this.zr.getHeight();
	        this._zrWidth = this.zr.getWidth();
	
	        var self = this;
	        /**
	         * 滚轮改变孤岛数据值
	         */
	        self.shapeHandler.onmousewheel = function (param) {
	            var shape = param.target;
	
	            var event = param.event;
	            var delta = zrEvent.getDelta(event);
	            delta = delta > 0 ? (-1) : 1;
	            shape.style.r -= delta;
	            shape.style.r = shape.style.r < 5 ? 5 : shape.style.r;
	
	            var value = ecData.get(shape, 'value');
	            var dvalue = value * self.option.island.calculateStep;
	            value = dvalue > 1
	                    ? (Math.round(value - dvalue * delta))
	                    : +(value - dvalue * delta).toFixed(2);
	
	            var name = ecData.get(shape, 'name');
	            shape.style.text = name + ':' + value;
	
	            ecData.set(shape, 'value', value);
	            ecData.set(shape, 'name', name);
	
	            self.zr.modShape(shape.id);
	            self.zr.refreshNextFrame();
	            zrEvent.stop(event);
	        };
	    }
	    
	    Island.prototype = {
	        type: ecConfig.CHART_TYPE_ISLAND,
	        /**
	         * 孤岛合并
	         *
	         * @param {string} tarShapeIndex 目标索引
	         * @param {Object} srcShape 源目标，合入目标后删除
	         */
	        _combine: function (tarShape, srcShape) {
	            var zrColor = __webpack_require__(187);
	            var accMath = __webpack_require__(219);
	            var value = accMath.accAdd(
	                            ecData.get(tarShape, 'value'),
	                            ecData.get(srcShape, 'value')
	                        );
	            var name = ecData.get(tarShape, 'name')
	                       + this._nameConnector
	                       + ecData.get(srcShape, 'name');
	
	            tarShape.style.text = name + this._valueConnector + value;
	
	            ecData.set(tarShape, 'value', value);
	            ecData.set(tarShape, 'name', name);
	            tarShape.style.r = this.option.island.r;
	            tarShape.style.color = zrColor.mix(
	                tarShape.style.color,
	                srcShape.style.color
	            );
	        },
	
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                newOption.island = this.reformOption(newOption.island);
	                this.option = newOption;
	    
	                this._nameConnector = this.option.nameConnector;
	                this._valueConnector = this.option.valueConnector;
	            }
	        },
	        
	        getOption: function () {
	            return this.option;
	        },
	
	        resize: function () {
	            var newWidth = this.zr.getWidth();
	            var newHieght = this.zr.getHeight();
	            var xScale = newWidth / (this._zrWidth || newWidth);
	            var yScale = newHieght / (this._zrHeight || newHieght);
	            if (xScale === 1 && yScale === 1) {
	                return;
	            }
	            this._zrWidth = newWidth;
	            this._zrHeight = newHieght;
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.modShape(
	                    this.shapeList[i].id,
	                    {
	                        style: {
	                            x: Math.round(this.shapeList[i].style.x * xScale),
	                            y: Math.round(this.shapeList[i].style.y * yScale)
	                        }
	                    }
	                );
	            }
	        },
	
	        add: function (shape) {
	            var name = ecData.get(shape, 'name');
	            var value = ecData.get(shape, 'value');
	            var seriesName = ecData.get(shape, 'series') != null
	                             ? ecData.get(shape, 'series').name
	                             : '';
	            var font = this.getFont(this.option.island.textStyle);
	            var islandOption = this.option.island;
	            var islandShape = {
	                zlevel: islandOption.zlevel,
	                z: islandOption.z,
	                style: {
	                    x: shape.style.x,
	                    y: shape.style.y,
	                    r: this.option.island.r,
	                    color: shape.style.color || shape.style.strokeColor,
	                    text: name + this._valueConnector + value,
	                    textFont: font
	                },
	                draggable: true,
	                hoverable: true,
	                onmousewheel: this.shapeHandler.onmousewheel,
	                _type: 'island'
	            };
	            if (islandShape.style.color === '#fff') {
	                islandShape.style.color = shape.style.strokeColor;
	            }
	            this.setCalculable(islandShape);
	            islandShape.dragEnableTime = 0;
	            ecData.pack(
	                islandShape,
	                {name:seriesName}, -1,
	                value, -1,
	                name
	            );
	            islandShape = new CircleShape(islandShape);
	            this.shapeList.push(islandShape);
	            this.zr.addShape(islandShape);
	        },
	
	        del: function (shape) {
	            this.zr.delShape(shape.id);
	            var newShapeList = [];
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].id != shape.id) {
	                    newShapeList.push(this.shapeList[i]);
	                }
	            }
	            this.shapeList = newShapeList;
	        },
	
	        /**
	         * 数据项被拖拽进来， 重载基类方法
	         */
	        ondrop: function (param, status) {
	            if (!this.isDrop || !param.target) {
	                // 没有在当前实例上发生拖拽行为则直接返回
	                return;
	            }
	            // 拖拽产生孤岛数据合并
	            var target = param.target;      // 拖拽安放目标
	            var dragged = param.dragged;    // 当前被拖拽的图形对象
	
	            this._combine(target, dragged);
	            this.zr.modShape(target.id);
	
	            status.dragIn = true;
	
	            // 处理完拖拽事件后复位
	            this.isDrop = false;
	
	            return;
	        },
	
	        /**
	         * 数据项被拖拽出去， 重载基类方法
	         */
	        ondragend: function (param, status) {
	            var target = param.target;      // 拖拽安放目标
	            if (!this.isDragend) {
	                // 拖拽的不是孤岛数据，如果没有图表接受孤岛数据，需要新增孤岛数据
	                if (!status.dragIn) {
	                    target.style.x = zrEvent.getX(param.event);
	                    target.style.y = zrEvent.getY(param.event);
	                    this.add(target);
	                    status.needRefresh = true;
	                }
	            }
	            else {
	                // 拖拽的是孤岛数据，如果有图表接受了孤岛数据，需要删除孤岛数据
	                if (status.dragIn) {
	                    this.del(target);
	                    status.needRefresh = true;
	                }
	            }
	
	            // 处理完拖拽事件后复位
	            this.isDragend = false;
	
	            return;
	        }
	    };
	    
	    zrUtil.inherits(Island, ChartBase);
	    
	    // 图表注册
	    __webpack_require__(226).define('island', Island);
	    
	    return Island;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    // 图形依赖
	    var ImageShape = __webpack_require__(190);
	    var IconShape = __webpack_require__(198);
	    var MarkLineShape = __webpack_require__(204);
	    var SymbolShape = __webpack_require__(208);
	    var PolylineShape = __webpack_require__(213);
	    var ShapeBundle = __webpack_require__(214);
	    
	    var ecConfig = __webpack_require__(167);
	    var ecData = __webpack_require__(215);
	    var ecAnimation = __webpack_require__(216);
	    var ecEffect = __webpack_require__(217);
	    var accMath = __webpack_require__(219);
	    var ComponentBase = __webpack_require__(220);
	    var EdgeBundling = __webpack_require__(223);
	
	    var zrUtil = __webpack_require__(168);
	    var zrArea = __webpack_require__(183);
	
	    // Some utility functions
	    function isCoordAvailable(coord) {
	        return coord.x != null && coord.y != null;
	    }
	    
	    function Base(ecTheme, messageCenter, zr, option, myChart) {
	
	        ComponentBase.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        var self = this;
	        this.selectedMap = {};
	        this.lastShapeList = [];
	        this.shapeHandler = {
	            onclick: function () {
	                self.isClick = true;
	            },
	            
	            ondragover: function (param) {
	                // 返回触发可计算特性的图形提示
	                var calculableShape = param.target;
	                calculableShape.highlightStyle = calculableShape.highlightStyle || {};
	                
	                // 备份特出特性
	                var highlightStyle = calculableShape.highlightStyle;
	                var brushType = highlightStyle.brushTyep;
	                var strokeColor = highlightStyle.strokeColor;
	                var lineWidth = highlightStyle.lineWidth;
	                
	                highlightStyle.brushType = 'stroke';
	                highlightStyle.strokeColor = self.ecTheme.calculableColor
	                                             || ecConfig.calculableColor;
	                highlightStyle.lineWidth = calculableShape.type === 'icon' ? 30 : 10;
	
	                self.zr.addHoverShape(calculableShape);
	                
	                setTimeout(function (){
	                    // 复位
	                    if (highlightStyle) {
	                        highlightStyle.brushType = brushType;
	                        highlightStyle.strokeColor = strokeColor;
	                        highlightStyle.lineWidth = lineWidth;
	                    }
	                },20);
	            },
	            
	            ondrop: function (param) {
	                // 排除一些非数据的拖拽进入
	                if (ecData.get(param.dragged, 'data') != null) {
	                    self.isDrop = true;
	                }
	            },
	            
	            ondragend: function () {
	                self.isDragend = true;
	            }
	        };
	    }
	    
	    /**
	     * 基类方法
	     */
	    Base.prototype = {
	        /**
	         * 图形拖拽特性 
	         */
	        setCalculable: function (shape) {
	            shape.dragEnableTime = this.ecTheme.DRAG_ENABLE_TIME || ecConfig.DRAG_ENABLE_TIME;
	            shape.ondragover = this.shapeHandler.ondragover;
	            shape.ondragend = this.shapeHandler.ondragend;
	            shape.ondrop = this.shapeHandler.ondrop;
	            return shape;
	        },
	
	        /**
	         * 数据项被拖拽进来
	         */
	        ondrop: function (param, status) {
	            if (!this.isDrop || !param.target || status.dragIn) {
	                // 没有在当前实例上发生拖拽行为或者已经被认领了则直接返回
	                return;
	            }
	            var target = param.target;      // 拖拽安放目标
	            var dragged = param.dragged;    // 当前被拖拽的图形对象
	
	            var seriesIndex = ecData.get(target, 'seriesIndex');
	            var dataIndex = ecData.get(target, 'dataIndex');
	
	            var series = this.series;
	            var data;
	            var legend = this.component.legend;
	            if (dataIndex === -1) {
	                // 落到calculableCase上，数据被拖拽进某个饼图|雷达|漏斗，增加数据
	                if (ecData.get(dragged, 'seriesIndex') == seriesIndex) {
	                    // 自己拖拽到自己
	                    status.dragOut = status.dragIn = status.needRefresh = true;
	                    this.isDrop = false;
	                    return;
	                }
	                
	                data = {
	                    value: ecData.get(dragged, 'value'),
	                    name: ecData.get(dragged, 'name')
	                };
	
	                // 修饼图数值不为负值
	                if (this.type === ecConfig.CHART_TYPE_PIE && data.value < 0) {
	                    data.value = 0;
	                }
	
	                var hasFind = false;
	                var sData = series[seriesIndex].data;
	                for (var i = 0, l = sData.length; i < l; i++) {
	                    if (sData[i].name === data.name && sData[i].value === '-') {
	                        series[seriesIndex].data[i].value = data.value;
	                        hasFind = true;
	                    }
	                }
	                !hasFind && series[seriesIndex].data.push(data);
	
	                legend && legend.add(
	                    data.name,
	                    dragged.style.color || dragged.style.strokeColor
	                );
	            }
	            else {
	                // 落到数据item上，数据被拖拽到某个数据项上，数据修改
	                data = series[seriesIndex].data[dataIndex] || '-';
	                if (data.value != null) {
	                    if (data.value != '-') {
	                        series[seriesIndex].data[dataIndex].value = 
	                            accMath.accAdd(
	                                series[seriesIndex].data[dataIndex].value,
	                                ecData.get(dragged, 'value')
	                            );
	                    }
	                    else {
	                        series[seriesIndex].data[dataIndex].value =
	                            ecData.get(dragged, 'value');
	                    }
	                    
	                    if (this.type === ecConfig.CHART_TYPE_FUNNEL
	                        || this.type === ecConfig.CHART_TYPE_PIE
	                    ) {
	                        legend && legend.getRelatedAmount(data.name) === 1 
	                               && this.component.legend.del(data.name);
	                        data.name += this.option.nameConnector + ecData.get(dragged, 'name');
	                        legend && legend.add(
	                            data.name,
	                            dragged.style.color || dragged.style.strokeColor
	                        );
	                    }
	                }
	                else {
	                    if (data != '-') {
	                        series[seriesIndex].data[dataIndex] = 
	                            accMath.accAdd(
	                                series[seriesIndex].data[dataIndex],
	                                ecData.get(dragged, 'value')
	                            );
	                    }
	                    else {
	                        series[seriesIndex].data[dataIndex] =
	                            ecData.get(dragged, 'value');
	                    }
	                }
	            }
	
	            // 别status = {}赋值啊！！
	            status.dragIn = status.dragIn || true;
	
	            // 处理完拖拽事件后复位
	            this.isDrop = false;
	
	            var self = this;
	            setTimeout(function(){
	                self.zr.trigger('mousemove', param.event);
	            }, 300);
	            
	            return;
	        },
	
	        /**
	         * 数据项被拖拽出去
	         */
	        ondragend: function (param, status) {
	            if (!this.isDragend || !param.target || status.dragOut) {
	                // 没有在当前实例上发生拖拽行为或者已经被认领了则直接返回
	                return;
	            }
	            var target = param.target;      // 被拖拽图形元素
	
	            var seriesIndex = ecData.get(target, 'seriesIndex');
	            var dataIndex = ecData.get(target, 'dataIndex');
	
	            var series = this.series;
	
	            // 删除被拖拽走的数据
	            if (series[seriesIndex].data[dataIndex].value != null) {
	                series[seriesIndex].data[dataIndex].value = '-';
	                // 清理可能有且唯一的legend data
	                var name = series[seriesIndex].data[dataIndex].name;
	                var legend = this.component.legend;
	                if (legend && legend.getRelatedAmount(name) === 0) {
	                    legend.del(name);
	                }
	            }
	            else {
	                series[seriesIndex].data[dataIndex] = '-';
	            }
	            
	            // 别status = {}赋值啊！！
	            status.dragOut = true;
	            status.needRefresh = true;
	
	            // 处理完拖拽事件后复位
	            this.isDragend = false;
	
	            return;
	        },
	
	        /**
	         * 图例选择
	         */
	        onlegendSelected: function (param, status) {
	            var legendSelected = param.selected;
	            for (var itemName in this.selectedMap) {
	                if (this.selectedMap[itemName] != legendSelected[itemName]) {
	                    // 有一项不一致都需要重绘
	                    status.needRefresh = true;
	                }
	                this.selectedMap[itemName] = legendSelected[itemName];
	            }
	            return;
	        },
	        
	        /**
	         * 折线图、柱形图公用方法
	         */
	        _buildPosition: function() {
	            this._symbol = this.option.symbolList;
	            this._sIndex2ShapeMap = {};  // series拐点图形类型，seriesIndex索引到shape type
	            this._sIndex2ColorMap = {};  // series默认颜色索引，seriesIndex索引到color
	
	            this.selectedMap = {};
	            this.xMarkMap = {};
	            
	            var series = this.series;
	            // 水平垂直双向series索引 ，position索引到seriesIndex
	            var _position2sIndexMap = {
	                top: [],
	                bottom: [],
	                left: [],
	                right: [],
	                other: []
	            };
	            var xAxisIndex;
	            var yAxisIndex;
	            var xAxis;
	            var yAxis;
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].type === this.type) {
	                    series[i] = this.reformOption(series[i]);
	                    this.legendHoverLink = series[i].legendHoverLink || this.legendHoverLink;
	                    xAxisIndex = series[i].xAxisIndex;
	                    yAxisIndex = series[i].yAxisIndex;
	                    xAxis = this.component.xAxis.getAxis(xAxisIndex);
	                    yAxis = this.component.yAxis.getAxis(yAxisIndex);
	                    if (xAxis.type === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY) {
	                        _position2sIndexMap[xAxis.getPosition()].push(i);
	                    }
	                    else if (yAxis.type === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY) {
	                        _position2sIndexMap[yAxis.getPosition()].push(i);
	                    }
	                    else {
	                        _position2sIndexMap.other.push(i);
	                    }
	                }
	            }
	            // console.log(_position2sIndexMap);
	            for (var position in _position2sIndexMap) {
	                if (_position2sIndexMap[position].length > 0) {
	                    this._buildSinglePosition(
	                        position, _position2sIndexMap[position]
	                    );
	                }
	            }
	
	            this.addShapeList();
	        },
	        
	        /**
	         * 构建单个方向上的折线图、柱形图公用方法
	         *
	         * @param {number} seriesIndex 系列索引
	         */
	        _buildSinglePosition: function (position, seriesArray) {
	            var mapData = this._mapData(seriesArray);
	            var locationMap = mapData.locationMap;
	            var maxDataLength = mapData.maxDataLength;
	
	            if (maxDataLength === 0 || locationMap.length === 0) {
	                return;
	            }
	            switch (position) {
	                case 'bottom' :
	                case 'top' :
	                    this._buildHorizontal(seriesArray, maxDataLength, locationMap, this.xMarkMap);
	                    break;
	                case 'left' :
	                case 'right' :
	                    this._buildVertical(seriesArray, maxDataLength, locationMap, this.xMarkMap);
	                    break;
	                case 'other' :
	                    this._buildOther(seriesArray, maxDataLength, locationMap, this.xMarkMap);
	                    break;
	            }
	            
	            for (var i = 0, l = seriesArray.length; i < l; i++) {
	                this.buildMark(seriesArray[i]);
	            }
	        },
	        
	        /**
	         * 数据整形，折线图、柱形图公用方法
	         * 数组位置映射到系列索引
	         */
	        _mapData: function (seriesArray) {
	            var series = this.series;
	            var serie;                              // 临时映射变量
	            var dataIndex = 0;                      // 堆积数据所在位置映射
	            var stackMap = {};                      // 堆积数据位置映射，堆积组在二维中的第几项
	            var magicStackKey = '__kener__stack__'; // 堆积命名，非堆积数据安单一堆积处理
	            var stackKey;                           // 临时映射变量
	            var serieName;                          // 临时映射变量
	            var legend = this.component.legend;
	            var locationMap = [];                   // 需要返回的东西：数组位置映射到系列索引
	            var maxDataLength = 0;                  // 需要返回的东西：最大数据长度
	            var iconShape;
	            // 计算需要显示的个数和分配位置并记在下面这个结构里
	            for (var i = 0, l = seriesArray.length; i < l; i++) {
	                serie = series[seriesArray[i]];
	                serieName = serie.name;
	                
	                this._sIndex2ShapeMap[seriesArray[i]] = this._sIndex2ShapeMap[seriesArray[i]]
	                                                        || this.query(serie,'symbol')
	                                                        || this._symbol[i % this._symbol.length];
	                      
	                if (legend){
	                    this.selectedMap[serieName] = legend.isSelected(serieName);
	                    
	                    this._sIndex2ColorMap[seriesArray[i]] = legend.getColor(serieName);
	                        
	                    iconShape = legend.getItemShape(serieName);
	                    if (iconShape) {
	                        // 回调legend，换一个更形象的icon
	                        var style = iconShape.style;
	                        if (this.type == ecConfig.CHART_TYPE_LINE) {
	                            style.iconType = 'legendLineIcon';
	                            style.symbol =  this._sIndex2ShapeMap[seriesArray[i]];
	                        }
	                        else if (serie.itemStyle.normal.barBorderWidth > 0) {
	                            var highlightStyle = iconShape.highlightStyle;
	                            style.brushType = 'both';
	                            style.x += 1;
	                            style.y += 1;
	                            style.width -= 2;
	                            style.height -= 2;
	                            style.strokeColor 
	                                = highlightStyle.strokeColor 
	                                = serie.itemStyle.normal.barBorderColor;
	                            highlightStyle.lineWidth = 3;
	                        }
	                        
	                        legend.setItemShape(serieName, iconShape);
	                    }
	                }
	                else {
	                    this.selectedMap[serieName] = true;
	                    this._sIndex2ColorMap[seriesArray[i]] = this.zr.getColor(seriesArray[i]);
	                }
	
	                if (this.selectedMap[serieName]) {
	                    stackKey = serie.stack || (magicStackKey + seriesArray[i]);
	                    if (stackMap[stackKey] == null) {
	                        stackMap[stackKey] = dataIndex;
	                        locationMap[dataIndex] = [seriesArray[i]];
	                        dataIndex++;
	                    }
	                    else {
	                        // 已经分配了位置就推进去就行
	                        locationMap[stackMap[stackKey]].push(seriesArray[i]);
	                    }
	                }
	                // 兼职帮算一下最大长度
	                maxDataLength = Math.max(maxDataLength, serie.data.length);
	            }
	            /* 调试输出
	            var s = '';
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                s = '[';
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    s +='['
	                    for (var m = 0, n = locationMap[j].length - 1; m < n; m++) {
	                        s += series[locationMap[j][m]].data[i] + ','
	                    }
	                    s += series[locationMap[j][locationMap[j].length - 1]]
	                         .data[i];
	                    s += ']'
	                }
	                s += ']';
	                console.log(s);
	            }
	            console.log(locationMap)
	            */
	
	            return {
	                locationMap: locationMap,
	                maxDataLength: maxDataLength
	            };
	        },
	        
	        _calculMarkMapXY : function(xMarkMap, locationMap, xy) {
	            var series = this.series;
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                    var seriesIndex = locationMap[j][m];
	                    var valueIndex = xy == 'xy' ? 0 : '';
	                    var grid = this.component.grid;
	                    var tarMark = xMarkMap[seriesIndex];
	
	                    if (xy.indexOf('x') != '-1') {
	                        if (tarMark['counter' + valueIndex] > 0) {
	                            tarMark['average' + valueIndex] =
	                                tarMark['sum' + valueIndex] / tarMark['counter' + valueIndex];
	                        }
	                        
	                        var x = this.component.xAxis.getAxis(series[seriesIndex].xAxisIndex || 0)
	                                .getCoord(tarMark['average' + valueIndex]);
	                        tarMark['averageLine' + valueIndex] = [
	                            [x, grid.getYend()],
	                            [x, grid.getY()]
	                        ];
	                        tarMark['minLine' + valueIndex] = [
	                            [tarMark['minX' + valueIndex], grid.getYend()],
	                            [tarMark['minX' + valueIndex], grid.getY()]
	                        ];
	                        tarMark['maxLine' + valueIndex] = [
	                            [tarMark['maxX' + valueIndex], grid.getYend()],
	                            [tarMark['maxX' + valueIndex], grid.getY()]
	                        ];
	                        
	                        tarMark.isHorizontal = false;
	                    }
	                    
	                    valueIndex = xy == 'xy' ? 1 : '';
	                    if (xy.indexOf('y') != '-1') {
	                        if (tarMark['counter' + valueIndex] > 0) {
	                            tarMark['average' + valueIndex] = 
	                                tarMark['sum' + valueIndex] / tarMark['counter' + valueIndex];
	                        }
	                        var y = this.component.yAxis.getAxis(series[seriesIndex].yAxisIndex || 0)
	                                .getCoord(tarMark['average' + valueIndex]);
	                        tarMark['averageLine' + valueIndex] = [
	                            [grid.getX(), y],
	                            [grid.getXend(), y]
	                        ];
	                        tarMark['minLine' + valueIndex] = [
	                            [grid.getX(), tarMark['minY' + valueIndex]],
	                            [grid.getXend(), tarMark['minY' + valueIndex]]
	                        ];
	                        tarMark['maxLine' + valueIndex] = [
	                            [grid.getX(), tarMark['maxY' + valueIndex]],
	                            [grid.getXend(), tarMark['maxY' + valueIndex]]
	                        ];
	                        
	                        tarMark.isHorizontal = true;
	                    }
	                }
	            }
	        },
	        
	        /**
	         * 添加文本 
	         */
	        addLabel: function (tarShape, serie, data, name, orient) {
	            // 多级控制
	            var queryTarget = [data, serie];
	            var nLabel = this.deepMerge(queryTarget, 'itemStyle.normal.label');
	            var eLabel = this.deepMerge(queryTarget, 'itemStyle.emphasis.label');
	
	            var nTextStyle = nLabel.textStyle || {};
	            var eTextStyle = eLabel.textStyle || {};
	            
	            if (nLabel.show) {
	                var style = tarShape.style;
	                style.text = this._getLabelText(
	                    serie, data, name, 'normal'
	                );
	                style.textPosition = nLabel.position == null
	                                     ? (orient === 'horizontal' ? 'right' : 'top')
	                                     : nLabel.position;
	                style.textColor = nTextStyle.color;
	                style.textFont = this.getFont(nTextStyle);
	                style.textAlign = nTextStyle.align;
	                style.textBaseline = nTextStyle.baseline;
	            }
	            if (eLabel.show) {
	                var highlightStyle = tarShape.highlightStyle;
	                highlightStyle.text = this._getLabelText(
	                    serie, data, name, 'emphasis'
	                );
	                highlightStyle.textPosition = nLabel.show
	                                              ? tarShape.style.textPosition
	                                              : (eLabel.position == null
	                                                 ? (orient === 'horizontal' ? 'right' : 'top')
	                                                 : eLabel.position);
	                highlightStyle.textColor = eTextStyle.color;
	                highlightStyle.textFont = this.getFont(eTextStyle);
	                highlightStyle.textAlign = eTextStyle.align;
	                highlightStyle.textBaseline = eTextStyle.baseline;
	            }
	            
	            return tarShape;
	        },
	        
	        /**
	         * 根据lable.format计算label text
	         */
	        _getLabelText: function (serie, data, name, status) {
	            var formatter = this.deepQuery(
	                [data, serie],
	                'itemStyle.' + status + '.label.formatter'
	            );
	            if (!formatter && status === 'emphasis') {
	                // emphasis时需要看看normal下是否有formatter
	                formatter = this.deepQuery(
	                    [data, serie],
	                    'itemStyle.normal.label.formatter'
	                );
	            }
	            
	            var value = this.getDataFromOption(data, '-');
	            
	            if (formatter) {
	                if (typeof formatter === 'function') {
	                    return formatter.call(
	                        this.myChart,
	                        {
	                            seriesName: serie.name,
	                            series: serie,
	                            name: name,
	                            value: value,
	                            data: data,
	                            status: status
	                        }
	                    );
	                }
	                else if (typeof formatter === 'string') {
	                    formatter = formatter.replace('{a}','{a0}')
	                                         .replace('{b}','{b0}')
	                                         .replace('{c}','{c0}')
	                                         .replace('{a0}', serie.name)
	                                         .replace('{b0}', name)
	                                         .replace('{c0}', this.numAddCommas(value));
	    
	                    return formatter;
	                }
	            }
	            else {
	                if (value instanceof Array) {
	                    return value[2] != null
	                           ? this.numAddCommas(value[2])
	                           : (value[0] + ' , ' + value[1]);
	                }
	                else {
	                    return this.numAddCommas(value);
	                }
	            }
	        },
	        
	        /**
	         * 标线标注 
	         */
	        buildMark: function (seriesIndex) {
	            var serie = this.series[seriesIndex];
	            if (this.selectedMap[serie.name]) {
	                serie.markLine && this._buildMarkLine(seriesIndex);
	                serie.markPoint && this._buildMarkPoint(seriesIndex);
	            }
	        },
	        
	        /**
	         * 标注逻辑
	         */
	        _buildMarkPoint: function (seriesIndex) {
	            var attachStyle =  (this.markAttachStyle || {})[seriesIndex];
	            var serie = this.series[seriesIndex];
	            var mpData;
	            var pos;
	            var markPoint = zrUtil.clone(serie.markPoint);
	            for (var i = 0, l = markPoint.data.length; i < l; i++) {
	                mpData = markPoint.data[i];
	                pos = this.getMarkCoord(seriesIndex, mpData);
	                mpData.x = mpData.x != null ? mpData.x : pos[0];
	                mpData.y = mpData.y != null ? mpData.y : pos[1];
	                if (mpData.type
	                    && (mpData.type === 'max' || mpData.type === 'min')
	                ) {
	                    // 特殊值内置支持
	                    mpData.value = pos[3];
	                    mpData.name = mpData.name || mpData.type;
	                    mpData.symbolSize = mpData.symbolSize
	                        || (zrArea.getTextWidth(pos[3], this.getFont()) / 2 + 5);
	                }
	            }
	            
	            var shapeList = this._markPoint(seriesIndex, markPoint);
	            
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                var tarShape = shapeList[i];
	                tarShape.zlevel = serie.zlevel;
	                tarShape.z = serie.z + 1;
	                for (var key in attachStyle) {
	                    tarShape[key] = zrUtil.clone(attachStyle[key]);
	                }
	                this.shapeList.push(tarShape);
	            }
	            // 个别特殊图表需要自己addShape
	            if (this.type === ecConfig.CHART_TYPE_FORCE
	                || this.type === ecConfig.CHART_TYPE_CHORD
	            ) {
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    this.zr.addShape(shapeList[i]);
	                }
	            }
	        },
	        
	        /**
	         * 标线逻辑
	         */
	        _buildMarkLine: function (seriesIndex) {
	            var attachStyle =  (this.markAttachStyle || {})[seriesIndex];
	            var serie = this.series[seriesIndex];
	            var pos;
	            var markLine = zrUtil.clone(serie.markLine);
	            for (var i = 0, l = markLine.data.length; i < l; i++) {
	                var mlData = markLine.data[i];
	                if (mlData.type
	                    && (mlData.type === 'max' || mlData.type === 'min' || mlData.type === 'average')
	                ) {
	                    // 特殊值内置支持
	                    pos = this.getMarkCoord(seriesIndex, mlData);
	                    markLine.data[i] = [zrUtil.clone(mlData), {}];
	                    markLine.data[i][0].name = mlData.name || mlData.type;
	                    markLine.data[i][0].value = mlData.type !== 'average'
	                                                ? pos[3]
	                                                : +pos[3].toFixed(
	                                                      markLine.precision != null 
	                                                      ? markLine.precision 
	                                                      : this.deepQuery(
	                                                            [this.ecTheme, ecConfig],
	                                                            'markLine.precision'
	                                                        )
	                                                  );
	                    pos = pos[2];
	                    mlData = [{},{}];
	                }
	                else {
	                    pos = [
	                        this.getMarkCoord(seriesIndex, mlData[0]),
	                        this.getMarkCoord(seriesIndex, mlData[1])
	                    ];
	                }
	                if (pos == null || pos[0] == null || pos[1] == null) {
	                    // 不在显示区域内
	                    continue;
	                }
	                markLine.data[i][0].x = mlData[0].x != null ? mlData[0].x : pos[0][0];
	                markLine.data[i][0].y = mlData[0].y != null ? mlData[0].y : pos[0][1];
	                markLine.data[i][1].x = mlData[1].x != null ? mlData[1].x : pos[1][0];
	                markLine.data[i][1].y = mlData[1].y != null ? mlData[1].y : pos[1][1];
	            }
	            
	            var shapeList = this._markLine(seriesIndex, markLine);
	
	            var isLarge = markLine.large;
	
	            if (isLarge) {
	                var shapeBundle = new ShapeBundle({
	                    style: {
	                        shapeList: shapeList
	                    }
	                });
	                var firstShape = shapeList[0];
	                if (firstShape) {
	                    zrUtil.merge(shapeBundle.style, firstShape.style);
	                    zrUtil.merge(shapeBundle.highlightStyle = {}, firstShape.highlightStyle);
	                    shapeBundle.style.brushType = 'stroke';
	                    shapeBundle.zlevel = serie.zlevel;
	                    shapeBundle.z = serie.z + 1;
	                    shapeBundle.hoverable = false;
	                    for (var key in attachStyle) {
	                        shapeBundle[key] = zrUtil.clone(attachStyle[key]);
	                    }
	                }
	                this.shapeList.push(shapeBundle);
	                this.zr.addShape(shapeBundle);
	
	                shapeBundle._mark = 'largeLine';
	                var effect = markLine.effect;
	                if (effect.show) {
	                    shapeBundle.effect = effect;
	                }
	            }
	            else {
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    var tarShape = shapeList[i];
	                    tarShape.zlevel = serie.zlevel;
	                    tarShape.z = serie.z + 1;
	                    for (var key in attachStyle) {
	                        tarShape[key] = zrUtil.clone(attachStyle[key]);
	                    }
	                    this.shapeList.push(tarShape);
	                }
	                // 个别特殊图表需要自己addShape
	                if (this.type === ecConfig.CHART_TYPE_FORCE
	                    || this.type === ecConfig.CHART_TYPE_CHORD
	                ) {
	                    for (var i = 0, l = shapeList.length; i < l; i++) {
	                        this.zr.addShape(shapeList[i]);
	                    }
	                }
	            }
	        },
	        
	        /**
	         * 标注多级控制构造
	         */
	        _markPoint: function (seriesIndex, mpOption) {
	            var serie = this.series[seriesIndex];
	            var component = this.component;
	            zrUtil.merge(
	                zrUtil.merge(
	                    mpOption,
	                    zrUtil.clone(this.ecTheme.markPoint || {})
	                ),
	                zrUtil.clone(ecConfig.markPoint)
	            );
	
	            mpOption.name = serie.name;
	                   
	            var pList = [];
	            var data = mpOption.data;
	            var itemShape;
	            
	            var dataRange = component.dataRange;
	            var legend = component.legend;
	            var color;
	            var value;
	            var queryTarget;
	            var nColor;
	            var eColor;
	            var effect;
	            var zrWidth = this.zr.getWidth();
	            var zrHeight = this.zr.getHeight();
	
	            if (!mpOption.large) {
	                for (var i = 0, l = data.length; i < l; i++) {
	                    if (data[i].x == null || data[i].y == null) {
	                        continue;
	                    }
	                    value = data[i].value != null ? data[i].value : '';
	                    // 图例
	                    if (legend) {
	                        color = legend.getColor(serie.name);
	                    }
	                    // 值域
	                    if (dataRange) {
	                        color = isNaN(value) ? color : dataRange.getColor(value);
	                        
	                        queryTarget = [data[i], mpOption];
	                        nColor = this.deepQuery(queryTarget, 'itemStyle.normal.color')
	                                 || color;
	                        eColor = this.deepQuery(queryTarget, 'itemStyle.emphasis.color')
	                                 || nColor;
	                        // 有值域，并且值域返回null且用户没有自己定义颜色，则隐藏这个mark
	                        if (nColor == null && eColor == null) {
	                            continue;
	                        }
	                    }
	                    
	                    color = color == null ? this.zr.getColor(seriesIndex) : color;
	                    
	                    // 标准化一些参数
	                    data[i].tooltip = data[i].tooltip
	                                      || mpOption.tooltip
	                                      || {trigger:'item'}; // tooltip.trigger指定为item
	                    data[i].name = data[i].name != null ? data[i].name : '';
	                    data[i].value = value;
	
	                    // 复用getSymbolShape
	                    itemShape = this.getSymbolShape(
	                        mpOption, seriesIndex,      // 系列 
	                        data[i], i, data[i].name,   // 数据
	                        this.parsePercent(data[i].x, zrWidth),   // 坐标
	                        this.parsePercent(data[i].y, zrHeight),  // 坐标
	                        'pin', color,               // 默认symbol和color
	                        'rgba(0,0,0,0)',
	                        'horizontal'                // 走向，用于默认文字定位
	                    );
	                    itemShape._mark = 'point';
	                    
	                    effect = this.deepMerge(
	                        [data[i], mpOption],
	                        'effect'
	                    );
	                    if (effect.show) {
	                        itemShape.effect = effect;
	                    }
	                    
	                    if (serie.type === ecConfig.CHART_TYPE_MAP) {
	                        itemShape._geo = this.getMarkGeo(data[i]);
	                    }
	                    
	                    // 重新pack一下数据
	                    ecData.pack(
	                        itemShape,
	                        serie, seriesIndex,
	                        data[i], i,
	                        data[i].name,
	                        value
	                    );
	                    pList.push(itemShape);
	                }
	            }
	            else {
	                // 大规模MarkPoint
	                itemShape = this.getLargeMarkPointShape(seriesIndex, mpOption);
	                itemShape._mark = 'largePoint';
	                itemShape && pList.push(itemShape);
	            }
	            return pList;
	        },
	        
	        /**
	         * 标线多级控制构造
	         */
	        _markLine: (function () {
	            function normalizeOptionValue(mlOption, key) {
	                mlOption[key] = mlOption[key] instanceof Array
	                          ? mlOption[key].length > 1 
	                            ? mlOption[key] 
	                            : [mlOption[key][0], mlOption[key][0]]
	                          : [mlOption[key], mlOption[key]];
	            }
	
	            return function (seriesIndex, mlOption) {
	                var serie = this.series[seriesIndex];
	                var component = this.component;
	                var dataRange = component.dataRange;
	                var legend = component.legend;
	
	                zrUtil.merge(
	                    zrUtil.merge(
	                        mlOption,
	                        zrUtil.clone(this.ecTheme.markLine || {})
	                    ),
	                    zrUtil.clone(ecConfig.markLine)
	                );
	
	                var defaultColor = legend ? legend.getColor(serie.name)
	                    : this.zr.getColor(seriesIndex);
	
	                // 标准化一些同时支持Array和String的参数
	                normalizeOptionValue(mlOption, 'symbol');
	                normalizeOptionValue(mlOption, 'symbolSize');
	                normalizeOptionValue(mlOption, 'symbolRotate');
	
	                // Normalize and filter data
	                var data = mlOption.data;
	                var edges = [];
	                var zrWidth = this.zr.getWidth();
	                var zrHeight = this.zr.getHeight();
	                for (var i = 0; i < data.length; i++) {
	                    var mlData = data[i];
	                    if (isCoordAvailable(mlData[0])
	                        && isCoordAvailable(mlData[1])
	                    ) {
	                        // 组装一个mergeData
	                        var mergeData = this.deepMerge(mlData);
	                        var queryTarget = [mergeData, mlOption];
	                        var color = defaultColor;
	                        var value = mergeData.value != null ? mergeData.value : '';
	                        // 值域
	                        if (dataRange) {
	                            color = isNaN(value) ? color : dataRange.getColor(value);
	
	                            var nColor = this.deepQuery(queryTarget, 'itemStyle.normal.color')
	                                     || color;
	                            var eColor = this.deepQuery(queryTarget, 'itemStyle.emphasis.color')
	                                     || nColor;
	                            // 有值域，并且值域返回null且用户没有自己定义颜色，则隐藏这个mark
	                            if (nColor == null && eColor == null) {
	                                continue;
	                            }
	                        }
	                        // 标准化一些参数
	                        mlData[0].tooltip = mergeData.tooltip
	                                            || mlOption.tooltip
	                                            || {trigger:'item'}; // tooltip.trigger指定为item
	                        mlData[0].name = mlData[0].name || '';
	                        mlData[1].name = mlData[1].name || '';
	                        mlData[0].value = value;
	
	                        edges.push({
	                            points: [
	                                [this.parsePercent(mlData[0].x, zrWidth),
	                                this.parsePercent(mlData[0].y, zrHeight)],
	                                [this.parsePercent(mlData[1].x, zrWidth),
	                                this.parsePercent(mlData[1].y, zrHeight)]
	                            ],
	                            rawData: mlData,
	                            color: color
	                        });
	                    }
	                }
	
	                var enableBundling = this.query(mlOption, 'bundling.enable');
	                if (enableBundling) {
	                    var edgeBundling = new EdgeBundling();
	                    edgeBundling.maxTurningAngle = this.query(
	                        mlOption, 'bundling.maxTurningAngle'
	                    ) / 180 * Math.PI;
	                    edges = edgeBundling.run(edges);
	                }
	
	                mlOption.name = serie.name;
	  
	                var shapeList = [];
	
	                for (var i = 0, l = edges.length; i < l; i++) {
	                    var edge = edges[i];
	                    var rawEdge = edge.rawEdge || edge; 
	                    var mlData = rawEdge.rawData;
	                    var value = mlData.value != null ? mlData.value : '';
	
	                    var itemShape = this.getMarkLineShape(
	                        mlOption,
	                        seriesIndex,
	                        mlData,
	                        i,
	                        edge.points,
	                        enableBundling,
	                        rawEdge.color
	                    );
	                    itemShape._mark = 'line';
	                    
	                    var effect = this.deepMerge(
	                        [mlData[0], mlData[1], mlOption],
	                        'effect'
	                    );
	                    if (effect.show) {
	                        itemShape.effect = effect;
	                        itemShape.effect.large = mlOption.large;
	                    }
	                    
	                    if (serie.type === ecConfig.CHART_TYPE_MAP) {
	                        itemShape._geo = [
	                            this.getMarkGeo(mlData[0]),
	                            this.getMarkGeo(mlData[1])
	                        ];
	                    }
	                    
	                    // 重新pack一下数据
	                    ecData.pack(
	                        itemShape,
	                        serie, seriesIndex,
	                        mlData[0], i,
	                        mlData[0].name 
	                            // 不要帮我代码规范
	                            + (mlData[1].name !== '' ? (' > ' + mlData[1].name) : ''),
	                        value
	                    );
	                    shapeList.push(itemShape);
	                }
	
	                return shapeList;
	            };
	        })(),
	        
	        getMarkCoord: function () {
	            // 无转换位置
	            return [0, 0];
	        },
	        
	        /**
	         * symbol构造器 
	         */
	        getSymbolShape: function (
	            serie, seriesIndex,     // 系列 
	            data, dataIndex, name,  // 数据
	            x, y,                   // 坐标
	            symbol, color,          // 默认symbol和color，来自legend或dataRange全局分配
	            emptyColor,             // 折线的emptySymbol用白色填充
	            orient                  // 走向，用于默认文字定位
	        ) {
	            var queryTarget = [data, serie];
	            var value = this.getDataFromOption(data, '-');
	            
	            symbol = this.deepQuery(queryTarget, 'symbol') || symbol;
	            var symbolSize = this.deepQuery(queryTarget, 'symbolSize');
	            symbolSize = typeof symbolSize === 'function'
	                         ? symbolSize(value)
	                         : symbolSize;
	            if (typeof symbolSize === 'number') {
	                symbolSize = [symbolSize, symbolSize];
	            }
	            var symbolRotate = this.deepQuery(queryTarget, 'symbolRotate');
	            
	            var normal = this.deepMerge(
	                queryTarget,
	                'itemStyle.normal'
	            );
	            var emphasis = this.deepMerge(
	                queryTarget,
	                'itemStyle.emphasis'
	            );
	            var nBorderWidth = normal.borderWidth != null
	                               ? normal.borderWidth
	                               : (normal.lineStyle && normal.lineStyle.width);
	            if (nBorderWidth == null) {
	                nBorderWidth = symbol.match('empty') ? 2 : 0;
	            }
	            var eBorderWidth = emphasis.borderWidth != null
	                               ? emphasis.borderWidth
	                               : (emphasis.lineStyle && emphasis.lineStyle.width);
	            if (eBorderWidth == null) {
	                eBorderWidth = nBorderWidth + 2;
	            }
	
	            var nColor = this.getItemStyleColor(normal.color, seriesIndex, dataIndex, data);
	            var eColor = this.getItemStyleColor(emphasis.color, seriesIndex, dataIndex, data);
	            
	            var width = symbolSize[0];
	            var height = symbolSize[1];
	            var itemShape = new IconShape({
	                style: {
	                    iconType: symbol.replace('empty', '').toLowerCase(),
	                    x: x - width,
	                    y: y - height,
	                    width: width * 2,
	                    height: height * 2,
	                    brushType: 'both',
	                    color: symbol.match('empty') 
	                           ? emptyColor 
	                           : (nColor || color),
	                    strokeColor: normal.borderColor || nColor || color,
	                    lineWidth: nBorderWidth
	                },
	                highlightStyle: {
	                    color: symbol.match('empty') 
	                           ? emptyColor 
	                           : (eColor || nColor || color),
	                    strokeColor: emphasis.borderColor 
	                                 || normal.borderColor
	                                 || eColor
	                                 || nColor
	                                 || color,
	                    lineWidth: eBorderWidth
	                },
	                clickable: this.deepQuery(queryTarget, 'clickable')
	            });
	
	            if (symbol.match('image')) {
	                itemShape.style.image = symbol.replace(new RegExp('^image:\\/\\/'), '');
	                itemShape = new ImageShape({
	                    style: itemShape.style,
	                    highlightStyle: itemShape.highlightStyle,
	                    clickable: this.deepQuery(queryTarget, 'clickable')
	                });
	            }
	            
	            if (symbolRotate != null) {
	                itemShape.rotation = [
	                    symbolRotate * Math.PI / 180, x, y
	                ];
	            }
	            
	            if (symbol.match('star')) {
	                itemShape.style.iconType = 'star';
	                itemShape.style.n = 
	                    (symbol.replace('empty', '').replace('star','') - 0) || 5;
	            }
	            
	            if (symbol === 'none') {
	                itemShape.invisible = true;
	                itemShape.hoverable = false;
	            }
	            
	            /*
	            if (this.deepQuery([data, serie, option], 'calculable')) {
	                this.setCalculable(itemShape);
	                itemShape.draggable = true;
	            }
	            */
	
	            itemShape = this.addLabel(
	                itemShape, 
	                serie, data, name, 
	                orient
	            );
	            
	            if (symbol.match('empty')) {
	                if (itemShape.style.textColor == null) {
	                    itemShape.style.textColor = itemShape.style.strokeColor;
	                }
	                if (itemShape.highlightStyle.textColor == null) {
	                    itemShape.highlightStyle.textColor = 
	                        itemShape.highlightStyle.strokeColor;
	                }
	            }
	            
	            ecData.pack(
	                itemShape,
	                serie, seriesIndex,
	                data, dataIndex,
	                name
	            );
	
	            itemShape._x = x;
	            itemShape._y = y;
	            
	            itemShape._dataIndex = dataIndex;
	            itemShape._seriesIndex = seriesIndex;
	
	            return itemShape;
	        },
	        
	        /**
	         * 标线构造器 
	         */
	        getMarkLineShape: function (
	            mlOption,               // 系列 
	            seriesIndex,            // 系列索引
	            data,                   // 数据
	            dataIndex,              // 数据索引
	            points,                 // 坐标点
	            bundling,               // 是否边捆绑过
	            color                   // 默认color，来自legend或dataRange全局分配
	        ) {
	            var value0 = data[0].value != null ? data[0].value : '-';
	            var value1 = data[1].value != null ? data[1].value : '-';
	            var symbol = [
	                data[0].symbol || mlOption.symbol[0],
	                data[1].symbol || mlOption.symbol[1]
	            ];
	            var symbolSize = [
	                data[0].symbolSize || mlOption.symbolSize[0],
	                data[1].symbolSize || mlOption.symbolSize[1]
	            ];
	            symbolSize[0] = typeof symbolSize[0] === 'function'
	                            ? symbolSize[0](value0)
	                            : symbolSize[0];
	            symbolSize[1] = typeof symbolSize[1] === 'function'
	                            ? symbolSize[1](value1)
	                            : symbolSize[1];
	            var symbolRotate = [
	                this.query(data[0], 'symbolRotate') || mlOption.symbolRotate[0],
	                this.query(data[1], 'symbolRotate') || mlOption.symbolRotate[1]
	            ];
	            //console.log(symbol, symbolSize, symbolRotate);
	
	            var queryTarget = [data[0], data[1], mlOption];
	            var normal = this.deepMerge(
	                queryTarget,
	                'itemStyle.normal'
	            );
	            normal.color = this.getItemStyleColor(normal.color, seriesIndex, dataIndex, data);
	            var emphasis = this.deepMerge(
	                queryTarget,
	                'itemStyle.emphasis'
	            );
	            emphasis.color = this.getItemStyleColor(emphasis.color, seriesIndex, dataIndex, data);
	            
	            var nlineStyle = normal.lineStyle;
	            var elineStyle = emphasis.lineStyle;
	            
	            var nBorderWidth = nlineStyle.width;
	            if (nBorderWidth == null) {
	                nBorderWidth = normal.borderWidth;
	            }
	            var eBorderWidth = elineStyle.width;
	            if (eBorderWidth == null) {
	                eBorderWidth = emphasis.borderWidth != null 
	                               ? emphasis.borderWidth
	                               : (nBorderWidth + 2);
	            }
	            var smoothness = this.deepQuery(queryTarget, 'smoothness');
	            if (! this.deepQuery(queryTarget, 'smooth')) {
	                smoothness = 0;
	            }
	
	            var ShapeCtor = bundling ? PolylineShape : MarkLineShape;
	            var itemShape = new ShapeCtor({
	                style: {
	                    symbol: symbol,
	                    symbolSize: symbolSize,
	                    symbolRotate: symbolRotate,
	                    // data: [data[0].name,data[1].name],
	                    brushType: 'both',
	                    lineType: nlineStyle.type,
	                    shadowColor: nlineStyle.shadowColor
	                                 || nlineStyle.color
	                                 || normal.borderColor
	                                 || normal.color
	                                 || color,
	                    shadowBlur: nlineStyle.shadowBlur,
	                    shadowOffsetX: nlineStyle.shadowOffsetX,
	                    shadowOffsetY: nlineStyle.shadowOffsetY,
	                    color: normal.color || color,
	                    strokeColor: nlineStyle.color
	                                 || normal.borderColor
	                                 || normal.color
	                                 || color,
	                    lineWidth: nBorderWidth,
	                    symbolBorderColor: normal.borderColor
	                                       || normal.color
	                                       || color,
	                    symbolBorder: normal.borderWidth
	                },
	                highlightStyle: {
	                    shadowColor: elineStyle.shadowColor,
	                    shadowBlur: elineStyle.shadowBlur,
	                    shadowOffsetX: elineStyle.shadowOffsetX,
	                    shadowOffsetY: elineStyle.shadowOffsetY,
	                    color: emphasis.color|| normal.color || color,
	                    strokeColor: elineStyle.color
	                                 || nlineStyle.color
	                                 || emphasis.borderColor 
	                                 || normal.borderColor
	                                 || emphasis.color 
	                                 || normal.color
	                                 || color,
	                    lineWidth: eBorderWidth,
	                    symbolBorderColor: emphasis.borderColor
	                                       || normal.borderColor
	                                       || emphasis.color
	                                       || normal.color
	                                       || color,
	                    symbolBorder: emphasis.borderWidth == null
	                                  ? (normal.borderWidth + 2)
	                                  : (emphasis.borderWidth)
	                },
	                clickable: this.deepQuery(queryTarget, 'clickable')
	            });
	            var shapeStyle = itemShape.style;
	            if (bundling) {
	                shapeStyle.pointList = points;
	                shapeStyle.smooth = smoothness;
	            }
	            else {
	                shapeStyle.xStart = points[0][0];
	                shapeStyle.yStart = points[0][1];
	                shapeStyle.xEnd = points[1][0];
	                shapeStyle.yEnd = points[1][1];
	                shapeStyle.curveness = smoothness;
	                itemShape.updatePoints(itemShape.style);
	            }
	            
	            itemShape = this.addLabel(
	                itemShape, 
	                mlOption, 
	                data[0], 
	                data[0].name + ' : ' + data[1].name
	            );
	
	            return itemShape;
	        },
	        
	        /**
	         * 大规模标注构造器 
	         */
	        getLargeMarkPointShape: function(seriesIndex, mpOption) {
	            var serie = this.series[seriesIndex];
	            var component = this.component;
	            var data = mpOption.data;
	            var itemShape;
	            
	            var dataRange = component.dataRange;
	            var legend = component.legend;
	            var color;
	            var value;
	            var queryTarget = [data[0], mpOption];
	            var nColor;
	            var eColor;
	            var effect;
	            
	            // 图例
	            if (legend) {
	                color = legend.getColor(serie.name);
	            }
	            // 值域
	            if (dataRange) {
	                value = data[0].value != null ? data[0].value : '';
	                color = isNaN(value) ? color : dataRange.getColor(value);
	                
	                nColor = this.deepQuery(queryTarget, 'itemStyle.normal.color')
	                         || color;
	                eColor = this.deepQuery(queryTarget, 'itemStyle.emphasis.color')
	                         || nColor;
	                // 有值域，并且值域返回null且用户没有自己定义颜色，则隐藏这个mark
	                if (nColor == null && eColor == null) {
	                    return;
	                }
	            }
	            color = this.deepMerge(queryTarget, 'itemStyle.normal').color 
	                    || color;
	            
	            var symbol = this.deepQuery(queryTarget, 'symbol') || 'circle';
	            symbol = symbol.replace('empty', '').replace(/\d/g, '');
	            
	            effect = this.deepMerge(
	                [data[0], mpOption],
	                'effect'
	            );
	            
	            var devicePixelRatio = window.devicePixelRatio || 1;
	            
	            //console.log(data)
	            itemShape = new SymbolShape({
	                style: {
	                    pointList: data,
	                    color: color,
	                    strokeColor: color,
	                    shadowColor: effect.shadowColor || color,
	                    shadowBlur: (effect.shadowBlur != null ? effect.shadowBlur : 8)
	                                 * devicePixelRatio,
	                    size: this.deepQuery(queryTarget, 'symbolSize'),
	                    iconType: symbol,
	                    brushType: 'fill',
	                    lineWidth:1
	                },
	                draggable: false,
	                hoverable: false
	            });
	            
	            if (effect.show) {
	                itemShape.effect = effect;
	            }
	            
	            return itemShape;
	        },
	        
	        backupShapeList: function () {
	            if (this.shapeList && this.shapeList.length > 0) {
	                this.lastShapeList = this.shapeList;
	                this.shapeList = [];
	            }
	            else {
	                this.lastShapeList = [];
	            }
	        },
	        
	        addShapeList: function () {
	            var maxLenth = this.option.animationThreshold / (this.canvasSupported ? 2 : 4);
	            var lastShapeList = this.lastShapeList;
	            var shapeList = this.shapeList;
	            var isUpdate = lastShapeList.length > 0;
	            var duration = isUpdate
	                           ? this.query(this.option, 'animationDurationUpdate')
	                           : this.query(this.option, 'animationDuration');
	            var easing = this.query(this.option, 'animationEasing');
	            var delay;
	            var key;
	            var oldMap = {};
	            var newMap = {};
	            if (this.option.animation 
	                && !this.option.renderAsImage 
	                && shapeList.length < maxLenth
	                && !this.motionlessOnce
	            ) {
	                // 通过已有的shape做动画过渡
	                for (var i = 0, l = lastShapeList.length; i < l; i++) {
	                    key = this._getAnimationKey(lastShapeList[i]);
	                    if (key.match('undefined')) {
	                        this.zr.delShape(lastShapeList[i].id);  // 非关键元素直接删除
	                    }
	                    else {
	                        key += lastShapeList[i].type;
	                        // https://github.com/ecomfe/echarts/issues/1219#issuecomment-71987602
	                        // 响应中断可能产生的重复元素
	                        if (oldMap[key]) {
	                            this.zr.delShape(lastShapeList[i].id);
	                        }
	                        else {
	                            oldMap[key] = lastShapeList[i];
	                        }
	                    }
	                }
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    key = this._getAnimationKey(shapeList[i]);
	                    if (key.match('undefined')) {
	                        this.zr.addShape(shapeList[i]);         // 非关键元素直接添加
	                    }
	                    else {
	                        key += shapeList[i].type;
	                        newMap[key] = shapeList[i];
	                    }
	                }
	                
	                for (key in oldMap) {
	                    if (!newMap[key]) {
	                        // 新的没有 删除
	                        this.zr.delShape(oldMap[key].id);
	                    }
	                }
	                for (key in newMap) {
	                    if (oldMap[key]) {
	                        // 新旧都有 动画过渡
	                        this.zr.delShape(oldMap[key].id);
	                        this._animateMod(
	                            oldMap[key], newMap[key], duration, easing, 0, isUpdate
	                        );
	                    }
	                    else {
	                        // 新有旧没有  添加并动画过渡
	                        //this._animateAdd(newMap[key], duration, easing);
	                        delay = (this.type == ecConfig.CHART_TYPE_LINE
	                                || this.type == ecConfig.CHART_TYPE_RADAR)
	                                && key.indexOf('icon') !== 0
	                                ? duration / 2
	                                : 0;
	                        this._animateMod(
	                            false, newMap[key], duration, easing, delay, isUpdate
	                        );
	                    }
	                }
	                this.zr.refresh();
	                this.animationEffect();
	            }
	            else {
	                this.motionlessOnce = false;
	                // clear old
	                this.zr.delShape(lastShapeList);
	                // 直接添加
	                for (var i = 0, l = shapeList.length; i < l; i++) {
	                    this.zr.addShape(shapeList[i]);
	                }
	            }
	        },
	        
	        _getAnimationKey: function(shape) {
	            if (this.type != ecConfig.CHART_TYPE_MAP
	                && this.type != ecConfig.CHART_TYPE_TREEMAP
	                && this.type != ecConfig.CHART_TYPE_VENN
	                && this.type != ecConfig.CHART_TYPE_TREE
	                ) {
	                return ecData.get(shape, 'seriesIndex') + '_'
	                       + ecData.get(shape, 'dataIndex')
	                       + (shape._mark ? shape._mark : '')
	                       + (this.type === ecConfig.CHART_TYPE_RADAR 
	                          ? ecData.get(shape, 'special') : '');
	            }
	            else {
	                return ecData.get(shape, 'seriesIndex') + '_'
	                       + ecData.get(shape, 'dataIndex')
	                       + (shape._mark ? shape._mark : 'undefined');
	            }
	        },
	        
	        /**
	         * 动画过渡 
	         */
	        _animateMod: function (oldShape, newShape, duration, easing, delay, isUpdate) {
	            switch (newShape.type) {
	                case 'polyline' :
	                case 'half-smooth-polygon' :
	                    ecAnimation.pointList(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'rectangle' :
	                    ecAnimation.rectangle(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'image' :
	                case 'icon' :
	                    ecAnimation.icon(this.zr, oldShape, newShape, duration, easing, delay);
	                    break;
	                case 'candle' :
	                    if (!isUpdate) {
	                        ecAnimation.candle(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    else {
	                        this.zr.addShape(newShape);
	                    }
	                    break;
	                case 'ring' :
	                case 'sector' :
	                case 'circle' :
	                    if (!isUpdate) {
	                        // 进入动画，加旋转
	                        ecAnimation.ring(
	                            this.zr,
	                            oldShape,
	                            newShape, 
	                            duration + ((ecData.get(newShape, 'dataIndex') || 0) % 20 * 100), 
	                            easing
	                        );
	                    }
	                    else if (newShape.type === 'sector') {
	                        ecAnimation.sector(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    else {
	                        this.zr.addShape(newShape);
	                    }
	                    break;
	                case 'text' :
	                    ecAnimation.text(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'polygon' :
	                    if (!isUpdate) {
	                        ecAnimation.polygon(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    else {
	                        ecAnimation.pointList(this.zr, oldShape, newShape, duration, easing);
	                    }
	                    break;
	                case 'ribbon' :
	                    ecAnimation.ribbon(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'gauge-pointer' :
	                    ecAnimation.gaugePointer(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'mark-line' :
	                    ecAnimation.markline(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                case 'bezier-curve' :
	                case 'line' :
	                    ecAnimation.line(this.zr, oldShape, newShape, duration, easing);
	                    break;
	                default :
	                    this.zr.addShape(newShape);
	                    break;
	            }
	        },
	        
	        /**
	         * 标注动画
	         * @param {number} duration 时长
	         * @param {string=} easing 缓动效果
	         * @param {Array=} shapeList 指定特效对象，不指定默认使用this.shapeList
	         */
	        animationMark: function (duration , easing, shapeList) {
	            var shapeList = shapeList || this.shapeList;
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                if (!shapeList[i]._mark) {
	                    continue;
	                }
	                this._animateMod(false, shapeList[i], duration, easing, 0, true);
	            }
	            this.animationEffect(shapeList);
	        },
	
	        /**
	         * 特效动画
	         * @param {Array=} shapeList 指定特效对象，不知道默认使用this.shapeList
	         */
	        animationEffect: function (shapeList) {
	            !shapeList && this.clearEffectShape();
	            shapeList = shapeList || this.shapeList;
	            if (shapeList == null) {
	                return;
	            }
	            var zlevel = ecConfig.EFFECT_ZLEVEL;
	            if (this.canvasSupported) {
	                this.zr.modLayer(
	                    zlevel,
	                    {
	                        motionBlur: true,
	                        lastFrameAlpha: this.option.effectBlendAlpha
	                            || ecConfig.effectBlendAlpha
	                    }
	                );
	            }
	            var shape;
	            for (var i = 0, l = shapeList.length; i < l; i++) {
	                shape = shapeList[i];
	                if (!(shape._mark && shape.effect && shape.effect.show && ecEffect[shape._mark])) {
	                    continue;
	                }
	                ecEffect[shape._mark](this.zr, this.effectList, shape, zlevel);
	                this.effectList[this.effectList.length - 1]._mark = shape._mark;
	            }
	        },
	        
	        clearEffectShape: function (clearMotionBlur) {
	            var effectList = this.effectList;
	            if (this.zr && effectList && effectList.length > 0) {
	                clearMotionBlur && this.zr.modLayer(
	                    ecConfig.EFFECT_ZLEVEL, 
	                    { motionBlur: false }
	                );
	                this.zr.delShape(effectList);
	
	                // 手动清除不会被 zr 自动清除的动画控制器
	                for (var i = 0; i < effectList.length; i++) {
	                    if (effectList[i].effectAnimator) {
	                        effectList[i].effectAnimator.stop();
	                    }
	                }
	            }
	            this.effectList = [];
	        },
	        
	        /**
	         * 动态标线标注添加
	         * @param {number} seriesIndex 系列索引
	         * @param {Object} markData 标线标注对象，支持多个
	         * @param {string} markType 标线标注类型
	         */
	        addMark: function (seriesIndex, markData, markType) {
	            var serie = this.series[seriesIndex];
	            if (this.selectedMap[serie.name]) {
	                var duration = this.query(this.option, 'animationDurationUpdate');
	                var easing = this.query(this.option, 'animationEasing');
	                // 备份，复用_buildMarkX
	                var oriMarkData = serie[markType].data;
	                var lastLength = this.shapeList.length;
	                
	                serie[markType].data = markData.data;
	                this['_build' + markType.replace('m', 'M')](seriesIndex);
	                if (this.option.animation && !this.option.renderAsImage) {
	                    // animationMark就会addShape
	                    this.animationMark(duration, easing, this.shapeList.slice(lastLength));
	                }
	                else {
	                    for (var i = lastLength, l = this.shapeList.length; i < l; i++) {
	                        this.zr.addShape(this.shapeList[i]);
	                    }
	                    this.zr.refreshNextFrame();
	                }
	                // 还原，复用_buildMarkX
	                serie[markType].data = oriMarkData;
	            }
	        },
	        
	        /**
	         * 动态标线标注删除
	         * @param {number} seriesIndex 系列索引
	         * @param {string} markName 标线标注名称
	         * @param {string} markType 标线标注类型
	         */
	        delMark: function (seriesIndex, markName, markType) {
	            markType = markType.replace('mark', '').replace('large', '').toLowerCase();
	            var serie = this.series[seriesIndex];
	            if (this.selectedMap[serie.name]) {
	                var needRefresh = false;
	                var shapeList = [this.shapeList, this.effectList];
	                var len = 2;
	                while(len--) {
	                    for (var i = 0, l = shapeList[len].length; i < l; i++) {
	                        if (shapeList[len][i]._mark == markType
	                            && ecData.get(shapeList[len][i], 'seriesIndex') == seriesIndex
	                            && ecData.get(shapeList[len][i], 'name') == markName
	                        ) {
	                            this.zr.delShape(shapeList[len][i].id);
	                            shapeList[len].splice(i, 1);
	                            needRefresh = true;
	                            break;
	                        }
	                    }
	                }
	                
	                needRefresh && this.zr.refreshNextFrame();
	            }
	        }
	    };
	
	    zrUtil.inherits(Base, ComponentBase);
	
	    return Base;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts扩展zrender shape
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：icon
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'icon',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见
	
	       // 样式属性，默认状态样式样式属性
	       style  : {
	           x             : {number},  // 必须，左上角横坐标
	           y             : {number},  // 必须，左上角纵坐标
	           width         : {number},  // 必须，宽度
	           height        : {number},  // 必须，高度
	           iconType      : {string},  // 必须，icon类型
	       },
	
	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }
	
	       // 交互属性，详见shape.Base
	
	       // 事件属性，详见shape.Base
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var zrUtil = __webpack_require__(168);
	    
	    function _iconMark(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        ctx.moveTo(x,                 y + style.height);
	        ctx.lineTo(x + 5 * dx,        y + 14 * dy);
	        ctx.lineTo(x + style.width,   y + 3 * dy);
	        ctx.lineTo(x + 13 * dx,       y);
	        ctx.lineTo(x + 2 * dx,        y + 11 * dy);
	        ctx.lineTo(x,                 y + style.height);
	
	        ctx.moveTo(x + 6 * dx,        y + 10 * dy);
	        ctx.lineTo(x + 14 * dx,       y + 2 * dy);
	
	        ctx.moveTo(x + 10 * dx,       y + 13 * dy);
	        ctx.lineTo(x + style.width,   y + 13 * dy);
	
	        ctx.moveTo(x + 13 * dx,       y + 10 * dy);
	        ctx.lineTo(x + 13 * dx,       y + style.height);
	    }
	
	    function _iconMarkUndo(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        ctx.moveTo(x,                 y + style.height);
	        ctx.lineTo(x + 5 * dx,        y + 14 * dy);
	        ctx.lineTo(x + style.width,   y + 3 * dy);
	        ctx.lineTo(x + 13 * dx,       y);
	        ctx.lineTo(x + 2 * dx,        y + 11 * dy);
	        ctx.lineTo(x,                 y + style.height);
	
	        ctx.moveTo(x + 6 * dx,        y + 10 * dy);
	        ctx.lineTo(x + 14 * dx,       y + 2 * dy);
	
	        ctx.moveTo(x + 10 * dx,       y + 13 * dy);
	        ctx.lineTo(x + style.width,   y + 13 * dy);
	    }
	
	    function _iconMarkClear(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	
	        ctx.moveTo(x + 4 * dx,        y + 15 * dy);
	        ctx.lineTo(x + 9 * dx,        y + 13 * dy);
	        ctx.lineTo(x + 14 * dx,       y + 8 * dy);
	        ctx.lineTo(x + 11 * dx,       y + 5 * dy);
	        ctx.lineTo(x + 6 * dx,        y + 10 * dy);
	        ctx.lineTo(x + 4 * dx,        y + 15 * dy);
	
	        ctx.moveTo(x + 5 * dx,        y);
	        ctx.lineTo(x + 11 * dx,       y);
	        ctx.moveTo(x + 5 * dx,        y + dy);
	        ctx.lineTo(x + 11 * dx,       y + dy);
	        ctx.moveTo(x,                 y + 2 * dy);
	        ctx.lineTo(x + style.width,   y + 2 * dy);
	
	        ctx.moveTo(x,                 y + 5 * dy);
	        ctx.lineTo(x + 3 * dx,        y + style.height);
	        ctx.lineTo(x + 13 * dx,       y + style.height);
	        ctx.lineTo(x + style.width,   y + 5 * dy);
	    }
	
	    function _iconDataZoom(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	
	        ctx.moveTo(x,               y + 3 * dy);
	        ctx.lineTo(x + 6 * dx,      y + 3 * dy);
	        
	        ctx.moveTo(x + 3 * dx,      y);
	        ctx.lineTo(x + 3 * dx,      y + 6 * dy);
	
	        ctx.moveTo(x + 3 * dx,      y + 8 * dy);
	        ctx.lineTo(x + 3 * dx,      y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);
	        ctx.lineTo(x + style.width, y + 3 * dy);
	        ctx.lineTo(x + 8 * dx,      y + 3 * dy);
	    }
	    
	    function _iconDataZoomReset(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	
	        ctx.moveTo(x + 6 * dx,      y);
	        ctx.lineTo(x + 2 * dx,      y + 3 * dy);
	        ctx.lineTo(x + 6 * dx,      y + 6 * dy);
	        
	        ctx.moveTo(x + 2 * dx,      y + 3 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 3 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 11 * dy);
	        
	        ctx.moveTo(x + 2 * dx,      y + 5 * dy);
	        ctx.lineTo(x + 2 * dx,      y + 13 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 13 * dy);
	        
	        ctx.moveTo(x + 10 * dx,     y + 10 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 13 * dy);
	        ctx.lineTo(x + 10 * dx,     y + style.height);
	    }
	    
	    function _iconRestore(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        var r = style.width / 2;
	        
	        ctx.lineWidth = 1.5;
	
	        ctx.arc(x + r, y + r, r - dx, 0, Math.PI * 2 / 3);
	        ctx.moveTo(x + 3 * dx,        y + style.height);
	        ctx.lineTo(x + 0 * dx,        y + 12 * dy);
	        ctx.lineTo(x + 5 * dx,        y + 11 * dy);
	
	        ctx.moveTo(x, y + 8 * dy);
	        ctx.arc(x + r, y + r, r - dx, Math.PI, Math.PI * 5 / 3);
	        ctx.moveTo(x + 13 * dx,       y);
	        ctx.lineTo(x + style.width,   y + 4 * dy);
	        ctx.lineTo(x + 11 * dx,       y + 5 * dy);
	    }
	
	    function _iconLineChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	
	        ctx.moveTo(x, y);
	        ctx.lineTo(x, y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);
	
	        ctx.moveTo(x + 2 * dx,    y + 14 * dy);
	        ctx.lineTo(x + 7 * dx,    y + 6 * dy);
	        ctx.lineTo(x + 11 * dx,   y + 11 * dy);
	        ctx.lineTo(x + 15 * dx,   y + 2 * dy);
	    }
	
	    function _iconBarChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	
	        ctx.moveTo(x, y);
	        ctx.lineTo(x, y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);
	
	        ctx.moveTo(x + 3 * dx,        y + 14 * dy);
	        ctx.lineTo(x + 3 * dx,        y + 6 * dy);
	        ctx.lineTo(x + 4 * dx,        y + 6 * dy);
	        ctx.lineTo(x + 4 * dx,        y + 14 * dy);
	        ctx.moveTo(x + 7 * dx,        y + 14 * dy);
	        ctx.lineTo(x + 7 * dx,        y + 2 * dy);
	        ctx.lineTo(x + 8 * dx,        y + 2 * dy);
	        ctx.lineTo(x + 8 * dx,        y + 14 * dy);
	        ctx.moveTo(x + 11 * dx,       y + 14 * dy);
	        ctx.lineTo(x + 11 * dx,       y + 9 * dy);
	        ctx.lineTo(x + 12 * dx,       y + 9 * dy);
	        ctx.lineTo(x + 12 * dx,       y + 14 * dy);
	    }
	    
	    function _iconPieChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width - 2;
	        var height = style.height - 2;
	        var r = Math.min(width, height) / 2;
	        y += 2;
	        ctx.moveTo(x + r + 3, y + r - 3);
	        ctx.arc(x + r + 3, y + r - 3, r - 1, 0, -Math.PI / 2, true);
	        ctx.lineTo(x + r + 3, y + r - 3);
	      
	        ctx.moveTo(x + r, y);
	        ctx.lineTo(x + r, y + r);
	        ctx.arc(x + r, y + r, r, -Math.PI / 2, Math.PI * 2, true);
	        ctx.lineTo(x + r, y + r);
	        ctx.lineWidth = 1.5;
	    }
	    
	    function _iconFunnelChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	        y -= dy;
	        ctx.moveTo(x + 1 * dx,      y + 2 * dy);
	        ctx.lineTo(x + 15 * dx,     y + 2 * dy);
	        ctx.lineTo(x + 14 * dx,     y + 3 * dy);
	        ctx.lineTo(x + 2 * dx,      y + 3 * dy);
	        
	        ctx.moveTo(x + 3 * dx,      y + 6 * dy);
	        ctx.lineTo(x + 13 * dx,     y + 6 * dy);
	        ctx.lineTo(x + 12 * dx,     y + 7 * dy);
	        ctx.lineTo(x + 4 * dx,      y + 7 * dy);
	        
	        ctx.moveTo(x + 5 * dx,      y + 10 * dy);
	        ctx.lineTo(x + 11 * dx,      y + 10 * dy);
	        ctx.lineTo(x + 10 * dx,      y + 11 * dy);
	        ctx.lineTo(x + 6 * dx,      y + 11 * dy);
	        
	        ctx.moveTo(x + 7 * dx,      y + 14 * dy);
	        ctx.lineTo(x + 9 * dx,      y + 14 * dy);
	        ctx.lineTo(x + 8 * dx,      y + 15 * dy);
	        ctx.lineTo(x + 7 * dx,      y + 15 * dy);
	    }
	    
	    function _iconForceChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var dx = width / 16;
	        var dy = height / 16;
	        var r = Math.min(dx, dy) * 2;
	
	        ctx.moveTo(x + dx + r, y + dy + r);
	        ctx.arc(x + dx, y + dy, r, Math.PI / 4, Math.PI * 3);
	        
	        ctx.lineTo(x + 7 * dx - r, y + 6 * dy - r);
	        ctx.arc(x + 7 * dx, y + 6 * dy, r, Math.PI / 4 * 5, Math.PI * 4);
	        ctx.arc(x + 7 * dx, y + 6 * dy, r / 2, Math.PI / 4 * 5, Math.PI * 4);
	        
	        ctx.moveTo(x + 7 * dx - r / 2, y + 6 * dy + r);
	        ctx.lineTo(x + dx + r, y + 14 * dy - r);
	        ctx.arc(x + dx, y + 14 * dy, r, -Math.PI / 4, Math.PI * 2);
	        
	        ctx.moveTo(x + 7 * dx + r / 2, y + 6 * dy);
	        ctx.lineTo(x + 14 * dx - r, y + 10 * dy - r / 2);
	        ctx.moveTo(x + 16 * dx, y + 10 * dy);
	        ctx.arc(x + 14 * dx, y + 10 * dy, r, 0, Math.PI * 3);
	        ctx.lineWidth = 1.5;
	    }
	    
	    function _iconChordChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var r = Math.min(width, height) / 2;
	
	        ctx.moveTo(x + width, y + height / 2);
	        ctx.arc(x + r, y + r, r, 0, Math.PI * 2);
	        
	        ctx.arc(x + r, y, r, Math.PI / 4, Math.PI / 5 * 4);
	        ctx.arc(x, y + r, r, -Math.PI / 3, Math.PI / 3);
	        ctx.arc(x + width, y + height, r, Math.PI, Math.PI / 2 * 3);
	        ctx.lineWidth = 1.5;
	    }
	
	    function _iconStackChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var dy = Math.round(height / 3);
	        var delta = Math.round((dy - 2) / 2);
	        var len = 3;
	        while (len--) {
	            ctx.rect(x, y + dy * len + delta, width, 2);
	        }
	    }
	    
	    function _iconTiledChart(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        var dx = Math.round(width / 3);
	        var delta = Math.round((dx - 2) / 2);
	        var len = 3;
	        while (len--) {
	            ctx.rect(x + dx * len + delta, y, 2, height);
	        }
	    }
	    
	    function _iconDataView(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	
	        ctx.moveTo(x + dx, y);
	        ctx.lineTo(x + dx, y + style.height);
	        ctx.lineTo(x + 15 * dx, y + style.height);
	        ctx.lineTo(x + 15 * dx, y);
	        ctx.lineTo(x + dx, y);
	
	        ctx.moveTo(x + 3 * dx, y + 3 * dx);
	        ctx.lineTo(x + 13 * dx, y + 3 * dx);
	
	        ctx.moveTo(x + 3 * dx, y + 6 * dx);
	        ctx.lineTo(x + 13 * dx, y + 6 * dx);
	
	        ctx.moveTo(x + 3 * dx, y + 9 * dx);
	        ctx.lineTo(x + 13 * dx, y + 9 * dx);
	
	        ctx.moveTo(x + 3 * dx, y + 12 * dx);
	        ctx.lineTo(x + 9 * dx, y + 12 * dx);
	    }
	    
	    function _iconSave(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        var dy = style.height / 16;
	
	        ctx.moveTo(x, y);
	        ctx.lineTo(x, y + style.height);
	        ctx.lineTo(x + style.width, y + style.height);
	        ctx.lineTo(x + style.width, y);
	        ctx.lineTo(x, y);
	
	        ctx.moveTo(x + 4 * dx,    y);
	        ctx.lineTo(x + 4 * dx,    y + 8 * dy);
	        ctx.lineTo(x + 12 * dx,   y + 8 * dy);
	        ctx.lineTo(x + 12 * dx,   y);
	        
	        ctx.moveTo(x + 6 * dx,    y + 11 * dy);
	        ctx.lineTo(x + 6 * dx,    y + 13 * dy);
	        ctx.lineTo(x + 10 * dx,   y + 13 * dy);
	        ctx.lineTo(x + 10 * dx,   y + 11 * dy);
	        ctx.lineTo(x + 6 * dx,    y + 11 * dy);
	    }
	    
	    function _iconCross(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        ctx.moveTo(x, y + height / 2);
	        ctx.lineTo(x + width, y + height / 2);
	        
	        ctx.moveTo(x + width / 2, y);
	        ctx.lineTo(x + width / 2, y + height);
	    }
	    
	    function _iconCircle(ctx, style) {
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var r = Math.min(width, height);
	        ctx.moveTo(
	            style.x + width + r, 
	            style.y + height
	        );
	        ctx.arc(
	            style.x + width, 
	            style.y + height, 
	            r,
	            0, 
	            Math.PI * 2
	        );
	        ctx.closePath();
	    }
	    
	    function _iconRectangle(ctx, style) {
	        ctx.rect(style.x, style.y, style.width, style.height);
	        ctx.closePath();
	    }
	    
	    function _iconTriangle(ctx, style) {
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var x = style.x + width;
	        var y = style.y + height;
	        var symbolSize = Math.min(width, height);
	        ctx.moveTo(x, y - symbolSize);
	        ctx.lineTo(x + symbolSize, y + symbolSize);
	        ctx.lineTo(x - symbolSize, y + symbolSize);
	        ctx.lineTo(x, y - symbolSize);
	        ctx.closePath();
	    }
	    
	    function _iconDiamond(ctx, style) {
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var x = style.x + width;
	        var y = style.y + height;
	        var symbolSize = Math.min(width, height);
	        ctx.moveTo(x, y - symbolSize);
	        ctx.lineTo(x + symbolSize, y);
	        ctx.lineTo(x, y + symbolSize);
	        ctx.lineTo(x - symbolSize, y);
	        ctx.lineTo(x, y - symbolSize);
	        ctx.closePath();
	    }
	    
	    function _iconArrow(ctx, style) {
	        var x = style.x;
	        var y = style.y;
	        var dx = style.width / 16;
	        ctx.moveTo(x + 8 * dx,  y);
	        ctx.lineTo(x + dx,      y + style.height);
	        ctx.lineTo(x + 8 * dx,  y + style.height / 4 * 3);
	        ctx.lineTo(x + 15 * dx, y + style.height);
	        ctx.lineTo(x + 8 * dx,  y);
	        ctx.closePath();
	    }
	    
	    function _iconStar(ctx, style) {
	        var StarShape = __webpack_require__(199);
	        var width = style.width / 2;
	        var height = style.height / 2;
	        StarShape.prototype.buildPath(ctx, {
	            x : style.x + width,
	            y : style.y + height,
	            r : Math.min(width, height),
	            n : style.n || 5
	        });
	    }
	    
	    function _iconHeart(ctx, style) {
	        var HeartShape = __webpack_require__(201);
	        HeartShape.prototype.buildPath(ctx, {
	            x : style.x + style.width / 2,
	            y : style.y + style.height * 0.2,
	            a : style.width / 2,
	            b : style.height * 0.8
	        });
	    }
	    
	    function _iconDroplet(ctx, style) {
	        var DropletShape = __webpack_require__(203);
	        DropletShape.prototype.buildPath(ctx, {
	            x : style.x + style.width * 0.5,
	            y : style.y + style.height * 0.5,
	            a : style.width * 0.5,
	            b : style.height * 0.8
	        });
	    }
	    
	    function _iconPin(ctx, style) {
	        var x = style.x;
	        var y = style.y - style.height / 2 * 1.5;
	        var width = style.width / 2;
	        var height = style.height / 2;
	        var r = Math.min(width, height);
	        ctx.arc(
	            x + width, 
	            y + height, 
	            r,
	            Math.PI / 5 * 4, 
	            Math.PI / 5
	        );
	        ctx.lineTo(x + width, y + height + r * 1.5);
	        ctx.closePath();
	    }
	    
	    function _iconImage(ctx, style, refreshNextFrame) {
	        var ImageShape = __webpack_require__(190);
	        this._imageShape = this._imageShape || new ImageShape({
	            style: {}
	        });
	        for (var name in style) {
	            this._imageShape.style[name] = style[name];
	        }
	        this._imageShape.brush(ctx, false, refreshNextFrame);
	    }
	    
	    var Base = __webpack_require__(185);
	    
	    function Icon(options) {
	        Base.call(this, options);
	    }
	
	    Icon.prototype =  {
	        type : 'icon',
	        iconLibrary : {
	            mark : _iconMark,
	            markUndo : _iconMarkUndo,
	            markClear : _iconMarkClear,
	            dataZoom : _iconDataZoom,
	            dataZoomReset : _iconDataZoomReset,
	            restore : _iconRestore,
	            lineChart : _iconLineChart,
	            barChart : _iconBarChart,
	            pieChart : _iconPieChart,
	            funnelChart : _iconFunnelChart,
	            forceChart : _iconForceChart,
	            chordChart : _iconChordChart,
	            stackChart : _iconStackChart,
	            tiledChart : _iconTiledChart,
	            dataView : _iconDataView,
	            saveAsImage : _iconSave,
	            
	            cross : _iconCross,
	            circle : _iconCircle,
	            rectangle : _iconRectangle,
	            triangle : _iconTriangle,
	            diamond : _iconDiamond,
	            arrow : _iconArrow,
	            star : _iconStar,
	            heart : _iconHeart,
	            droplet : _iconDroplet,
	            pin : _iconPin,
	            image : _iconImage
	        },
	        brush: function (ctx, isHighlight, refreshNextFrame) {
	            var style = isHighlight ? this.highlightStyle : this.style;
	            style = style || {};
	            var iconType = style.iconType || this.style.iconType;
	            if (iconType === 'image') {
	                var ImageShape = __webpack_require__(190);
	                ImageShape.prototype.brush.call(this, ctx, isHighlight, refreshNextFrame);
	
	            } else {
	
	                var style = this.beforeBrush(ctx, isHighlight);
	
	                ctx.beginPath();
	                this.buildPath(ctx, style, refreshNextFrame);
	
	                switch (style.brushType) {
	                    /* jshint ignore:start */
	                    case 'both':
	                        ctx.fill();
	                    case 'stroke':
	                        style.lineWidth > 0 && ctx.stroke();
	                        break;
	                    /* jshint ignore:end */
	                    default:
	                        ctx.fill();
	                }
	                
	                this.drawText(ctx, style, this.style);
	
	                this.afterBrush(ctx);
	            }
	        },
	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style, refreshNextFrame) {
	            if (this.iconLibrary[style.iconType]) {
	                this.iconLibrary[style.iconType].call(this, ctx, style, refreshNextFrame);
	            }
	            else {
	                ctx.moveTo(style.x, style.y);
	                ctx.lineTo(style.x + style.width, style.y);
	                ctx.lineTo(style.x + style.width, style.y + style.height);
	                ctx.lineTo(style.x, style.y + style.height);
	                ctx.lineTo(style.x, style.y);
	                ctx.closePath();
	            }
	
	            return;
	        },
	
	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            if (style.__rect) {
	                return style.__rect;
	            }
	            
	            // pin比较特殊，让尖端在目标x,y上
	            style.__rect = {
	                x : Math.round(style.x),
	                y : Math.round(style.y - (style.iconType == 'pin' 
	                                         ? (style.height / 2 * 1.5) : 0)
	                               ),
	                width : style.width,
	                height : style.height * (
	                    style.iconType === 'pin' ? 1.25 : 1
	                )
	            };
	            
	            return style.__rect;
	        },
	
	        isCover : function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];
	
	            // 快速预判并保留判断矩形
	            var rect = this.style.__rect;
	            if (!rect) {
	                rect = this.style.__rect = this.getRect(this.style);
	            }
	            // 提高交互体验，太小的图形包围盒四向扩大4px
	            var delta = (rect.height < 8 || rect.width < 8 ) ? 4 : 0;
	            return x >= rect.x - delta
	                && x <= (rect.x + rect.width + delta)
	                && y >= rect.y - delta
	                && y <= (rect.y + rect.height + delta);
	        }
	    };
	
	    zrUtil.inherits(Icon, Base);
	    
	    return Icon;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * n角星（n>3）
	 * @module zrender/shape/Star
	 * @author sushuang (宿爽, sushuang0322@gmail.com)
	 * @example
	 *     var Star = require('zrender/shape/Star');
	 *     var shape = new Star({
	 *         style: {
	 *             x: 200,
	 *             y: 100,
	 *             r: 150,
	 *             n: 5,
	 *             text: '五角星'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IStarStyle
	 * @property {number} x n角星外接圆心x坐标
	 * @property {number} y n角星外接圆心y坐标
	 * @property {number} r n角星外接圆半径
	 * @property {number} [r0] n角星内部顶点（凹点）的外接圆半径。
	 *                         如果不指定此参数，则自动计算：取相隔外部顶点连线的交点作内部顶点。
	 * @property {number} n 指明几角星
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	        var math = __webpack_require__(200);
	        var sin = math.sin;
	        var cos = math.cos;
	        var PI = Math.PI;
	
	        var Base = __webpack_require__(185);
	
	        /**
	         * @alias module:zrender/shape/Star
	         * @param {Object} options
	         * @constructor
	         * @extends module:zrender/shape/Base
	         */
	        var Star = function(options) {
	            Base.call(this, options);
	            /**
	             * n角星绘制样式
	             * @name module:zrender/shape/Star#style
	             * @type {module:zrender/shape/Star~IStarStyle}
	             */
	            /**
	             * n角星高亮绘制样式
	             * @name module:zrender/shape/Star#highlightStyle
	             * @type {module:zrender/shape/Star~IStarStyle}
	             */
	        };
	
	        Star.prototype = {
	            type: 'star',
	
	            /**
	             * 创建n角星（n>3）路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Star~IStarStyle} style
	             */
	            buildPath : function(ctx, style) {
	                var n = style.n;
	                if (!n || n < 2) {
	                    return;
	                }
	
	                var x = style.x;
	                var y = style.y;
	                var r = style.r;
	                var r0 = style.r0;
	
	                // 如果未指定内部顶点外接圆半径，则自动计算
	                if (r0 == null) {
	                    r0 = n > 4
	                        // 相隔的外部顶点的连线的交点，
	                        // 被取为内部交点，以此计算r0
	                        ? r * cos(2 * PI / n) / cos(PI / n)
	                        // 二三四角星的特殊处理
	                        : r / 3;
	                }
	
	                var dStep = PI / n;
	                var deg = -PI / 2;
	                var xStart = x + r * cos(deg);
	                var yStart = y + r * sin(deg);
	                deg += dStep;
	
	                // 记录边界点，用于判断inside
	                var pointList = style.pointList = [];
	                pointList.push([ xStart, yStart ]);
	                for (var i = 0, end = n * 2 - 1, ri; i < end; i++) {
	                    ri = i % 2 === 0 ? r0 : r;
	                    pointList.push([ x + ri * cos(deg), y + ri * sin(deg) ]);
	                    deg += dStep;
	                }
	                pointList.push([ xStart, yStart ]);
	
	                // 绘制
	                ctx.moveTo(pointList[0][0], pointList[0][1]);
	                for (var i = 0; i < pointList.length; i++) {
	                    ctx.lineTo(pointList[i][0], pointList[i][1]);
	                }
	                
	                ctx.closePath();
	
	                return;
	            },
	
	            /**
	             * 返回n角星包围盒矩形
	             * @param {module:zrender/shape/Star~IStarStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - style.r - lineWidth / 2),
	                    y : Math.round(style.y - style.r - lineWidth / 2),
	                    width : style.r * 2 + lineWidth,
	                    height : style.r * 2 + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Star, Base);
	        return Star;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender: 数学辅助类
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * sin：正弦函数
	 * cos：余弦函数
	 * degreeToRadian：角度转弧度
	 * radianToDegree：弧度转角度
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	
	        var _radians = Math.PI / 180;
	
	        /**
	         * @param {number} angle 弧度（角度）参数
	         * @param {boolean} isDegrees angle参数是否为角度计算，默认为false，angle为以弧度计量的角度
	         */
	        function sin(angle, isDegrees) {
	            return Math.sin(isDegrees ? angle * _radians : angle);
	        }
	
	        /**
	         * @param {number} angle 弧度（角度）参数
	         * @param {boolean} isDegrees angle参数是否为角度计算，默认为false，angle为以弧度计量的角度
	         */
	        function cos(angle, isDegrees) {
	            return Math.cos(isDegrees ? angle * _radians : angle);
	        }
	
	        /**
	         * 角度转弧度
	         * @param {Object} angle
	         */
	        function degreeToRadian(angle) {
	            return angle * _radians;
	        }
	
	        /**
	         * 弧度转角度
	         * @param {Object} angle
	         */
	        function radianToDegree(angle) {
	            return angle / _radians;
	        }
	
	        return {
	            sin : sin,
	            cos : cos,
	            degreeToRadian : degreeToRadian,
	            radianToDegree : radianToDegree
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @module zrender/shape/Heart
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Heart = require('zrender/shape/Heart');
	 *   var shape = new Heart({
	 *       style: {
	 *           x: 100,
	 *           y: 100,
	 *           a: 40,
	 *           b: 40,
	 *           brushType: 'both',
	 *           color: 'blue',
	 *           strokeColor: 'red',
	 *           lineWidth: 3,
	 *           text: 'Heart'
	 *       }    
	 *   });
	 *   zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IHeartStyle
	 * @property {number} x 心形内部尖端横坐标
	 * @property {number} y 心形内部尖端纵坐标
	 * @property {number} a 心形横宽（中轴线到水平边缘最宽处距离）
	 * @property {number} b 心形纵高（内尖到外尖距离）
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';
	        
	        var Base = __webpack_require__(185);
	        var PathProxy = __webpack_require__(202);
	        var area = __webpack_require__(183);
	        
	        /**
	         * @alias module:zrender/shape/Heart
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Heart = function (options) {
	            Base.call(this, options);
	
	            this._pathProxy = new PathProxy();
	            /**
	             * 心形绘制样式
	             * @name module:zrender/shape/Heart#style
	             * @type {module:zrender/shape/Heart~IHeartStyle}
	             */
	            /**
	             * 心形高亮绘制样式
	             * @name module:zrender/shape/Heart#highlightStyle
	             * @type {module:zrender/shape/Heart~IHeartStyle}
	             */
	        };
	
	        Heart.prototype = {
	            type: 'heart',
	
	            /**
	             * 创建扇形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Heart~IHeartStyle} style
	             */
	            buildPath : function (ctx, style) {
	                var path = this._pathProxy || new PathProxy();
	                path.begin(ctx);
	
	                path.moveTo(style.x, style.y);
	                path.bezierCurveTo(
	                    style.x + style.a / 2,
	                    style.y - style.b * 2 / 3,
	                    style.x + style.a * 2,
	                    style.y + style.b / 3,
	                    style.x,
	                    style.y + style.b
	                );
	                path.bezierCurveTo(
	                    style.x - style.a *  2,
	                    style.y + style.b / 3,
	                    style.x - style.a / 2,
	                    style.y - style.b * 2 / 3,
	                    style.x,
	                    style.y
	                );
	                path.closePath();
	                return;
	            },
	
	            /**
	             * 计算返回心形的包围盒矩形
	             * @param {module:zrender/shape/Heart~IHeartStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                if (!this._pathProxy.isEmpty()) {
	                    this.buildPath(null, style);
	                }
	                return this._pathProxy.fastBoundingRect();
	            },
	
	            isCover: function (x, y) {
	                var originPos = this.transformCoordToLocal(x, y);
	                x = originPos[0];
	                y = originPos[1];
	                
	                if (this.isCoverRect(x, y)) {
	                    return area.isInsidePath(
	                        this._pathProxy.pathCommands, this.style.lineWidth, this.style.brushType, x, y
	                    );
	                }
	            }
	        };
	
	        __webpack_require__(168).inherits(Heart, Base);
	        return Heart;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 * 
	 * @module zrender/shape/tool/PathProxy
	 * @author pissang (http://www.github.com/pissang)
	 * 
	 * @example
	 *     var SomeShape = function() {
	 *         this._pathProxy = new PathProxy();
	 *         ...
	 *     }
	 *     SomeShape.prototype.buildPath = function(ctx, style) {
	 *         this._pathProxy.begin(ctx);
	 *             .moveTo(style.x, style.y);
	 *             .lineTo(style.x1, style.y1);
	 *         ...
	 *             .closePath();
	 *     },
	 *     SomeShape.prototype.getRect = function(style) {
	 *         if (!style._rect) {
	 *             // 这里必须要在 buildPath 之后才能调用
	 *             style._rect = this._pathProxy.fastBoundingRect();
	 *         }
	 *         return this.style._rect;
	 *     },
	 *     SomeShape.prototype.isCover = function(x, y) {
	 *         var rect = this.getRect(this.style);
	 *         if (x >= rect.x
	 *             && x <= (rect.x + rect.width)
	 *             && y >= rect.y
	 *             && y <= (rect.y + rect.height)
	 *         ) {
	 *             return area.isInsidePath(
	 *                 this._pathProxy.pathCommands, 0, 'fill', x, y
	 *             );
	 *         }
	 *     }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    
	    var vector = __webpack_require__(178);
	    // var computeBoundingBox = require('../../tool/computeBoundingBox');
	
	    var PathSegment = function(command, points) {
	        this.command = command;
	        this.points = points || null;
	    };
	
	    /**
	     * @alias module:zrender/shape/tool/PathProxy
	     * @constructor
	     */
	    var PathProxy = function () {
	
	        /**
	         * Path描述的数组，用于`isInsidePath`的判断
	         * @type {Array.<Object>}
	         */
	        this.pathCommands = [];
	
	        this._ctx = null;
	
	        this._min = [];
	        this._max = [];
	    };
	
	    /**
	     * 快速计算Path包围盒（并不是最小包围盒）
	     * @return {Object}
	     */
	    PathProxy.prototype.fastBoundingRect = function () {
	        var min = this._min;
	        var max = this._max;
	        min[0] = min[1] = Infinity;
	        max[0] = max[1] = -Infinity;
	        for (var i = 0; i < this.pathCommands.length; i++) {
	            var seg = this.pathCommands[i];
	            var p = seg.points;
	            switch (seg.command) {
	                case 'M':
	                    vector.min(min, min, p);
	                    vector.max(max, max, p);
	                    break;
	                case 'L':
	                    vector.min(min, min, p);
	                    vector.max(max, max, p);
	                    break;
	                case 'C':
	                    for (var j = 0; j < 6; j += 2) {
	                        min[0] = Math.min(min[0], min[0], p[j]);
	                        min[1] = Math.min(min[1], min[1], p[j + 1]);
	                        max[0] = Math.max(max[0], max[0], p[j]);
	                        max[1] = Math.max(max[1], max[1], p[j + 1]);
	                    }
	                    break;
	                case 'Q':
	                    for (var j = 0; j < 4; j += 2) {
	                        min[0] = Math.min(min[0], min[0], p[j]);
	                        min[1] = Math.min(min[1], min[1], p[j + 1]);
	                        max[0] = Math.max(max[0], max[0], p[j]);
	                        max[1] = Math.max(max[1], max[1], p[j + 1]);
	                    }
	                    break;
	                case 'A':
	                    var cx = p[0];
	                    var cy = p[1];
	                    var rx = p[2];
	                    var ry = p[3];
	                    min[0] = Math.min(min[0], min[0], cx - rx);
	                    min[1] = Math.min(min[1], min[1], cy - ry);
	                    max[0] = Math.max(max[0], max[0], cx + rx);
	                    max[1] = Math.max(max[1], max[1], cy + ry);
	                    break;
	            }
	        }
	
	        return {
	            x: min[0],
	            y: min[1],
	            width: max[0] - min[0],
	            height: max[1] - min[1]
	        };
	    };
	
	    /**
	     * @param  {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.begin = function (ctx) {
	        this._ctx = ctx || null;
	        // 清空pathCommands
	        this.pathCommands.length = 0;
	
	        return this;
	    };
	
	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.moveTo = function (x, y) {
	        this.pathCommands.push(new PathSegment('M', [x, y]));
	        if (this._ctx) {
	            this._ctx.moveTo(x, y);
	        }
	        return this;
	    };
	
	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.lineTo = function (x, y) {
	        this.pathCommands.push(new PathSegment('L', [x, y]));
	        if (this._ctx) {
	            this._ctx.lineTo(x, y);
	        }
	        return this;
	    };
	
	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @param  {number} x3
	     * @param  {number} y3
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {
	        this.pathCommands.push(new PathSegment('C', [x1, y1, x2, y2, x3, y3]));
	        if (this._ctx) {
	            this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	        }
	        return this;
	    };
	
	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {
	        this.pathCommands.push(new PathSegment('Q', [x1, y1, x2, y2]));
	        if (this._ctx) {
	            this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	        }
	        return this;
	    };
	
	    /**
	     * @param  {number} cx
	     * @param  {number} cy
	     * @param  {number} r
	     * @param  {number} startAngle
	     * @param  {number} endAngle
	     * @param  {boolean} anticlockwise
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.arc = function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	        this.pathCommands.push(new PathSegment(
	            'A', [cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1]
	        ));
	        if (this._ctx) {
	            this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	        }
	        return this;
	    };
	
	    // TODO
	    PathProxy.prototype.arcTo = function (x1, y1, x2, y2, radius) {
	        if (this._ctx) {
	            this._ctx.arcTo(x1, y1, x2, y2, radius);
	        }
	        return this;
	    };
	
	    // TODO
	    PathProxy.prototype.rect = function (x, y, w, h) {
	        if (this._ctx) {
	            this._ctx.rect(x, y, w, h);
	        }
	        return this;
	    };
	
	    /**
	     * @return {module:zrender/shape/util/PathProxy}
	     */
	    PathProxy.prototype.closePath = function () {
	        this.pathCommands.push(new PathSegment('z'));
	        if (this._ctx) {
	            this._ctx.closePath();
	        }
	        return this;
	    };
	
	    /**
	     * 是否没有Path命令
	     * @return {boolean}
	     */
	    PathProxy.prototype.isEmpty = function() {
	        return this.pathCommands.length === 0;
	    };
	
	    PathProxy.PathSegment = PathSegment;
	
	    return PathProxy;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 水滴形状
	 * @module zrender/shape/Droplet
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Droplet = require('zrender/shape/Droplet');
	 *   var shape = new Droplet({
	 *       style: {
	 *           x: 100,
	 *           y: 100,
	 *           a: 40,
	 *           b: 40,
	 *           brushType: 'both',
	 *           color: 'blue',
	 *           strokeColor: 'red',
	 *           lineWidth: 3,
	 *           text: 'Droplet'
	 *       }    
	 *   });
	 *   zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IDropletStyle
	 * @property {number} x 水滴中心x坐标
	 * @property {number} y 水滴中心y坐标
	 * @property {number} a 水滴横宽（中心到水平边缘最宽处距离）
	 * @property {number} b 水滴纵高（中心到尖端距离）
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';
	
	        var Base = __webpack_require__(185);
	        var PathProxy = __webpack_require__(202);
	        var area = __webpack_require__(183);
	
	        /**
	         * @alias module:zrender/shape/Droplet
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Droplet = function(options) {
	            Base.call(this, options);
	            this._pathProxy = new PathProxy();
	            /**
	             * 水滴绘制样式
	             * @name module:zrender/shape/Droplet#style
	             * @type {module:zrender/shape/Droplet~IDropletStyle}
	             */
	            /**
	             * 水滴高亮绘制样式
	             * @name module:zrender/shape/Droplet#highlightStyle
	             * @type {module:zrender/shape/Droplet~IDropletStyle}
	             */
	        };
	
	        Droplet.prototype = {
	            type: 'droplet',
	
	            /**
	             * 创建水滴路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Droplet~IDropletStyle} style
	             */
	            buildPath : function(ctx, style) {
	                var path = this._pathProxy || new PathProxy();
	                path.begin(ctx);
	
	                path.moveTo(style.x, style.y + style.a);
	                path.bezierCurveTo(
	                    style.x + style.a,
	                    style.y + style.a,
	                    style.x + style.a * 3 / 2,
	                    style.y - style.a / 3,
	                    style.x,
	                    style.y - style.b
	                );
	                path.bezierCurveTo(
	                    style.x - style.a * 3 / 2,
	                    style.y - style.a / 3,
	                    style.x - style.a,
	                    style.y + style.a,
	                    style.x,
	                    style.y + style.a
	                );
	                path.closePath();
	            },
	
	            /**
	             * 计算返回水滴的包围盒矩形
	             * @param {module:zrender/shape/Droplet~IDropletStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                if (!this._pathProxy.isEmpty()) {
	                    this.buildPath(null, style);
	                }
	                return this._pathProxy.fastBoundingRect();
	            },
	
	            isCover: function (x, y) {
	                var originPos = this.transformCoordToLocal(x, y);
	                x = originPos[0];
	                y = originPos[1];
	                
	                if (this.isCoverRect(x, y)) {
	                    return area.isInsidePath(
	                        this._pathProxy.pathCommands, this.style.lineWidth, this.style.brushType, x, y
	                    );
	                }
	            }
	        };
	
	        __webpack_require__(168).inherits(Droplet, Base);
	        return Droplet;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         Yi Shen(https://github.com/pissang)
	 *
	 * shape类：标线
	 */
	
	/**
	 * @typedef {Object} IMarkLineStyle
	 * @property {number} xStart 起点x坐标
	 * @property {number} yStart 起点y坐标
	 * @property {number} xEnd 终止点x坐标
	 * @property {number} yEnd 终止点y坐标
	 * @property {number} cpX1 控制点x坐标，可以使用updatePoints自动根据curveness计算
	 * @property {number} cpY1 控制点y坐标，可以使用updatePoints自动根据curveness计算
	 * @property {number} curveness 曲度
	 * @property {Array.<string>} symbol
	 * @property {Array.<number>} symbolRotate
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(185);
	    var IconShape = __webpack_require__(198);
	    var LineShape = __webpack_require__(205);
	    var lineInstance = new LineShape({});
	    var CurveShape = __webpack_require__(207);
	    var curveInstance = new CurveShape({});
	
	    var area = __webpack_require__(183);
	    var dashedLineTo = __webpack_require__(206);
	    var zrUtil = __webpack_require__(168);
	    var curveTool = __webpack_require__(184);
	
	    function MarkLine(options) {
	        Base.call(this, options);
	
	        if (this.style.curveness > 0) {
	            this.updatePoints(this.style);
	        }
	        if (this.highlightStyle.curveness > 0) {
	            this.updatePoints(this.highlightStyle);
	        }
	    }
	
	    MarkLine.prototype =  {
	        type : 'mark-line',
	        /**
	         * 画刷
	         * @param ctx 画布句柄
	         * @param isHighlight   是否为高亮状态
	         * @param updateCallback 让painter更新视图，base.brush没用，需要的话重载brush
	         */
	        brush : function (ctx, isHighlight) {
	            var style = this.style;
	
	            if (isHighlight) {
	                // 根据style扩展默认高亮样式
	                style = this.getHighlightStyle(
	                    style,
	                    this.highlightStyle || {}
	                );
	            }
	
	            ctx.save();
	            this.setContext(ctx, style);
	
	            // 设置transform
	            this.setTransform(ctx);
	
	            ctx.save();
	            ctx.beginPath();
	            this.buildPath(ctx, style);
	            ctx.stroke();
	            ctx.restore();
	
	            this.brushSymbol(ctx, style, 0);
	            this.brushSymbol(ctx, style, 1);
	
	            this.drawText(ctx, style, this.style);
	
	            ctx.restore();
	        },
	
	        /**
	         * 创建线条路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var lineType = style.lineType || 'solid';
	
	            ctx.moveTo(style.xStart, style.yStart);
	            if (style.curveness > 0) {
	                // FIXME Bezier 在少部分浏览器上暂时不支持虚线
	                var lineDash = null;
	                switch (lineType) {
	                    case 'dashed':
	                        lineDash = [5, 5];
	                        break;
	                    case'dotted':
	                        lineDash = [1, 1];
	                        break;
	                }
	                if (lineDash && ctx.setLineDash) {
	                    ctx.setLineDash(lineDash);
	                }
	                
	                ctx.quadraticCurveTo(
	                    style.cpX1, style.cpY1, style.xEnd, style.yEnd
	                );
	            }
	            else {
	                if (lineType == 'solid') {
	                    ctx.lineTo(style.xEnd, style.yEnd);
	                }
	                else {
	                    var dashLength = (style.lineWidth || 1) 
	                        * (style.lineType == 'dashed' ? 5 : 1);
	                    dashedLineTo(
	                        ctx, style.xStart, style.yStart,
	                        style.xEnd, style.yEnd, dashLength
	                    );
	                }
	            }
	        },
	
	        /**
	         * Update cpX1 and cpY1 according to curveniss
	         * @param  {Object} style
	         */
	        updatePoints: function (style) {
	            var curveness = style.curveness || 0;
	            var inv = 1;
	
	            var x0 = style.xStart;
	            var y0 = style.yStart;
	            var x2 = style.xEnd;
	            var y2 = style.yEnd;
	            var x1 = (x0 + x2) / 2 - inv * (y0 - y2) * curveness;
	            var y1 =(y0 + y2) / 2 - inv * (x2 - x0) * curveness;
	
	            style.cpX1 = x1;
	            style.cpY1 = y1;
	        },
	
	        /**
	         * 标线始末标注
	         */
	        brushSymbol : function (ctx, style, idx) {
	            if (style.symbol[idx] == 'none') {
	                return;
	            }
	            ctx.save();
	            ctx.beginPath();
	
	            ctx.lineWidth = style.symbolBorder;
	            ctx.strokeStyle = style.symbolBorderColor;
	            // symbol
	            var symbol = style.symbol[idx].replace('empty', '')
	                                              .toLowerCase();
	            if (style.symbol[idx].match('empty')) {
	                ctx.fillStyle = '#fff'; //'rgba(0, 0, 0, 0)';
	            }
	
	            // symbolRotate
	            var x0 = style.xStart;
	            var y0 = style.yStart;
	            var x2 = style.xEnd;
	            var y2 = style.yEnd;
	            var x = idx === 0 ? x0 : x2;
	            var y = idx === 0 ? y0 : y2;
	            var curveness = style.curveness || 0;
	            var rotate = style.symbolRotate[idx] != null ? (style.symbolRotate[idx] - 0) : 0;
	            rotate = rotate / 180 * Math.PI;
	
	            if (symbol == 'arrow' && rotate === 0) {
	                if (curveness === 0) {
	                    var sign = idx === 0 ? -1 : 1; 
	                    rotate = Math.PI / 2 + Math.atan2(
	                        sign * (y2 - y0), sign * (x2 - x0)
	                    );
	                }
	                else {
	                    var x1 = style.cpX1;
	                    var y1 = style.cpY1;
	
	                    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;
	                    var dx = quadraticDerivativeAt(x0, x1, x2, idx);
	                    var dy = quadraticDerivativeAt(y0, y1, y2, idx);
	
	                    rotate = Math.PI / 2 + Math.atan2(dy, dx);
	                }
	            }
	            
	            ctx.translate(x, y);
	
	            if (rotate !== 0) {
	                ctx.rotate(rotate);
	            }
	
	            // symbolSize
	            var symbolSize = style.symbolSize[idx];
	            IconShape.prototype.buildPath(ctx, {
	                x: -symbolSize,
	                y: -symbolSize,
	                width: symbolSize * 2,
	                height: symbolSize * 2,
	                iconType: symbol
	            });
	
	            ctx.closePath();
	            ctx.fill();
	            ctx.stroke();
	            ctx.restore();
	        },
	
	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            style.curveness > 0 ? curveInstance.getRect(style)
	                : lineInstance.getRect(style);
	            return style.__rect;
	        },
	
	        isCover : function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];
	
	            // 快速预判并保留判断矩形
	            if (this.isCoverRect(x, y)) {
	                // 矩形内
	                return this.style.curveness > 0
	                       ? area.isInside(curveInstance, this.style, x, y)
	                       : area.isInside(lineInstance, this.style, x, y);
	            }
	
	            return false;
	        }
	    };
	
	    zrUtil.inherits(MarkLine, Base);
	
	    return MarkLine;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 直线
	 * @module zrender/shape/Line
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Line = require('zrender/shape/Line');
	 *   var shape = new Line({
	 *       style: {
	 *           xStart: 0,
	 *           yStart: 0,
	 *           xEnd: 100,
	 *           yEnd: 100,
	 *           strokeColor: '#000',
	 *           lineWidth: 10
	 *       }
	 *   });
	 *   zr.addShape(line);
	 */
	/**
	 * @typedef {Object} ILineStyle
	 * @property {number} xStart 起点x坐标
	 * @property {number} yStart 起点y坐标
	 * @property {number} xEnd 终止点x坐标
	 * @property {number} yEnd 终止点y坐标
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(185);
	        var dashedLineTo = __webpack_require__(206);
	        
	        /**
	         * @alias module:zrender/shape/Line
	         * @param {Object} options
	         * @constructor
	         * @extends module:zrender/shape/Base
	         */
	        var Line = function (options) {
	            this.brushTypeOnly = 'stroke';  // 线条只能描边，填充后果自负
	            this.textPosition = 'end';
	            Base.call(this, options);
	
	            /**
	             * 直线绘制样式
	             * @name module:zrender/shape/Line#style
	             * @type {module:zrender/shape/Line~ILineStyle}
	             */
	            /**
	             * 直线高亮绘制样式
	             * @name module:zrender/shape/Line#highlightStyle
	             * @type {module:zrender/shape/Line~ILineStyle}
	             */
	        };
	
	        Line.prototype =  {
	            type: 'line',
	
	            /**
	             * 创建线条路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Line~ILineStyle} style
	             */
	            buildPath : function (ctx, style) {
	                if (!style.lineType || style.lineType == 'solid') {
	                    // 默认为实线
	                    ctx.moveTo(style.xStart, style.yStart);
	                    ctx.lineTo(style.xEnd, style.yEnd);
	                }
	                else if (style.lineType == 'dashed'
	                        || style.lineType == 'dotted'
	                ) {
	                    var dashLength = (style.lineWidth || 1)  
	                                     * (style.lineType == 'dashed' ? 5 : 1);
	                    dashedLineTo(
	                        ctx,
	                        style.xStart, style.yStart,
	                        style.xEnd, style.yEnd,
	                        dashLength
	                    );
	                }
	            },
	
	            /**
	             * 计算返回线条的包围盒矩形
	             * @param {module:zrender/shape/Line~ILineStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth = style.lineWidth || 1;
	                style.__rect = {
	                    x : Math.min(style.xStart, style.xEnd) - lineWidth,
	                    y : Math.min(style.yStart, style.yEnd) - lineWidth,
	                    width : Math.abs(style.xStart - style.xEnd)
	                            + lineWidth,
	                    height : Math.abs(style.yStart - style.yEnd)
	                             + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Line, Base);
	        return Line;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 虚线lineTo 
	 *
	 * author:  Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *          errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/* require */) {
	
	        var dashPattern = [ 5, 5 ];
	        /**
	         * 虚线lineTo 
	         */
	        return function (ctx, x1, y1, x2, y2, dashLength) {
	            // http://msdn.microsoft.com/en-us/library/ie/dn265063(v=vs.85).aspx
	            if (ctx.setLineDash) {
	                dashPattern[0] = dashPattern[1] = dashLength;
	                ctx.setLineDash(dashPattern);
	                ctx.moveTo(x1, y1);
	                ctx.lineTo(x2, y2);
	                return;
	            }
	
	            dashLength = typeof dashLength != 'number'
	                            ? 5 
	                            : dashLength;
	
	            var dx = x2 - x1;
	            var dy = y2 - y1;
	            var numDashes = Math.floor(
	                Math.sqrt(dx * dx + dy * dy) / dashLength
	            );
	            dx = dx / numDashes;
	            dy = dy / numDashes;
	            var flag = true;
	            for (var i = 0; i < numDashes; ++i) {
	                if (flag) {
	                    ctx.moveTo(x1, y1);
	                }
	                else {
	                    ctx.lineTo(x1, y1);
	                }
	                flag = !flag;
	                x1 += dx;
	                y1 += dy;
	            }
	            ctx.lineTo(x2, y2);
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 * @author Neil (杨骥, 511415343@qq.com)
	 * @example
	 *     var BezierCurve = require('zrender/shape/BezierCurve');
	 *     var shape = new BezierCurve({
	 *         style: {
	 *             xStart: 0,
	 *             yStart: 0,
	 *             cpX1: 100,
	 *             cpY1: 0,
	 *             cpX2: 0,
	 *             cpY2: 100,
	 *             xEnd: 100,
	 *             yEnd: 100,
	 *             strokeColor: 'red'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IBezierCurveStyle
	 * @property {number} xStart 起点x坐标
	 * @property {number} yStart 起点y坐标
	 * @property {number} cpX1 第一个控制点x坐标
	 * @property {number} cpY1 第一个控制点y坐标
	 * @property {number} [cpX2] 第二个控制点x坐标，如果不给则为二次贝塞尔曲线
	 * @property {number} [cpY2] 第二个控制点y坐标，如果不给则为二次贝塞尔曲线
	 * @property {number} xEnd 终止点x坐标
	 * @property {number} yEnd 终止点y坐标
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';
	
	        var Base = __webpack_require__(185);
	        
	        /**
	         * @alias module:zrender/shape/BezierCurve
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var BezierCurve = function(options) {
	            this.brushTypeOnly = 'stroke';  // 线条只能描边，填充后果自负
	            this.textPosition = 'end';
	            Base.call(this, options);
	            /**
	             * 贝赛尔曲线绘制样式
	             * @name module:zrender/shape/BezierCurve#style
	             * @type {module:zrender/shape/BezierCurve~IBezierCurveStyle}
	             */
	            /**
	             * 贝赛尔曲线高亮绘制样式
	             * @name module:zrender/shape/BezierCurve#highlightStyle
	             * @type {module:zrender/shape/BezierCurve~IBezierCurveStyle}
	             */
	        };
	
	        BezierCurve.prototype = {
	            type: 'bezier-curve',
	
	            /**
	             * 创建贝塞尔曲线路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/BezierCurve~IBezierCurveStyle} style
	             */
	            buildPath : function(ctx, style) {
	                ctx.moveTo(style.xStart, style.yStart);
	                if (typeof style.cpX2 != 'undefined'
	                    && typeof style.cpY2 != 'undefined'
	                ) {
	                    ctx.bezierCurveTo(
	                        style.cpX1, style.cpY1,
	                        style.cpX2, style.cpY2,
	                        style.xEnd, style.yEnd
	                    );
	                }
	                else {
	                    ctx.quadraticCurveTo(
	                        style.cpX1, style.cpY1,
	                        style.xEnd, style.yEnd
	                    );
	                }
	            },
	
	            /**
	             * 计算返回贝赛尔曲线包围盒矩形。
	             * 该包围盒是直接从四个控制点计算，并非最小包围盒。
	             * @param {module:zrender/shape/BezierCurve~IBezierCurveStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var _minX = Math.min(style.xStart, style.xEnd, style.cpX1);
	                var _minY = Math.min(style.yStart, style.yEnd, style.cpY1);
	                var _maxX = Math.max(style.xStart, style.xEnd, style.cpX1);
	                var _maxY = Math.max(style.yStart, style.yEnd, style.cpY1);
	                var _x2 = style.cpX2;
	                var _y2 = style.cpY2;
	
	                if (typeof _x2 != 'undefined'
	                    && typeof _y2 != 'undefined'
	                ) {
	                    _minX = Math.min(_minX, _x2);
	                    _minY = Math.min(_minY, _y2);
	                    _maxX = Math.max(_maxX, _x2);
	                    _maxY = Math.max(_maxY, _y2);
	                }
	
	                var lineWidth = style.lineWidth || 1;
	                style.__rect = {
	                    x : _minX - lineWidth,
	                    y : _minY - lineWidth,
	                    width : _maxX - _minX + lineWidth,
	                    height : _maxY - _minY + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(BezierCurve, Base);
	        return BezierCurve;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：大规模散点图图形
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'symbol',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见
	
	       // 样式属性，默认状态样式样式属性
	       style  : {
	           pointList     : {Array},   // 必须，二维数组，二维内容如下
	               x         : {number},  // 必须，横坐标
	               y         : {number},  // 必须，纵坐标数组
	               size      : {number},  // 必须，半宽
	               type      : {string=}, // 默认为'circle',图形类型
	       },
	
	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }
	
	       // 交互属性，详见shape.Base
	
	       // 事件属性，详见shape.Base
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(185);
	    var PolygonShape = __webpack_require__(209);
	    var polygonInstance = new PolygonShape({});
	    var zrUtil = __webpack_require__(168);
	
	    function Symbol(options) {
	        Base.call(this, options);
	    }
	
	    Symbol.prototype =  {
	        type : 'symbol',
	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var pointList = style.pointList;
	            var len = pointList.length;
	            if (len === 0) {
	                return;
	            }
	
	            var subSize = 10000;
	            var subSetLength = Math.ceil(len / subSize);
	            var sub;
	            var subLen;
	            var isArray = pointList[0] instanceof Array;
	            var size = style.size ? style.size : 2;
	            var curSize = size;
	            var halfSize = size / 2;
	            var PI2 = Math.PI * 2;
	            var percent;
	            var x;
	            var y;
	            for (var j = 0; j < subSetLength; j++) {
	                ctx.beginPath();
	                sub = j * subSize;
	                subLen = sub + subSize;
	                subLen = subLen > len ? len : subLen;
	                for (var i = sub; i < subLen; i++) {
	                    if (style.random) {
	                        percent = style['randomMap' + (i % 20)] / 100;
	                        curSize = size * percent * percent;
	                        halfSize = curSize / 2;
	                    }
	                    if (isArray) {
	                        x = pointList[i][0];
	                        y = pointList[i][1];
	                    }
	                    else {
	                        x = pointList[i].x;
	                        y = pointList[i].y;
	                    }
	                    if (curSize < 3) {
	                        // 小于3像素视觉误差
	                        ctx.rect(x - halfSize, y - halfSize, curSize, curSize);
	                    }
	                    else {
	                        // 大于3像素才考虑图形
	                        switch (style.iconType) {
	                            case 'circle' :
	                                ctx.moveTo(x, y);
	                                ctx.arc(x, y, halfSize, 0, PI2, true);
	                                break;
	                            case 'diamond' :
	                                ctx.moveTo(x, y - halfSize);
	                                ctx.lineTo(x + halfSize / 3, y - halfSize / 3);
	                                ctx.lineTo(x + halfSize, y);
	                                ctx.lineTo(x + halfSize / 3, y + halfSize / 3);
	                                ctx.lineTo(x, y + halfSize);
	                                ctx.lineTo(x - halfSize / 3, y + halfSize / 3);
	                                ctx.lineTo(x - halfSize, y);
	                                ctx.lineTo(x - halfSize / 3, y - halfSize / 3);
	                                ctx.lineTo(x, y - halfSize);
	                                break;
	                            default :
	                                ctx.rect(x - halfSize, y - halfSize, curSize, curSize);
	                        }
	                    }
	                }
	                ctx.closePath();
	                if (j < (subSetLength - 1)) {
	                    switch (style.brushType) {
	                        case 'both':
	                            ctx.fill();
	                            style.lineWidth > 0 && ctx.stroke();  // js hint -_-"
	                            break;
	                        case 'stroke':
	                            style.lineWidth > 0 && ctx.stroke();
	                            break;
	                        default:
	                            ctx.fill();
	                    }
	                }
	            }
	        },
	
	        /* 像素模式
	        buildPath : function (ctx, style) {
	            var pointList = style.pointList;
	            var rect = this.getRect(style);
	            var ratio = window.devicePixelRatio || 1;
	            // console.log(rect)
	            // var ti = new Date();
	            // bbox取整
	            rect = {
	                x : Math.floor(rect.x),
	                y : Math.floor(rect.y),
	                width : Math.floor(rect.width),
	                height : Math.floor(rect.height)
	            };
	            var pixels = ctx.getImageData(
	                rect.x * ratio, rect.y * ratio,
	                rect.width * ratio, rect.height * ratio
	            );
	            var data = pixels.data;
	            var idx;
	            var zrColor = require('zrenderjs/tool/color');
	            var color = zrColor.toArray(style.color);
	            var r = color[0];
	            var g = color[1];
	            var b = color[2];
	            var width = rect.width;
	
	            for (var i = 1, l = pointList.length; i < l; i++) {
	                idx = ((Math.floor(pointList[i][0]) - rect.x) * ratio
	                       + (Math.floor(pointList[i][1])- rect.y) * width * ratio * ratio
	                      ) * 4;
	                data[idx] = r;
	                data[idx + 1] = g;
	                data[idx + 2] = b;
	                data[idx + 3] = 255;
	            }
	            ctx.putImageData(pixels, rect.x * ratio, rect.y * ratio);
	            // console.log(new Date() - ti);
	            return;
	        },
	        */
	
	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            return style.__rect || polygonInstance.getRect(style);
	        },
	
	        isCover : __webpack_require__(212)
	    };
	
	    zrUtil.inherits(Symbol, Base);
	
	    return Symbol;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *     var Polygon = require('zrender/shape/Polygon');
	 *     var shape = new Polygon({
	 *         style: {
	 *             // 100x100的正方形
	 *             pointList: [[0, 0], [100, 0], [100, 100], [0, 100]],
	 *             color: 'blue'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IPolygonStyle
	 * @property {string} pointList 多边形顶点数组
	 * @property {string} [smooth=''] 是否做平滑插值, 平滑算法可以选择 bezier, spline
	 * @property {number} [smoothConstraint] 平滑约束
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(185);
	        var smoothSpline = __webpack_require__(210);
	        var smoothBezier = __webpack_require__(211);
	        var dashedLineTo = __webpack_require__(206);
	
	        /**
	         * @alias module:zrender/shape/Polygon
	         * @param {Object} options
	         * @constructor
	         * @extends module:zrender/shape/Base
	         */
	        var Polygon = function (options) {
	            Base.call(this, options);
	            /**
	             * 多边形绘制样式
	             * @name module:zrender/shape/Polygon#style
	             * @type {module:zrender/shape/Polygon~IPolygonStyle}
	             */
	            /**
	             * 多边形高亮绘制样式
	             * @name module:zrender/shape/Polygon#highlightStyle
	             * @type {module:zrender/shape/Polygon~IPolygonStyle}
	             */
	        };
	
	        Polygon.prototype = {
	            type: 'polygon',
	
	            /**
	             * 创建多边形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Polygon~IPolygonStyle} style
	             */
	            buildPath : function (ctx, style) {
	                // 虽然能重用brokenLine，但底层图形基于性能考虑，重复代码减少调用吧
	                var pointList = style.pointList;
	                // 开始点和结束点重复
	                /*
	                var start = pointList[0];
	                var end = pointList[pointList.length-1];
	
	                if (start && end) {
	                    if (start[0] == end[0] &&
	                        start[1] == end[1]) {
	                        // 移除最后一个点
	                        pointList.pop();
	                    }
	                }
	                */
	
	                if (pointList.length < 2) {
	                    // 少于2个点就不画了~
	                    return;
	                }
	
	                if (style.smooth && style.smooth !== 'spline') {
	                    var controlPoints = smoothBezier(
	                        pointList, style.smooth, true, style.smoothConstraint
	                    );
	
	                    ctx.moveTo(pointList[0][0], pointList[0][1]);
	                    var cp1;
	                    var cp2;
	                    var p;
	                    var len = pointList.length;
	                    for (var i = 0; i < len; i++) {
	                        cp1 = controlPoints[i * 2];
	                        cp2 = controlPoints[i * 2 + 1];
	                        p = pointList[(i + 1) % len];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                } 
	                else {
	                    if (style.smooth === 'spline') {
	                        pointList = smoothSpline(pointList, true);
	                    }
	
	                    if (!style.lineType || style.lineType == 'solid') {
	                        // 默认为实线
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1, l = pointList.length; i < l; i++) {
	                            ctx.lineTo(pointList[i][0], pointList[i][1]);
	                        }
	                        ctx.lineTo(pointList[0][0], pointList[0][1]);
	                    }
	                    else if (style.lineType == 'dashed'
	                            || style.lineType == 'dotted'
	                    ) {
	                        var dashLength = 
	                            style._dashLength
	                            || (style.lineWidth || 1) 
	                               * (style.lineType == 'dashed' ? 5 : 1);
	                        style._dashLength = dashLength;
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1, l = pointList.length; i < l; i++) {
	                            dashedLineTo(
	                                ctx,
	                                pointList[i - 1][0], pointList[i - 1][1],
	                                pointList[i][0], pointList[i][1],
	                                dashLength
	                            );
	                        }
	                        dashedLineTo(
	                            ctx,
	                            pointList[pointList.length - 1][0], 
	                            pointList[pointList.length - 1][1],
	                            pointList[0][0],
	                            pointList[0][1],
	                            dashLength
	                        );
	                    }
	                }
	
	                ctx.closePath();
	                return;
	            },
	
	            /**
	             * 计算返回多边形包围盒矩阵
	             * @param {module:zrender/shape/Polygon~IPolygonStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var minX =  Number.MAX_VALUE;
	                var maxX =  Number.MIN_VALUE;
	                var minY = Number.MAX_VALUE;
	                var maxY = Number.MIN_VALUE;
	
	                var pointList = style.pointList;
	                for (var i = 0, l = pointList.length; i < l; i++) {
	                    if (pointList[i][0] < minX) {
	                        minX = pointList[i][0];
	                    }
	                    if (pointList[i][0] > maxX) {
	                        maxX = pointList[i][0];
	                    }
	                    if (pointList[i][1] < minY) {
	                        minY = pointList[i][1];
	                    }
	                    if (pointList[i][1] > maxY) {
	                        maxY = pointList[i][1];
	                    }
	                }
	
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                
	                style.__rect = {
	                    x : Math.round(minX - lineWidth / 2),
	                    y : Math.round(minY - lineWidth / 2),
	                    width : maxX - minX + lineWidth,
	                    height : maxY - minY + lineWidth
	                };
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Polygon, Base);
	        return Polygon;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang) 
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var vector = __webpack_require__(178);
	
	        /**
	         * @inner
	         */
	        function interpolate(p0, p1, p2, p3, t, t2, t3) {
	            var v0 = (p2 - p0) * 0.5;
	            var v1 = (p3 - p1) * 0.5;
	            return (2 * (p1 - p2) + v0 + v1) * t3 
	                    + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                    + v0 * t + p1;
	        }
	
	        /**
	         * @alias module:zrender/shape/util/smoothSpline
	         * @param {Array} points 线段顶点数组
	         * @param {boolean} isLoop
	         * @param {Array} constraint 
	         * @return {Array}
	         */
	        return function (points, isLoop, constraint) {
	            var len = points.length;
	            var ret = [];
	
	            var distance = 0;
	            for (var i = 1; i < len; i++) {
	                distance += vector.distance(points[i - 1], points[i]);
	            }
	            
	            var segs = distance / 5;
	            segs = segs < len ? len : segs;
	            for (var i = 0; i < segs; i++) {
	                var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	                var idx = Math.floor(pos);
	
	                var w = pos - idx;
	
	                var p0;
	                var p1 = points[idx % len];
	                var p2;
	                var p3;
	                if (!isLoop) {
	                    p0 = points[idx === 0 ? idx : idx - 1];
	                    p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	                    p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	                }
	                else {
	                    p0 = points[(idx - 1 + len) % len];
	                    p2 = points[(idx + 1) % len];
	                    p3 = points[(idx + 2) % len];
	                }
	
	                var w2 = w * w;
	                var w3 = w * w2;
	
	                ret.push([
	                    interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
	                    interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
	                ]);
	            }
	            return ret;
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 贝塞尔平滑曲线 
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang) 
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var vector = __webpack_require__(178);
	
	        /**
	         * 贝塞尔平滑曲线
	         * @alias module:zrender/shape/util/smoothBezier
	         * @param {Array} points 线段顶点数组
	         * @param {number} smooth 平滑等级, 0-1
	         * @param {boolean} isLoop
	         * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	         *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	         *                           整个折线的包围盒做一个并集用来约束控制点。
	         * @param {Array} 计算出来的控制点数组
	         */
	        return function (points, smooth, isLoop, constraint) {
	            var cps = [];
	
	            var v = [];
	            var v1 = [];
	            var v2 = [];
	            var prevPoint;
	            var nextPoint;
	
	            var hasConstraint = !!constraint;
	            var min, max;
	            if (hasConstraint) {
	                min = [Infinity, Infinity];
	                max = [-Infinity, -Infinity];
	                for (var i = 0, len = points.length; i < len; i++) {
	                    vector.min(min, min, points[i]);
	                    vector.max(max, max, points[i]);
	                }
	                // 与指定的包围盒做并集
	                vector.min(min, min, constraint[0]);
	                vector.max(max, max, constraint[1]);
	            }
	
	            for (var i = 0, len = points.length; i < len; i++) {
	                var point = points[i];
	                var prevPoint;
	                var nextPoint;
	
	                if (isLoop) {
	                    prevPoint = points[i ? i - 1 : len - 1];
	                    nextPoint = points[(i + 1) % len];
	                } 
	                else {
	                    if (i === 0 || i === len - 1) {
	                        cps.push(vector.clone(points[i]));
	                        continue;
	                    } 
	                    else {
	                        prevPoint = points[i - 1];
	                        nextPoint = points[i + 1];
	                    }
	                }
	
	                vector.sub(v, nextPoint, prevPoint);
	
	                // use degree to scale the handle length
	                vector.scale(v, v, smooth);
	
	                var d0 = vector.distance(point, prevPoint);
	                var d1 = vector.distance(point, nextPoint);
	                var sum = d0 + d1;
	                if (sum !== 0) {
	                    d0 /= sum;
	                    d1 /= sum;
	                }
	
	                vector.scale(v1, v, -d0);
	                vector.scale(v2, v, d1);
	                var cp0 = vector.add([], point, v1);
	                var cp1 = vector.add([], point, v2);
	                if (hasConstraint) {
	                    vector.max(cp0, cp0, min);
	                    vector.min(cp0, cp0, max);
	                    vector.max(cp1, cp1, min);
	                    vector.min(cp1, cp1, max);
	                }
	                cps.push(cp0);
	                cps.push(cp1);
	            }
	            
	            if (isLoop) {
	                cps.push(vector.clone(cps.shift()));
	            }
	
	            return cps;
	        };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// 由于大多数shape默认的isCover都是相同的逻辑
	// 所以在echarts里临时抽象一个module，用于isCover method
	// TODO: 对zrender的isCover和getRect方法进行抽象，重新整理该逻辑
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return function (x, y) {
	        var originPos = this.transformCoordToLocal(x, y);
	        x = originPos[0];
	        y = originPos[1];
	
	        return this.isCoverRect(x, y);
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 折线
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @module zrender/shape/Polyline
	 * @example
	 *     var Polyline = require('zrender/shape/Polyline');
	 *     var shape = new Polyline({
	 *         style: {
	 *             pointList: [[0, 0], [100, 100], [100, 0]],
	 *             smooth: 'bezier',
	 *             strokeColor: 'purple'
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IPolylineStyle
	 * @property {Array.<number>} pointList 顶点坐标数组
	 * @property {string|number} [smooth=''] 是否做平滑插值, 平滑算法可以选择 bezier, spline
	 * @property {number} [smoothConstraint] 平滑约束
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {string} [lineJoin='miter'] 线段连接样式，可以是 miter, round, bevel
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(185);
	        var smoothSpline = __webpack_require__(210);
	        var smoothBezier = __webpack_require__(211);
	        var dashedLineTo = __webpack_require__(206);
	
	        /**
	         * @alias module:zrender/shape/Polyline
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Polyline = function(options) {
	            this.brushTypeOnly = 'stroke';  // 线条只能描边，填充后果自负
	            this.textPosition = 'end';
	            Base.call(this, options);
	            /**
	             * 贝赛尔曲线绘制样式
	             * @name module:zrender/shape/Polyline#style
	             * @type {module:zrender/shape/Polyline~IPolylineStyle}
	             */
	            /**
	             * 贝赛尔曲线高亮绘制样式
	             * @name module:zrender/shape/Polyline#highlightStyle
	             * @type {module:zrender/shape/Polyline~IPolylineStyle}
	             */
	        };
	
	        Polyline.prototype =  {
	            type: 'polyline',
	
	            /**
	             * 创建多边形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Polyline~IPolylineStyle} style
	             */
	            buildPath : function(ctx, style) {
	                var pointList = style.pointList;
	                if (pointList.length < 2) {
	                    // 少于2个点就不画了~
	                    return;
	                }
	                
	                var len = Math.min(
	                    style.pointList.length, 
	                    Math.round(style.pointListLength || style.pointList.length)
	                );
	                
	                if (style.smooth && style.smooth !== 'spline') {
	                    if (! style.controlPointList) {
	                        this.updateControlPoints(style);
	                    }
	                    var controlPointList = style.controlPointList;
	
	                    ctx.moveTo(pointList[0][0], pointList[0][1]);
	                    var cp1;
	                    var cp2;
	                    var p;
	                    for (var i = 0; i < len - 1; i++) {
	                        cp1 = controlPointList[i * 2];
	                        cp2 = controlPointList[i * 2 + 1];
	                        p = pointList[i + 1];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                }
	                else {
	                    if (style.smooth === 'spline') {
	                        pointList = smoothSpline(pointList);
	                        len = pointList.length;
	                    }
	                    if (!style.lineType || style.lineType == 'solid') {
	                        // 默认为实线
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1; i < len; i++) {
	                            ctx.lineTo(pointList[i][0], pointList[i][1]);
	                        }
	                    }
	                    else if (style.lineType == 'dashed'
	                            || style.lineType == 'dotted'
	                    ) {
	                        var dashLength = (style.lineWidth || 1) 
	                                         * (style.lineType == 'dashed' ? 5 : 1);
	                        ctx.moveTo(pointList[0][0], pointList[0][1]);
	                        for (var i = 1; i < len; i++) {
	                            dashedLineTo(
	                                ctx,
	                                pointList[i - 1][0], pointList[i - 1][1],
	                                pointList[i][0], pointList[i][1],
	                                dashLength
	                            );
	                        }
	                    }
	                }
	                return;
	            },
	
	            updateControlPoints: function (style) {
	                style.controlPointList = smoothBezier(
	                    style.pointList, style.smooth, false, style.smoothConstraint
	                );
	            },
	
	            /**
	             * 计算返回折线包围盒矩形。
	             * @param {IZRenderBezierCurveStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function(style) {
	                return __webpack_require__(209).prototype.getRect(style);
	            }
	        };
	
	        __webpack_require__(168).inherits(Polyline, Base);
	        return Polyline;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * ShapeBundle 捆绑多个 shape 的 buildPath 方法，但是共用同一个样式
	 * @author pissang (https://github.com/pissang)
	 * @module zrender/shape/ShapeBundle
	 * @example
	 *     var poly1 = new PolygonShape();
	 *     var poly2 = new PolygonShape();
	 *     var poly3 = new PolygonShape();
	 *     var shapeBundle = new ShapeBundle({
	 *         style: {
	 *             shapeList: [poly1, poly2, poly3],
	 *             color: 'red'
	 *         }
	 *     });
	 *     zr.addShape(shapeBundle);
	 */
	
	/**
	 * @typedef {Object} IShapeBundleStyle
	 * @property {string} shapeList shape列表
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    var Base = __webpack_require__(185);
	
	    var ShapeBundle = function (options) {
	        Base.call(this, options);
	        /**
	         * ShapeBundle绘制样式
	         * @name module:zrender/shape/ShapeBundle#style
	         * @type {module:zrender/shape/ShapeBundle~IShapeBundleStyle}
	         */
	        /**
	         * ShapeBundle高亮绘制样式
	         * @name module:zrender/shape/ShapeBundle#highlightStyle
	         * @type {module:zrender/shape/ShapeBundle~IShapeBundleStyle}
	         */
	    };
	
	    ShapeBundle.prototype = {
	
	        constructor: ShapeBundle,
	
	        type: 'shape-bundle',
	
	        brush: function (ctx, isHighlight) {
	            var style = this.beforeBrush(ctx, isHighlight);
	
	            ctx.beginPath();
	            for (var i = 0; i < style.shapeList.length; i++) {
	                var subShape = style.shapeList[i];
	                var subShapeStyle = subShape.style;
	                if (isHighlight) {
	                    subShapeStyle = subShape.getHighlightStyle(
	                        subShapeStyle,
	                        subShape.highlightStyle || {},
	                        subShape.brushTypeOnly
	                    );
	                }
	                subShape.buildPath(ctx, subShapeStyle);
	            }
	            switch (style.brushType) {
	                /* jshint ignore:start */
	                case 'both':
	                    ctx.fill();
	                case 'stroke':
	                    style.lineWidth > 0 && ctx.stroke();
	                    break;
	                /* jshint ignore:end */
	                default:
	                    ctx.fill();
	            }
	
	            this.drawText(ctx, style, this.style);
	
	            this.afterBrush(ctx);
	        },
	
	        /**
	         * 计算返回多边形包围盒矩阵
	         * @param {module:zrender/shape/Polygon~IShapeBundleStyle} style
	         * @return {module:zrender/shape/Base~IBoundingRect}
	         */
	        getRect: function (style) {
	            if (style.__rect) {
	                return style.__rect;
	            }
	            var minX = Infinity;
	            var maxX = -Infinity;
	            var minY = Infinity;
	            var maxY = -Infinity;
	            for (var i = 0; i < style.shapeList.length; i++) {
	                var subShape = style.shapeList[i];
	                // TODO Highlight style ?
	                var subRect = subShape.getRect(subShape.style);
	
	                var minX = Math.min(subRect.x, minX);
	                var minY = Math.min(subRect.y, minY);
	                var maxX = Math.max(subRect.x + subRect.width, maxX);
	                var maxY = Math.max(subRect.y + subRect.height, maxY);
	            }
	
	            style.__rect = {
	                x: minX,
	                y: minY,
	                width: maxX - minX,
	                height: maxY - minY
	            };
	
	            return style.__rect;
	        },
	
	        isCover: function (x, y) {
	            var originPos = this.transformCoordToLocal(x, y);
	            x = originPos[0];
	            y = originPos[1];
	            
	            if (this.isCoverRect(x, y)) {
	                for (var i = 0; i < this.style.shapeList.length; i++) {
	                    var subShape = this.style.shapeList[i];
	                    if (subShape.isCover(x, y)) {
	                        return true;
	                    }
	                }
	            }
	
	            return false;
	        }
	    };
	
	    __webpack_require__(168).inherits(ShapeBundle, Base);
	    return ShapeBundle;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts通用私有数据服务
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    /**
	     * 打包私有数据
	     *
	     * @param {shape} shape 修改目标
	     * @param {Object} series
	     * @param {number} seriesIndex
	     * @param {number | Object} data
	     * @param {number} dataIndex
	     * @param {*=} special
	     * @param {*=} special2
	     */
	    function pack(
	        shape, series, seriesIndex, data, dataIndex, name, special, special2
	    ) {
	        var value;
	        if (typeof data != 'undefined') {
	            value = data.value == null
	                ? data
	                : data.value;
	        }
	
	        shape._echartsData = {
	            '_series' : series,
	            '_seriesIndex' : seriesIndex,
	            '_data' : data,
	            '_dataIndex' : dataIndex,
	            '_name' : name,
	            '_value' : value,
	            '_special' : special,
	            '_special2' : special2
	        };
	        return shape._echartsData;
	    }
	
	    /**
	     * 从私有数据中获取特定项
	     * @param {shape} shape
	     * @param {string} key
	     */
	    function get(shape, key) {
	        var data = shape._echartsData;
	        if (!key) {
	            return data;
	        }
	
	        switch (key) {
	            case 'series' :
	            case 'seriesIndex' :
	            case 'data' :
	            case 'dataIndex' :
	            case 'name' :
	            case 'value' :
	            case 'special' :
	            case 'special2' :
	                return data && data['_' + key];
	        }
	
	        return null;
	    }
	
	    /**
	     * 修改私有数据中获取特定项
	     * @param {shape} shape
	     * @param {string} key
	     * @param {*} value
	     */
	    function set(shape, key, value) {
	        shape._echartsData = shape._echartsData || {};
	        switch (key) {
	            case 'series' :             // 当前系列值
	            case 'seriesIndex' :        // 系列数组位置索引
	            case 'data' :               // 当前数据值
	            case 'dataIndex' :          // 数据数组位置索引
	            case 'name' :
	            case 'value' :
	            case 'special' :
	            case 'special2' :
	                shape._echartsData['_' + key] = value;
	                break;
	        }
	    }
	    
	    /**
	     * 私有数据克隆，把source拷贝到target上
	     * @param {shape} source 源
	     * @param {shape} target 目标
	     */
	    function clone(source, target) {
	        target._echartsData =  {
	            '_series' : source._echartsData._series,
	            '_seriesIndex' : source._echartsData._seriesIndex,
	            '_data' : source._echartsData._data,
	            '_dataIndex' : source._echartsData._dataIndex,
	            '_name' : source._echartsData._name,
	            '_value' : source._echartsData._value,
	            '_special' : source._echartsData._special,
	            '_special2' : source._echartsData._special2
	        };
	    }
	
	    return {
	        pack : pack,
	        set : set,
	        get : get,
	        clone : clone
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表动画基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var zrUtil = __webpack_require__(168);
	    var curveTool = __webpack_require__(184);
	    
	    /**
	     * 折线型动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function pointList(zr, oldShape, newShape, duration, easing) {
	        var newPointList = newShape.style.pointList;
	        var newPointListLen = newPointList.length;
	        var oldPointList;
	
	        if (!oldShape) {        // add
	            oldPointList = [];
	            if (newShape._orient != 'vertical') {
	                var y = newPointList[0][1];
	                for (var i = 0; i < newPointListLen; i++) {
	                    oldPointList[i] = [newPointList[i][0], y];
	                }
	            }
	            else {
	                var x = newPointList[0][0];
	                for (var i = 0; i < newPointListLen; i++) {
	                    oldPointList[i] = [x, newPointList[i][1]];
	                }
	            }
	
	            if (newShape.type == 'half-smooth-polygon') {
	                oldPointList[newPointListLen - 1] = zrUtil.clone(newPointList[newPointListLen - 1]);
	                oldPointList[newPointListLen - 2] = zrUtil.clone(newPointList[newPointListLen - 2]);
	            }
	            oldShape = {style : {pointList : oldPointList}};
	        }
	        
	        oldPointList = oldShape.style.pointList;
	        var oldPointListLen = oldPointList.length;
	        if (oldPointListLen == newPointListLen) {
	            newShape.style.pointList = oldPointList;
	        }
	        else if (oldPointListLen < newPointListLen) {
	            // 原来短，新的长，补全
	            newShape.style.pointList = oldPointList.concat(newPointList.slice(oldPointListLen));
	        }
	        else {
	            // 原来长，新的短，截断
	            newShape.style.pointList = oldPointList.slice(0, newPointListLen);
	        }
	
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                { pointList: newPointList }
	            )
	            .during(function () {
	                // Updating bezier points
	                if (newShape.updateControlPoints) {
	                    newShape.updateControlPoints(newShape.style);
	                }
	            })
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 复制样式
	     * 
	     * @inner
	     * @param {Object} target 目标对象
	     * @param {Object} source 源对象
	     * @param {...string} props 复制的属性列表
	     */
	    function cloneStyle(target, source) {
	        var len = arguments.length;
	        for (var i = 2; i < len; i++) {
	            var prop = arguments[i];
	            target.style[prop] = source.style[prop];
	        }
	    }
	
	    /**
	     * 方型动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function rectangle(zr, oldShape, newShape, duration, easing) {
	        var newShapeStyle = newShape.style;
	        if (!oldShape) {        // add
	            oldShape = {
	                position : newShape.position,
	                style : {
	                    x : newShapeStyle.x,
	                    y : newShape._orient == 'vertical'
	                        ? newShapeStyle.y + newShapeStyle.height
	                        : newShapeStyle.y,
	                    width: newShape._orient == 'vertical' 
	                           ? newShapeStyle.width : 0,
	                    height: newShape._orient != 'vertical' 
	                           ? newShapeStyle.height : 0
	                }
	            };
	        }
	        
	        var newX = newShapeStyle.x;
	        var newY = newShapeStyle.y;
	        var newWidth = newShapeStyle.width;
	        var newHeight = newShapeStyle.height;
	        var newPosition = [newShape.position[0], newShape.position[1]];
	        cloneStyle(
	            newShape, oldShape,
	            'x', 'y', 'width', 'height'
	        );
	        newShape.position = oldShape.position;
	
	        zr.addShape(newShape);
	        if (newPosition[0] != oldShape.position[0] || newPosition[1] != oldShape.position[1]) {
	            zr.animate(newShape.id, '')
	                .when(
	                    duration,
	                    {
	                        position: newPosition
	                    }
	                )
	                .start(easing);
	        }
	        
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    x: newX,
	                    y: newY,
	                    width: newWidth,
	                    height: newHeight
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 蜡烛动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function candle(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            var y = newShape.style.y;
	            oldShape = {style : {y : [y[0], y[0], y[0], y[0]]}};
	        }
	        
	        var newY = newShape.style.y;
	        newShape.style.y = oldShape.style.y;
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                { y: newY }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	
	    /**
	     * 环型动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function ring(zr, oldShape, newShape, duration, easing) {
	        var x = newShape.style.x;
	        var y = newShape.style.y;
	        var r0 = newShape.style.r0;
	        var r = newShape.style.r;
	        
	        newShape.__animating = true;
	
	        if (newShape._animationAdd != 'r') {
	            newShape.style.r0 = 0;
	            newShape.style.r = 0;
	            newShape.rotation = [Math.PI*2, x, y];
	            
	            zr.addShape(newShape);
	            zr.animate(newShape.id, 'style')
	                .when(
	                    duration,
	                    {
	                        r0 : r0,
	                        r : r
	                    }
	                )
	                .done(function() {
	                    newShape.__animating = false;
	                })
	                .start(easing);
	            zr.animate(newShape.id, '')
	                .when(
	                    duration,
	                    { rotation : [0, x, y] }
	                )
	                .start(easing);
	        }
	        else {
	            newShape.style.r0 = newShape.style.r;
	            
	            zr.addShape(newShape);
	            zr.animate(newShape.id, 'style')
	                .when(
	                    duration,
	                    {
	                        r0 : r0
	                    }
	                )
	                .done(function() {
	                    newShape.__animating = false;
	                })
	                .start(easing);
	        }
	    }
	    
	    /**
	     * 扇形动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function sector(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            if (newShape._animationAdd != 'r') {
	                oldShape = {
	                    style : {
	                        startAngle : newShape.style.startAngle,
	                        endAngle : newShape.style.startAngle
	                    }
	                };
	            }
	            else {
	                oldShape = {style : {r0 : newShape.style.r}};
	            }
	        }
	        
	        var startAngle = newShape.style.startAngle;
	        var endAngle = newShape.style.endAngle;
	        
	        cloneStyle(
	            newShape, oldShape,
	            'startAngle', 'endAngle'
	        );
	        
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    startAngle : startAngle,
	                    endAngle : endAngle
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 文本动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function text(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            oldShape = {
	                style : {
	                    x : newShape.style.textAlign == 'left' 
	                        ? newShape.style.x + 100
	                        : newShape.style.x - 100,
	                    y : newShape.style.y
	                }
	            };
	        }
	        
	        var x = newShape.style.x;
	        var y = newShape.style.y;
	        
	        cloneStyle(
	            newShape, oldShape,
	            'x', 'y'
	        );
	        
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    x : x,
	                    y : y
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 多边形动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function polygon(zr, oldShape, newShape, duration, easing) {
	        var rect = __webpack_require__(209).prototype.getRect(newShape.style);
	        var x = rect.x + rect.width / 2;
	        var y = rect.y + rect.height / 2;
	        
	        newShape.scale = [0.1, 0.1, x, y];
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, '')
	            .when(
	                duration,
	                {
	                    scale : [1, 1, x, y]
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * 和弦动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function ribbon(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            oldShape = {
	                style : {
	                    source0 : 0,
	                    source1 : newShape.style.source1 > 0 ? 360 : -360,
	                    target0 : 0,
	                    target1 : newShape.style.target1 > 0 ? 360 : -360
	                }
	            };
	        }
	        
	        var source0 = newShape.style.source0;
	        var source1 = newShape.style.source1;
	        var target0 = newShape.style.target0;
	        var target1 = newShape.style.target1;
	        
	        if (oldShape.style) {
	            cloneStyle(
	                newShape, oldShape,
	                'source0', 'source1', 'target0', 'target1'
	            );
	        }
	        
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    source0 : source0,
	                    source1 : source1,
	                    target0 : target0,
	                    target1 : target1
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * gaugePointer动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function gaugePointer(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {        // add
	            oldShape = {
	                style : {
	                    angle : newShape.style.startAngle
	                }
	            };
	        }
	        
	        var angle = newShape.style.angle;
	        newShape.style.angle = oldShape.style.angle;
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    angle : angle
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * icon动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function icon(zr, oldShape, newShape, duration, easing, delay) {
	        // 避免markPoint特效取值在动画帧上
	        newShape.style._x = newShape.style.x;
	        newShape.style._y = newShape.style.y;
	        newShape.style._width = newShape.style.width;
	        newShape.style._height = newShape.style.height;
	
	        if (!oldShape) {    // add
	            var x = newShape._x || 0;
	            var y = newShape._y || 0;
	            newShape.scale = [0.01, 0.01, x, y];
	            zr.addShape(newShape);
	            newShape.__animating = true;
	            zr.animate(newShape.id, '')
	                .delay(delay)
	                .when(
	                    duration,
	                    {scale : [1, 1, x, y]}
	                )
	                .done(function() {
	                    newShape.__animating = false;
	                })
	                .start(easing || 'QuinticOut');
	        }
	        else {              // mod
	            rectangle(zr, oldShape, newShape, duration, easing);
	        }
	    }
	    
	    /**
	     * line动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function line(zr, oldShape, newShape, duration, easing) {
	        if (!oldShape) {
	            oldShape = {
	                style : {
	                    xStart : newShape.style.xStart,
	                    yStart : newShape.style.yStart,
	                    xEnd : newShape.style.xStart,
	                    yEnd : newShape.style.yStart
	                }
	            };
	        }
	        
	        var xStart = newShape.style.xStart;
	        var xEnd = newShape.style.xEnd;
	        var yStart = newShape.style.yStart;
	        var yEnd = newShape.style.yEnd;
	
	        cloneStyle(
	            newShape, oldShape,
	            'xStart', 'xEnd', 'yStart', 'yEnd'
	        );
	
	        zr.addShape(newShape);
	        newShape.__animating = true;
	        zr.animate(newShape.id, 'style')
	            .when(
	                duration,
	                {
	                    xStart: xStart,
	                    xEnd: xEnd,
	                    yStart: yStart,
	                    yEnd: yEnd
	                }
	            )
	            .done(function() {
	                newShape.__animating = false;
	            })
	            .start(easing);
	    }
	    
	    /**
	     * markline动画
	     * 
	     * @param {ZRender} zr
	     * @param {shape} oldShape
	     * @param {shape} newShape
	     * @param {number} duration
	     * @param {tring} easing
	     */
	    function markline(zr, oldShape, newShape, duration, easing) {
	        easing = easing || 'QuinticOut';
	        newShape.__animating = true;
	        zr.addShape(newShape);
	        var newShapeStyle = newShape.style;
	
	        var animationDone = function () {
	            newShape.__animating = false;
	        };
	        var x0 = newShapeStyle.xStart;
	        var y0 = newShapeStyle.yStart;
	        var x2 = newShapeStyle.xEnd;
	        var y2 = newShapeStyle.yEnd;
	        if (newShapeStyle.curveness > 0) {
	            newShape.updatePoints(newShapeStyle);
	            var obj = { p: 0 };
	            var x1 = newShapeStyle.cpX1;
	            var y1 = newShapeStyle.cpY1;
	            var newXArr = [];
	            var newYArr = [];
	            var subdivide = curveTool.quadraticSubdivide;
	            zr.animation.animate(obj)
	                .when(duration, { p: 1 })
	                .during(function () {
	                    // Calculate subdivided curve
	                    subdivide(x0, x1, x2, obj.p, newXArr);
	                    subdivide(y0, y1, y2, obj.p, newYArr);
	                    newShapeStyle.cpX1 = newXArr[1];
	                    newShapeStyle.cpY1 = newYArr[1];
	                    newShapeStyle.xEnd = newXArr[2];
	                    newShapeStyle.yEnd = newYArr[2];
	                    zr.modShape(newShape);
	                })
	                .done(animationDone)
	                .start(easing);
	        }
	        else {
	            zr.animate(newShape.id, 'style')
	                .when(0, {
	                    xEnd: x0,
	                    yEnd: y0
	                })
	                .when(duration, {
	                    xEnd: x2,
	                    yEnd: y2
	                })
	                .done(animationDone)
	                .start(easing);
	        }
	    }
	
	    return {
	        pointList : pointList,
	        rectangle : rectangle,
	        candle : candle,
	        ring : ring,
	        sector : sector,
	        text : text,
	        polygon : polygon,
	        ribbon : ribbon,
	        gaugePointer : gaugePointer,
	        icon : icon,
	        line : line,
	        markline : markline
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表特效基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ecData = __webpack_require__(215);
	    
	    var CircleShape = __webpack_require__(218);
	    var ImageShape = __webpack_require__(190);
	    var curveTool = __webpack_require__(184);
	    var IconShape = __webpack_require__(198);
	    var SymbolShape = __webpack_require__(208);
	    var ShapeBundle = __webpack_require__(214);
	    var Polyline = __webpack_require__(213);
	    var vec2 = __webpack_require__(178);
	
	    var canvasSupported = __webpack_require__(172).canvasSupported;
	    
	    function point(zr, effectList, shape, zlevel) {
	        var effect = shape.effect;
	        var color = effect.color || shape.style.strokeColor || shape.style.color;
	        var shadowColor = effect.shadowColor || color;
	        var size = effect.scaleSize;
	        var distance = effect.bounceDistance;
	        var shadowBlur = typeof effect.shadowBlur != 'undefined'
	                         ? effect.shadowBlur : size;
	
	        var effectShape;
	        if (shape.type !== 'image') {
	            effectShape = new IconShape({
	                zlevel : zlevel,
	                style : {
	                    brushType : 'stroke',
	                    iconType : shape.style.iconType != 'droplet'
	                               ? shape.style.iconType
	                               : 'circle',
	                    x : shadowBlur + 1, // 线宽
	                    y : shadowBlur + 1,
	                    n : shape.style.n,
	                    width : shape.style._width * size,
	                    height : shape.style._height * size,
	                    lineWidth : 1,
	                    strokeColor : color,
	                    shadowColor : shadowColor,
	                    shadowBlur : shadowBlur
	                },
	                draggable : false,
	                hoverable : false
	            });
	            if (shape.style.iconType == 'pin') {
	                effectShape.style.y += effectShape.style.height / 2 * 1.5;
	            }
	
	            if (canvasSupported) {  // 提高性能，换成image
	                effectShape.style.image = zr.shapeToImage(
	                    effectShape, 
	                    effectShape.style.width + shadowBlur * 2 + 2, 
	                    effectShape.style.height + shadowBlur * 2 + 2
	                ).style.image;
	                
	                effectShape = new ImageShape({
	                    zlevel : effectShape.zlevel,
	                    style : effectShape.style,
	                    draggable : false,
	                    hoverable : false
	                });
	            }
	        }
	        else {
	            effectShape = new ImageShape({
	                zlevel : zlevel,
	                style : shape.style,
	                draggable : false,
	                hoverable : false
	            });
	        }
	        
	        ecData.clone(shape, effectShape);
	        
	        // 改变坐标，不能移到前面
	        effectShape.position = shape.position;
	        effectList.push(effectShape);
	        zr.addShape(effectShape);
	        
	        var devicePixelRatio = shape.type !== 'image' ? (window.devicePixelRatio || 1) : 1;
	        var offset = (effectShape.style.width / devicePixelRatio - shape.style._width) / 2;
	        effectShape.style.x = shape.style._x - offset;
	        effectShape.style.y = shape.style._y - offset;
	
	        if (shape.style.iconType == 'pin') {
	            effectShape.style.y -= shape.style.height / 2 * 1.5;
	        }
	
	        var duration = (effect.period + Math.random() * 10) * 100;
	        
	        zr.modShape(
	            shape.id, 
	            { invisible : true}
	        );
	        
	        var centerX = effectShape.style.x + (effectShape.style.width) / 2 / devicePixelRatio;
	        var centerY = effectShape.style.y + (effectShape.style.height) / 2 / devicePixelRatio;
	
	        if (effect.type === 'scale') {
	            // 放大效果
	            zr.modShape(
	                effectShape.id, 
	                {
	                    scale : [0.1, 0.1, centerX, centerY]
	                }
	            );
	            
	            zr.animate(effectShape.id, '', effect.loop)
	                .when(
	                    duration,
	                    {
	                        scale : [1, 1, centerX, centerY]
	                    }
	                )
	                .done(function() {
	                    shape.effect.show = false;
	                    zr.delShape(effectShape.id);
	                })
	                .start();
	        }
	        else {
	            zr.animate(effectShape.id, 'style', effect.loop)
	                .when(
	                    duration,
	                    {
	                        y : effectShape.style.y - distance
	                    }
	                )
	                .when(
	                    duration * 2,
	                    {
	                        y : effectShape.style.y
	                    }
	                )
	                .done(function() {
	                    shape.effect.show = false;
	                    zr.delShape(effectShape.id);
	                })
	                .start();
	        }
	        
	    }
	    
	    function largePoint(zr, effectList, shape, zlevel) {
	        var effect = shape.effect;
	        var color = effect.color || shape.style.strokeColor || shape.style.color;
	        var size = effect.scaleSize;
	        var shadowColor = effect.shadowColor || color;
	        var shadowBlur = typeof effect.shadowBlur != 'undefined'
	                         ? effect.shadowBlur : (size * 2);
	        var devicePixelRatio = window.devicePixelRatio || 1;
	        var effectShape = new SymbolShape({
	            zlevel : zlevel,
	            position : shape.position,
	            scale : shape.scale,
	            style : {
	                pointList : shape.style.pointList,
	                iconType : shape.style.iconType,
	                color : color,
	                strokeColor : color,
	                shadowColor : shadowColor,
	                shadowBlur : shadowBlur * devicePixelRatio,
	                random : true,
	                brushType: 'fill',
	                lineWidth:1,
	                size : shape.style.size
	            },
	            draggable : false,
	            hoverable : false
	        });
	        
	        effectList.push(effectShape);
	        zr.addShape(effectShape);
	        zr.modShape(
	            shape.id, 
	            { invisible : true}
	        );
	        
	        var duration = Math.round(effect.period * 100);
	        var clip1 = {};
	        var clip2 = {};
	        for (var i = 0; i < 20; i++) {
	            effectShape.style['randomMap' + i] = 0;
	            clip1 = {};
	            clip1['randomMap' + i] = 100;
	            clip2 = {};
	            clip2['randomMap' + i] = 0;
	            effectShape.style['randomMap' + i] = Math.random() * 100;
	            zr.animate(effectShape.id, 'style', true)
	                .when(duration, clip1)
	                .when(duration * 2, clip2)
	                .when(duration * 3, clip1)
	                .when(duration * 4, clip1)
	                .delay(Math.random() * duration * i)
	                //.delay(duration / 15 * (15 - i + 1))
	                .start();
	            
	        }
	    }
	    
	    function line(zr, effectList, shape, zlevel, isLarge) {
	        var effect = shape.effect;
	        var shapeStyle = shape.style;
	        var color = effect.color || shapeStyle.strokeColor || shapeStyle.color;
	        var shadowColor = effect.shadowColor || shapeStyle.strokeColor || color;
	        var size = shapeStyle.lineWidth * effect.scaleSize;
	        var shadowBlur = typeof effect.shadowBlur != 'undefined'
	                         ? effect.shadowBlur : size;
	
	        var effectShape = new CircleShape({
	            zlevel : zlevel,
	            style : {
	                x : shadowBlur,
	                y : shadowBlur,
	                r : size,
	                color : color,
	                shadowColor : shadowColor,
	                shadowBlur : shadowBlur
	            },
	            hoverable : false
	        });
	
	        var offset = 0;
	        if (canvasSupported && ! isLarge) {  // 提高性能，换成image
	            var zlevel = effectShape.zlevel;
	            effectShape = zr.shapeToImage(
	                effectShape,
	                (size + shadowBlur) * 2,
	                (size + shadowBlur) * 2
	            );
	            effectShape.zlevel = zlevel;
	            effectShape.hoverable = false;
	
	            offset = shadowBlur;
	        }
	
	        if (! isLarge) {
	            ecData.clone(shape, effectShape);
	            // 改变坐标， 不能移到前面
	            effectShape.position = shape.position;
	            effectList.push(effectShape);
	            zr.addShape(effectShape);
	        }
	
	        var effectDone = function () {
	            if (! isLarge) {
	                shape.effect.show = false;
	                zr.delShape(effectShape.id);   
	            }
	            effectShape.effectAnimator = null;
	        };
	
	        if (shape instanceof Polyline) {
	            var distanceList = [0];
	            var totalDist = 0;
	            var pointList = shapeStyle.pointList;
	            var controlPointList = shapeStyle.controlPointList;
	            for (var i = 1; i < pointList.length; i++) {
	                if (controlPointList) {
	                    var cp1 = controlPointList[(i - 1) * 2];
	                    var cp2 = controlPointList[(i - 1) * 2 + 1];
	                    totalDist += vec2.dist(pointList[i - 1], cp1)
	                         + vec2.dist(cp1, cp2)
	                         + vec2.dist(cp2, pointList[i]);
	                }
	                else {
	                    totalDist += vec2.dist(pointList[i - 1], pointList[i]);
	                }
	                distanceList.push(totalDist);
	            }
	            var obj = { p: 0 };
	            var animator = zr.animation.animate(obj, { loop: effect.loop });
	
	            for (var i = 0; i < distanceList.length; i++) {
	                animator.when(distanceList[i] * effect.period, { p: i });
	            }
	            animator.during(function () {
	                var i = Math.floor(obj.p);
	                var x, y;
	                if (i == pointList.length - 1) {
	                    x = pointList[i][0];
	                    y = pointList[i][1];
	                }
	                else {
	                    var t = obj.p - i;
	                    var p0 = pointList[i];
	                    var p1 = pointList[i + 1];
	                    if (controlPointList) {
	                        var cp1 = controlPointList[i * 2];
	                        var cp2 = controlPointList[i * 2 + 1];
	                        x = curveTool.cubicAt(
	                            p0[0], cp1[0], cp2[0], p1[0], t
	                        );
	                        y = curveTool.cubicAt(
	                            p0[1], cp1[1], cp2[1], p1[1], t
	                        );
	                    }
	                    else {
	                        x = (p1[0] - p0[0]) * t + p0[0];
	                        y = (p1[1] - p0[1]) * t + p0[1];   
	                    }
	                }
	                effectShape.style.x = x;
	                effectShape.style.y = y;
	                if (! isLarge) {
	                    zr.modShape(effectShape);
	                }
	            })
	            .done(effectDone)
	            .start();
	
	            animator.duration = totalDist * effect.period;
	
	            effectShape.effectAnimator = animator;
	        }
	        else {
	            var x0 = shapeStyle.xStart - offset;
	            var y0 = shapeStyle.yStart - offset;
	            var x2 = shapeStyle.xEnd - offset;
	            var y2 = shapeStyle.yEnd - offset;
	            effectShape.style.x = x0;
	            effectShape.style.y = y0;
	
	            var distance = (x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0);
	            var duration = Math.round(Math.sqrt(Math.round(
	                distance * effect.period * effect.period
	            )));
	
	            if (shape.style.curveness > 0) {
	                var x1 = shapeStyle.cpX1 - offset;
	                var y1 = shapeStyle.cpY1 - offset;
	                effectShape.effectAnimator = zr.animation.animate(effectShape, { loop: effect.loop })
	                    .when(duration, { p: 1 })
	                    .during(function (target, t) {
	                        effectShape.style.x = curveTool.quadraticAt(
	                            x0, x1, x2, t
	                        );
	                        effectShape.style.y = curveTool.quadraticAt(
	                            y0, y1, y2, t
	                        );
	                        if (! isLarge) {
	                            zr.modShape(effectShape);
	                        }
	                    })
	                    .done(effectDone)
	                    .start();
	            }
	            else {
	                // 不用 zr.animate，因为在用 ShapeBundle 的时候单个 effectShape 不会
	                // 被加到 zrender 中
	                effectShape.effectAnimator = zr.animation.animate(effectShape.style, { loop: effect.loop })
	                    .when(duration, {
	                        x: x2,
	                        y: y2
	                    })
	                    .during(function () {
	                        if (! isLarge) {
	                            zr.modShape(effectShape);
	                        }
	                    })
	                    .done(effectDone)
	                    .start();
	            }
	            effectShape.effectAnimator.duration = duration;
	        }
	        return effectShape;
	    }
	
	    function largeLine(zr, effectList, shape, zlevel) {
	        var effectShape = new ShapeBundle({
	            style: {
	                shapeList: []
	            },
	            zlevel: zlevel,
	            hoverable: false
	        });
	        var shapeList = shape.style.shapeList;
	        var effect = shape.effect;
	        effectShape.position = shape.position;
	
	        var maxDuration = 0;
	        var subEffectAnimators = [];
	        for (var i = 0; i < shapeList.length; i++) {
	            shapeList[i].effect = effect;
	            var subEffectShape = line(zr, null, shapeList[i], zlevel, true);
	            var subEffectAnimator = subEffectShape.effectAnimator;
	            effectShape.style.shapeList.push(subEffectShape);
	            if (subEffectAnimator.duration > maxDuration) {
	                maxDuration = subEffectAnimator.duration;
	            }
	            if (i === 0) {
	                effectShape.style.color = subEffectShape.style.color;
	                effectShape.style.shadowBlur = subEffectShape.style.shadowBlur;
	                effectShape.style.shadowColor = subEffectShape.style.shadowColor;
	            }
	            subEffectAnimators.push(subEffectAnimator);
	        }
	        effectList.push(effectShape);
	        zr.addShape(effectShape);
	
	        var clearAllAnimators = function () {
	            for (var i = 0; i < subEffectAnimators.length; i++) {
	                subEffectAnimators[i].stop();
	            }
	        };
	        if (maxDuration) {
	            effectShape.__dummy = 0;
	            // Proxy animator
	            var animator = zr.animate(effectShape.id, '', effect.loop)
	                .when(maxDuration, {
	                    __dummy: 1
	                })
	                .during(function () {
	                    zr.modShape(effectShape);
	                })
	                .done(function () {
	                    shape.effect.show = false;
	                    zr.delShape(effectShape.id);
	                })
	                .start();
	            var oldStop = animator.stop;
	
	            animator.stop = function () {
	                clearAllAnimators();
	                oldStop.call(this);
	            };
	        }
	    }
	
	    return {
	        point : point,
	        largePoint : largePoint,
	        line : line,
	        largeLine: largeLine
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 圆形
	 * @module zrender/shape/Circle
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @example
	 *   var Circle = require('zrender/shape/Circle');
	 *   var shape = new Circle({
	 *       style: {
	 *           x: 100,
	 *           y: 100,
	 *           r: 40,
	 *           brushType: 'both',
	 *           color: 'blue',
	 *           strokeColor: 'red',
	 *           lineWidth: 3,
	 *           text: 'Circle'
	 *       }    
	 *   });
	 *   zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} ICircleStyle
	 * @property {number} x 圆心x坐标
	 * @property {number} y 圆心y坐标
	 * @property {number} r 半径
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        'use strict';
	
	        var Base = __webpack_require__(185);
	
	        /**
	         * @alias module:zrender/shape/Circle
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Circle = function(options) {
	            Base.call(this, options);
	            /**
	             * 圆形绘制样式
	             * @name module:zrender/shape/Circle#style
	             * @type {module:zrender/shape/Circle~ICircleStyle}
	             */
	            /**
	             * 圆形高亮绘制样式
	             * @name module:zrender/shape/Circle#highlightStyle
	             * @type {module:zrender/shape/Circle~ICircleStyle}
	             */
	        };
	
	        Circle.prototype = {
	            type: 'circle',
	            /**
	             * 创建圆形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Circle~ICircleStyle} style
	             */
	            buildPath : function (ctx, style) {
	                // Better stroking in ShapeBundle
	                ctx.moveTo(style.x + style.r, style.y);
	                ctx.arc(style.x, style.y, style.r, 0, Math.PI * 2, true);
	                return;
	            },
	
	            /**
	             * 计算返回圆形的包围盒矩形
	             * @param {module:zrender/shape/Circle~ICircleStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - style.r - lineWidth / 2),
	                    y : Math.round(style.y - style.r - lineWidth / 2),
	                    width : style.r * 2 + lineWidth,
	                    height : style.r * 2 + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Circle, Base);
	        return Circle;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 高精度数学运算
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    // 除法函数，用来得到精确的除法结果 
	    // 说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。 
	    // 调用：accDiv(arg1,arg2) 
	    // 返回值：arg1除以arg2的精确结果
	    function accDiv(arg1,arg2){
	        var s1 = arg1.toString();
	        var s2 = arg2.toString(); 
	        var m = 0;
	        try {
	            m = s2.split('.')[1].length;
	        }
	        catch(e) {}
	        try {
	            m -= s1.split('.')[1].length;
	        }
	        catch(e) {}
	        
	        return (s1.replace('.', '') - 0) / (s2.replace('.', '') - 0) * Math.pow(10, m);
	    }
	
	    // 乘法函数，用来得到精确的乘法结果
	    // 说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。 
	    // 调用：accMul(arg1,arg2) 
	    // 返回值：arg1乘以arg2的精确结果
	    function accMul(arg1, arg2) {
	        var s1 = arg1.toString();
	        var s2 = arg2.toString();
	        var m = 0;
	        try {
	            m += s1.split('.')[1].length;
	        }
	        catch(e) {}
	        try {
	            m += s2.split('.')[1].length;
	        }
	        catch(e) {}
	        
	        return (s1.replace('.', '') - 0) * (s2.replace('.', '') - 0) / Math.pow(10, m);
	    }
	
	    // 加法函数，用来得到精确的加法结果 
	    // 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。 
	    // 调用：accAdd(arg1,arg2) 
	    // 返回值：arg1加上arg2的精确结果 
	    function accAdd(arg1, arg2) {
	        var r1 = 0;
	        var r2 = 0;
	        try {
	            r1 = arg1.toString().split('.')[1].length;
	        }
	        catch(e) {}
	        try {
	            r2 = arg2.toString().split('.')[1].length;
	        }
	        catch(e) {}
	        
	        var m = Math.pow(10, Math.max(r1, r2));
	        return (Math.round(arg1 * m) + Math.round(arg2 * m)) / m; 
	    }
	
	    //减法函数，用来得到精确的减法结果 
	    //说明：javascript的减法结果会有误差，在两个浮点数减法的时候会比较明显。这个函数返回较为精确的减法结果。 
	    //调用：accSub(arg1,arg2) 
	    //返回值：arg1减法arg2的精确结果 
	    function accSub(arg1,arg2) {
	        return accAdd(arg1, -arg2);
	    }
	
	    return {
	        accDiv : accDiv,
	        accMul : accMul,
	        accAdd : accAdd,
	        accSub : accSub
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件基类
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ecConfig = __webpack_require__(167);
	    var ecData = __webpack_require__(215);
	    var ecQuery = __webpack_require__(221);
	    var number = __webpack_require__(222);
	    var zrUtil = __webpack_require__(168);
	    
	    function Base(ecTheme, messageCenter, zr, option, myChart){
	        this.ecTheme = ecTheme;
	        this.messageCenter = messageCenter;
	        this.zr =zr;
	        this.option = option;
	        this.series = option.series;
	        this.myChart = myChart;
	        this.component = myChart.component;
	
	        this.shapeList = [];
	        this.effectList = [];
	        
	        var self = this;
	        
	        self._onlegendhoverlink = function(param) {
	            if (self.legendHoverLink) {
	                var targetName = param.target;
	                var name;
	                for (var i = self.shapeList.length - 1; i >= 0; i--) {
	                    name = self.type == ecConfig.CHART_TYPE_PIE
	                           || self.type == ecConfig.CHART_TYPE_FUNNEL
	                           ? ecData.get(self.shapeList[i], 'name')
	                           : (ecData.get(self.shapeList[i], 'series') || {}).name;
	                    if (name == targetName 
	                        && !self.shapeList[i].invisible 
	                        && !self.shapeList[i].__animating
	                    ) {
	                        self.zr.addHoverShape(self.shapeList[i]);
	                    }
	                }
	            }
	        };
	        messageCenter && messageCenter.bind(
	            ecConfig.EVENT.LEGEND_HOVERLINK, this._onlegendhoverlink
	        );
	    }
	
	    /**
	     * 基类方法
	     */
	    Base.prototype = {
	        canvasSupported: __webpack_require__(172).canvasSupported,
	        _getZ : function(zWhat) {
	            if (this[zWhat] != null) {
	                return this[zWhat];
	            }
	            var opt = this.ecTheme[this.type];
	            if (opt && opt[zWhat] != null) {
	                return opt[zWhat];
	            }
	            opt = ecConfig[this.type];
	            if (opt && opt[zWhat] != null) {
	                return opt[zWhat];
	            }
	            return 0;
	        },
	
	        /**
	         * 获取zlevel基数配置
	         */
	        getZlevelBase: function () {
	            return this._getZ('zlevel');
	        },
	        
	        /**
	         * 获取z基数配置
	         */
	        getZBase: function() {
	            return this._getZ('z');
	        },
	
	        /**
	         * 参数修正&默认值赋值
	         * @param {Object} opt 参数
	         *
	         * @return {Object} 修正后的参数
	         */
	        reformOption: function (opt) {
	            // 默认配置项动态多级合并，依赖加载的组件选项未被merge到ecTheme里，需要从config里取
	            opt = zrUtil.merge(
	                       zrUtil.merge(
	                           opt || {},
	                           zrUtil.clone(this.ecTheme[this.type] || {})
	                       ),
	                       zrUtil.clone(ecConfig[this.type] || {})
	                   );
	            this.z = opt.z;
	            this.zlevel = opt.zlevel;
	            return opt;
	        },
	        
	        /**
	         * css类属性数组补全，如padding，margin等~
	         */
	        reformCssArray: function (p) {
	            if (p instanceof Array) {
	                switch (p.length + '') {
	                    case '4':
	                        return p;
	                    case '3':
	                        return [p[0], p[1], p[2], p[1]];
	                    case '2':
	                        return [p[0], p[1], p[0], p[1]];
	                    case '1':
	                        return [p[0], p[0], p[0], p[0]];
	                    case '0':
	                        return [0, 0, 0, 0];
	                }
	            }
	            else {
	                return [p, p, p, p];
	            }
	        },
	        
	        getShapeById: function(id) {
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].id === id) {
	                    return this.shapeList[i];
	                }
	            }
	            return null;
	        },
	        
	        /**
	         * 获取自定义和默认配置合并后的字体设置
	         */
	        getFont: function (textStyle) {
	            var finalTextStyle = this.getTextStyle(
	                zrUtil.clone(textStyle)
	            );
	            return finalTextStyle.fontStyle + ' '
	                   + finalTextStyle.fontWeight + ' '
	                   + finalTextStyle.fontSize + 'px '
	                   + finalTextStyle.fontFamily;
	        },
	
	        /**
	         * 获取统一主题字体样式
	         */
	        getTextStyle: function(targetStyle) {
	            return zrUtil.merge(
	                       zrUtil.merge(
	                           targetStyle || {},
	                           this.ecTheme.textStyle
	                       ),
	                       ecConfig.textStyle
	                   );
	        },
	        
	        getItemStyleColor: function (itemColor, seriesIndex, dataIndex, data) {
	            return typeof itemColor === 'function'
	                   ? itemColor.call(
	                        this.myChart,
	                        {
	                            seriesIndex: seriesIndex,
	                            series: this.series[seriesIndex],
	                            dataIndex: dataIndex,
	                            data: data
	                        }
	                   )
	                   : itemColor;
	            
	        }, 
	
	        /**
	         * @parmas {object | number} data 目标data
	         * @params {string= | number=} defaultData 无数据时默认返回
	         */
	        getDataFromOption: function (data, defaultData) {
	            return data != null ? (data.value != null ? data.value : data) : defaultData;
	        },
	        
	        // 亚像素优化
	        subPixelOptimize: function (position, lineWidth) {
	            if (lineWidth % 2 === 1) {
	                //position += position === Math.ceil(position) ? 0.5 : 0;
	                position = Math.floor(position) + 0.5;
	            }
	            else {
	                position = Math.round(position);
	            }
	            return position;
	        },
	        
	        // 默认resize
	        resize: function () {
	            this.refresh && this.refresh();
	            this.clearEffectShape && this.clearEffectShape(true);
	            var self = this;
	            setTimeout(function(){
	                self.animationEffect && self.animationEffect();
	            },200);
	        },
	
	        /**
	         * 清除图形数据，实例仍可用
	         */
	        clear :function () {
	            this.clearEffectShape && this.clearEffectShape();
	            this.zr && this.zr.delShape(this.shapeList);
	            this.shapeList = [];
	        },
	
	        /**
	         * 释放后实例不可用
	         */
	        dispose: function () {
	            this.onbeforDispose && this.onbeforDispose();
	            this.clear();
	            this.shapeList = null;
	            this.effectList = null;
	            this.messageCenter && this.messageCenter.unbind(
	                ecConfig.EVENT.LEGEND_HOVERLINK, this._onlegendhoverlink
	            );
	            this.onafterDispose && this.onafterDispose();
	        },
	        
	        query: ecQuery.query,
	        deepQuery: ecQuery.deepQuery,
	        deepMerge: ecQuery.deepMerge,
	        
	        parsePercent: number.parsePercent,
	        parseCenter: number.parseCenter,
	        parseRadius: number.parseRadius,
	        numAddCommas: number.addCommas,
	
	        getPrecision: number.getPrecision
	    };
	    
	    return Base;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts层级查找方法
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	    var zrUtil = __webpack_require__(168);
	    
	    /**
	     * 获取嵌套选项的基础方法
	     * 返回optionTarget中位于optionLocation上的值，如果没有定义，则返回undefined
	     */
	    function query(optionTarget, optionLocation) {
	        if (typeof optionTarget == 'undefined') {
	            return;
	        }
	
	        if (!optionLocation) {
	            return optionTarget;
	        }
	
	        optionLocation = optionLocation.split('.');
	        var length = optionLocation.length;
	        var curIdx = 0;
	        while (curIdx < length) {
	            optionTarget = optionTarget[optionLocation[curIdx]];
	            if (typeof optionTarget == 'undefined') {
	                return;
	            }
	            curIdx++;
	        }
	
	        return optionTarget;
	    }
	        
	    /**
	     * 获取多级控制嵌套属性的基础方法
	     * 返回ctrList中优先级最高（最靠前）的非undefined属性，ctrList中均无定义则返回undefined
	     */
	    function deepQuery(ctrList, optionLocation) {
	        var finalOption;
	        for (var i = 0, l = ctrList.length; i < l; i++) {
	            finalOption = query(ctrList[i], optionLocation);
	            if (typeof finalOption != 'undefined') {
	                return finalOption;
	            }
	        }
	    }
	    
	    /**
	     * 获取多级控制嵌套属性的基础方法
	     * 根据ctrList中优先级合并产出目标属性
	     */
	    function deepMerge(ctrList, optionLocation) {
	        var finalOption;
	        var len = ctrList.length;
	        while (len--) {
	            var tempOption = query(ctrList[len], optionLocation);
	            if (typeof tempOption != 'undefined') {
	                if (typeof finalOption == 'undefined') {
	                    finalOption = zrUtil.clone(tempOption);
	                }
	                else {
	                    zrUtil.merge(
	                        finalOption, tempOption, true
	                    );
	                }
	            }
	        }
	        
	        return finalOption;
	    }
	    
	    return {
	        query : query,
	        deepQuery : deepQuery,
	        deepMerge : deepMerge
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts数字运算相关
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }
	    
	    /**
	     * 百分比计算
	     */
	    function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (_trim(value).match(/%$/)) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	
	            return parseFloat(value);
	        }
	
	        return value;
	    }
	    
	    /**
	     * 获取中心坐标
	     */ 
	    function parseCenter(zr, center) {
	        return [
	            parsePercent(center[0], zr.getWidth()),
	            parsePercent(center[1], zr.getHeight())
	        ];
	    }
	
	    /**
	     * 获取自适应半径
	     */ 
	    function parseRadius(zr, radius) {
	        // 传数组实现环形图，[内半径，外半径]，传单个则默认为外半径为
	        if (!(radius instanceof Array)) {
	            radius = [0, radius];
	        }
	        var zrSize = Math.min(zr.getWidth(), zr.getHeight()) / 2;
	        return [
	            parsePercent(radius[0], zrSize),
	            parsePercent(radius[1], zrSize)
	        ];
	    }
	    
	    /**
	     * 每三位默认加,格式化
	     */
	    function addCommas(x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,') 
	               + (x.length > 1 ? ('.' + x[1]) : '');
	    }
	
	    /**
	     * 获取数字的小数位数
	     * @param {number} val
	     */
	    
	    // It is much faster than methods converting number to string as follows 
	    //      var tmp = val.toString();
	    //      return tmp.length - 1 - tmp.indexOf('.');
	    // especially when precision is low
	    function getPrecision(val) {
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    }
	    
	    return {
	        parsePercent: parsePercent,
	        parseCenter: parseCenter,
	        parseRadius: parseRadius,
	        addCommas: addCommas,
	        getPrecision: getPrecision
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Edge bundling laytout
	 *
	 * Use MINGLE algorithm
	 * Multilevel agglomerative edge bundling for visualizing large graphs
	 *
	 * @module echarts/layout/EdgeBundling
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    var KDTree = __webpack_require__(224);
	    var vec2 = __webpack_require__(178);
	    var v2Create = vec2.create;
	    var v2DistSquare = vec2.distSquare;
	    var v2Dist = vec2.dist;
	    var v2Copy = vec2.copy;
	    var v2Clone = vec2.clone;
	
	    function squaredDistance(a, b) {
	        a = a.array;
	        b = b.array;
	
	        var x = b[0] - a[0];
	        var y = b[1] - a[1];
	        var z = b[2] - a[2];
	        var w = b[3] - a[3];
	
	        return x * x + y * y + z * z + w * w;
	    }
	
	    function CoarsenedEdge(group) {
	        this.points = [
	            group.mp0, group.mp1
	        ];
	
	        this.group = group;
	    }
	
	    function Edge(edge) {
	        var points = edge.points;
	        // Sort on y
	        if (
	            points[0][1] < points[1][1]
	            // If coarsened edge is flipped, the final composition of meet point
	            // will be unordered
	            || edge instanceof CoarsenedEdge
	        ) {
	            this.array = [points[0][0], points[0][1], points[1][0], points[1][1]];
	            this._startPoint = points[0];
	            this._endPoint = points[1];
	        }
	        else {
	            this.array = [points[1][0], points[1][1], points[0][0], points[0][1]];
	            this._startPoint = points[1];
	            this._endPoint = points[0];
	        }
	
	        this.ink = v2Dist(points[0], points[1]);
	
	        this.edge = edge;
	
	        this.group = null;
	    }
	
	    Edge.prototype.getStartPoint = function () {
	        return this._startPoint;
	    };
	
	    Edge.prototype.getEndPoint = function () {
	        return this._endPoint;
	    };
	
	    function BundledEdgeGroup() {
	
	        this.edgeList = [];
	
	        this.mp0 = v2Create();
	        this.mp1 = v2Create();
	
	        this.ink = 0;
	    }
	
	    BundledEdgeGroup.prototype.addEdge = function (edge) {
	        edge.group = this;
	        this.edgeList.push(edge);
	    };
	
	    BundledEdgeGroup.prototype.removeEdge = function (edge) {
	        edge.group = null;
	        this.edgeList.splice(this.edgeList.indexOf(edge), 1);
	    };
	
	    /**
	     * @constructor
	     * @alias module:echarts/layout/EdgeBundling
	     */
	    function EdgeBundling() {
	        this.maxNearestEdge = 6;
	        this.maxTurningAngle = Math.PI / 4;
	        this.maxIteration = 20;
	    }
	
	    EdgeBundling.prototype = {
	        
	        constructor: EdgeBundling,
	
	        run: function (rawEdges) {
	            var res = this._iterate(rawEdges);
	            var nIterate = 0;
	            while (nIterate++ < this.maxIteration) {
	                var coarsenedEdges = [];
	                for (var i = 0; i < res.groups.length; i++) {
	                    coarsenedEdges.push(new CoarsenedEdge(res.groups[i]));
	                }
	                var newRes = this._iterate(coarsenedEdges);
	                if (newRes.savedInk <= 0) {
	                    break;
	                } else {
	                    res = newRes;
	                }
	            }
	
	            // Get new edges
	            var newEdges = [];
	
	            function pointApproxEqual(p0, p1) {
	                // Use Float32Array may affect the precision
	                return v2DistSquare(p0, p1) < 1e-10;
	            }
	            // Clone all points to make sure all points in edge will not reference to the same array
	            // And clean the duplicate points
	            function cleanEdgePoints(edgePoints, rawEdgePoints) {
	                var res = [];
	                var off = 0;
	                for (var i = 0; i < edgePoints.length; i++) {
	                    if (! (off > 0 && pointApproxEqual(edgePoints[i], res[off - 1]))) {
	                        res[off++] = v2Clone(edgePoints[i]);
	                    }
	                }
	                // Edge has been reversed
	                if (rawEdgePoints[0] && !pointApproxEqual(res[0], rawEdgePoints[0])) {
	                    res = res.reverse();
	                }
	                return res;
	            }
	
	            var buildNewEdges = function (groups, fromEdgePoints) {
	                var newEdgePoints;
	                for (var i = 0; i < groups.length; i++) {
	                    var group = groups[i];
	                    if (
	                        group.edgeList[0]
	                        && (group.edgeList[0].edge instanceof CoarsenedEdge)
	                    ) {
	                        var newGroups = [];
	                        for (var j = 0; j < group.edgeList.length; j++) {
	                            newGroups.push(group.edgeList[j].edge.group);
	                        }
	                        if (! fromEdgePoints) {
	                            newEdgePoints = [];
	                        } else {
	                            newEdgePoints = fromEdgePoints.slice();
	                        }
	                        newEdgePoints.unshift(group.mp0);
	                        newEdgePoints.push(group.mp1);
	                        buildNewEdges(newGroups, newEdgePoints);
	                    } else {
	                        // console.log(group.edgeList.length);
	                        for (var j = 0; j < group.edgeList.length; j++) {
	                            var edge = group.edgeList[j];
	                            if (! fromEdgePoints) {
	                                newEdgePoints = [];
	                            } else {
	                                newEdgePoints = fromEdgePoints.slice();
	                            }
	                            newEdgePoints.unshift(group.mp0);
	                            newEdgePoints.push(group.mp1);
	                            newEdgePoints.unshift(edge.getStartPoint());
	                            newEdgePoints.push(edge.getEndPoint());
	                            newEdges.push({
	                                points: cleanEdgePoints(newEdgePoints, edge.edge.points),
	                                rawEdge: edge.edge
	                            });
	                        }
	                    }
	                }
	            };
	
	            buildNewEdges(res.groups);
	
	            return newEdges;
	        },
	
	        _iterate: function (rawEdges) {
	            var edges = [];
	            var groups = [];
	            var totalSavedInk = 0;
	            for (var i = 0; i < rawEdges.length; i++) {
	                var edge = new Edge(rawEdges[i]);
	                edges.push(edge);
	            }
	
	            var tree = new KDTree(edges, 4);
	
	            var nearests = [];
	
	            var _mp0 = v2Create();
	            var _mp1 = v2Create();
	            var _newGroupInk = 0;
	            var mp0 = v2Create();
	            var mp1 = v2Create();
	            var newGroupInk = 0;
	            for (var i = 0; i < edges.length; i++) {
	                var edge = edges[i];
	                if (edge.group) {
	                    // Edge have been groupped
	                    continue;
	                }
	                tree.nearestN(
	                    edge, this.maxNearestEdge,
	                    squaredDistance, nearests
	                );
	                var maxSavedInk = 0;
	                var mostSavingInkEdge = null;
	                var lastCheckedGroup = null;
	                for (var j = 0; j < nearests.length; j++) {
	                    var nearest = nearests[j];
	                    var savedInk = 0;
	                    if (nearest.group) {
	                        if (nearest.group !== lastCheckedGroup) {
	                            lastCheckedGroup = nearest.group;
	                            _newGroupInk = this._calculateGroupEdgeInk(
	                                nearest.group, edge, _mp0, _mp1
	                            );
	                            savedInk = nearest.group.ink + edge.ink - _newGroupInk;
	                        }
	                    }
	                    else {
	                        _newGroupInk = this._calculateEdgeEdgeInk(
	                            edge, nearest, _mp0, _mp1
	                        );
	                        savedInk = nearest.ink + edge.ink - _newGroupInk;
	                    }
	                    if (savedInk > maxSavedInk) {
	                        maxSavedInk = savedInk;
	                        mostSavingInkEdge = nearest;
	                        v2Copy(mp1, _mp1);
	                        v2Copy(mp0, _mp0);
	                        newGroupInk = _newGroupInk;
	                    }
	                }
	                if (mostSavingInkEdge) {
	                    totalSavedInk += maxSavedInk;
	                    var group;
	                    if (! mostSavingInkEdge.group) {
	                        group = new BundledEdgeGroup();
	                        groups.push(group);
	                        group.addEdge(mostSavingInkEdge);
	                    }
	                    group = mostSavingInkEdge.group;
	                    // Use the meet point and group ink calculated before
	                    v2Copy(group.mp0, mp0);
	                    v2Copy(group.mp1, mp1);
	                    group.ink = newGroupInk;
	                    mostSavingInkEdge.group.addEdge(edge);
	                }
	                else {
	                    var group = new BundledEdgeGroup();
	                    groups.push(group);
	                    v2Copy(group.mp0, edge.getStartPoint());
	                    v2Copy(group.mp1, edge.getEndPoint());
	                    group.ink = edge.ink;
	                    group.addEdge(edge);
	                }
	            }
	
	            return {
	                groups: groups,
	                edges: edges,
	                savedInk: totalSavedInk
	            };
	        },
	
	        _calculateEdgeEdgeInk: (function () {
	            var startPointSet = [];
	            var endPointSet = [];
	            return function (e0, e1, mp0, mp1) {
	                startPointSet[0] = e0.getStartPoint();
	                startPointSet[1] = e1.getStartPoint();
	                endPointSet[0] = e0.getEndPoint();
	                endPointSet[1] = e1.getEndPoint();
	
	                this._calculateMeetPoints(
	                    startPointSet, endPointSet, mp0, mp1
	                );
	                var ink = v2Dist(startPointSet[0], mp0)
	                    + v2Dist(mp0, mp1)
	                    + v2Dist(mp1, endPointSet[0])
	                    + v2Dist(startPointSet[1], mp0)
	                    + v2Dist(mp1, endPointSet[1]);
	
	                return ink;
	            };
	        })(),
	
	        _calculateGroupEdgeInk: function (group, edgeTryAdd, mp0, mp1) {
	            var startPointSet = [];
	            var endPointSet = [];
	            for (var i = 0; i < group.edgeList.length; i++) {
	                var edge = group.edgeList[i];
	                startPointSet.push(edge.getStartPoint());
	                endPointSet.push(edge.getEndPoint());
	            }
	            startPointSet.push(edgeTryAdd.getStartPoint());
	            endPointSet.push(edgeTryAdd.getEndPoint());
	
	            this._calculateMeetPoints(
	                startPointSet, endPointSet, mp0, mp1
	            );
	
	            var ink = v2Dist(mp0, mp1);
	            for (var i = 0; i < startPointSet.length; i++) {
	                ink += v2Dist(startPointSet[i], mp0)
	                    + v2Dist(endPointSet[i], mp1);
	            }
	
	            return ink;
	        },
	
	        /**
	         * Calculating the meet points
	         * @method
	         * @param {Array} startPointSet Start points set of bundled edges
	         * @param {Array} endPointSet End points set of bundled edges
	         * @param {Array.<number>} mp0 Output meet point 0
	         * @param {Array.<number>} mp1 Output meet point 1
	         */
	        _calculateMeetPoints: (function () {
	            var cp0 = v2Create();
	            var cp1 = v2Create();
	            return function (startPointSet, endPointSet, mp0, mp1) {
	                vec2.set(cp0, 0, 0);
	                vec2.set(cp1, 0, 0);
	                var len = startPointSet.length;
	                // Calculate the centroid of start points set
	                for (var i = 0; i < len; i++) {
	                    vec2.add(cp0, cp0, startPointSet[i]);
	                }
	                vec2.scale(cp0, cp0, 1 / len);
	
	                // Calculate the centroid of end points set
	                len = endPointSet.length;
	                for (var i = 0; i < len; i++) {
	                    vec2.add(cp1, cp1, endPointSet[i]);
	                }
	                vec2.scale(cp1, cp1, 1 / len);
	
	                this._limitTurningAngle(
	                    startPointSet, cp0, cp1, mp0
	                );
	                this._limitTurningAngle(
	                    endPointSet, cp1, cp0, mp1
	                );
	            };
	        })(),
	
	        _limitTurningAngle: (function () {
	            var v10 = v2Create();
	            var vTmp = v2Create();
	            var project = v2Create();
	            var tmpOut = v2Create();
	            return function (pointSet, p0, p1, out) {
	                // Limit the max turning angle
	                var maxTurningAngleCos = Math.cos(this.maxTurningAngle);
	                var maxTurningAngleTan = Math.tan(this.maxTurningAngle);
	
	                vec2.sub(v10, p0, p1);
	                vec2.normalize(v10, v10);
	
	                // Simply copy the centroid point if no need to turn the angle
	                vec2.copy(out, p0);
	
	                var maxMovement = 0;
	                for (var i = 0; i < pointSet.length; i++) {
	                    var p = pointSet[i];
	                    vec2.sub(vTmp, p, p0);
	                    var len = vec2.len(vTmp);
	                    vec2.scale(vTmp, vTmp, 1 / len);
	                    var turningAngleCos = vec2.dot(vTmp, v10);
	                    // Turning angle is to large
	                    if (turningAngleCos < maxTurningAngleCos) {
	                        // Calculat p's project point on vector p1-p0 
	                        // and distance to the vector
	                        vec2.scaleAndAdd(
	                            project, p0, v10, len * turningAngleCos
	                        );
	                        var distance = v2Dist(project, p);
	
	                        // Use the max turning angle to calculate the new meet point
	                        var d = distance / maxTurningAngleTan;
	                        vec2.scaleAndAdd(tmpOut, project, v10, -d);
	
	                        var movement = v2DistSquare(tmpOut, p0);
	                        if (movement > maxMovement) {
	                            maxMovement = movement;
	                            vec2.copy(out, tmpOut);
	                        }
	                    }
	                }
	            };
	        })()
	    };
	
	    return EdgeBundling;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * K-Dimension Tree
	 *
	 * @module echarts/data/KDTree
	 * @author Yi Shen(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    var quickSelect = __webpack_require__(225);
	
	    function Node(axis, data) {
	        this.left = null;
	        this.right = null;
	        this.axis = axis;
	
	        this.data = data;
	    }
	
	    /**
	     * @constructor
	     * @alias module:echarts/data/KDTree
	     * @param {Array} points List of points.
	     * each point needs an array property to repesent the actual data
	     * @param {Number} [dimension]
	     *        Point dimension.
	     *        Default will use the first point's length as dimensiont
	     */
	    var KDTree = function (points, dimension) {
	        if (!points.length) {
	            return;
	        }
	
	        if (!dimension) {
	            dimension = points[0].array.length;
	        }
	        this.dimension = dimension;
	        this.root = this._buildTree(points, 0, points.length - 1, 0);
	
	        // Use one stack to avoid allocation 
	        // each time searching the nearest point
	        this._stack = [];
	        // Again avoid allocating a new array
	        // each time searching nearest N points
	        this._nearstNList = [];
	    };
	
	    /**
	     * Resursively build the tree
	     */
	    KDTree.prototype._buildTree = function (points, left, right, axis) {
	        if (right < left) {
	            return null;
	        }
	
	        var medianIndex = Math.floor((left + right) / 2);
	        medianIndex = quickSelect(
	            points, left, right, medianIndex,
	            function (a, b) {
	                return a.array[axis] - b.array[axis];
	            }
	        );
	        var median = points[medianIndex];
	
	        var node = new Node(axis, median);
	
	        axis = (axis + 1) % this.dimension;
	        if (right > left) {
	            node.left = this._buildTree(points, left, medianIndex - 1, axis);
	            node.right = this._buildTree(points, medianIndex + 1, right, axis);   
	        }
	
	        return node;
	    };
	
	    /**
	     * Find nearest point
	     * @param  {Array} target Target point
	     * @param  {Function} squaredDistance Squared distance function
	     * @return {Array} Nearest point
	     */
	    KDTree.prototype.nearest = function (target, squaredDistance) {
	        var curr = this.root;
	        var stack = this._stack;
	        var idx = 0;
	        var minDist = Infinity;
	        var nearestNode = null;
	        if (curr.data !== target) {
	            minDist = squaredDistance(curr.data, target);
	            nearestNode = curr;
	        }
	
	        if (target.array[curr.axis] < curr.data.array[curr.axis]) {
	            // Left first
	            curr.right && (stack[idx++] = curr.right);
	            curr.left && (stack[idx++] = curr.left);
	        }
	        else {
	            // Right first
	            curr.left && (stack[idx++] = curr.left);
	            curr.right && (stack[idx++] = curr.right);
	        }
	
	        while (idx--) {
	            curr = stack[idx];
	            var currDist = target.array[curr.axis] - curr.data.array[curr.axis];
	            var isLeft = currDist < 0;
	            var needsCheckOtherSide = false;
	            currDist = currDist * currDist;
	            // Intersecting right hyperplane with minDist hypersphere
	            if (currDist < minDist) {
	                currDist = squaredDistance(curr.data, target);
	                if (currDist < minDist && curr.data !== target) {
	                    minDist = currDist;
	                    nearestNode = curr;
	                }
	                needsCheckOtherSide = true;
	            }
	            if (isLeft) {
	                if (needsCheckOtherSide) {
	                    curr.right && (stack[idx++] = curr.right);
	                }
	                // Search in the left area
	                curr.left && (stack[idx++] = curr.left);
	            }
	            else {
	                if (needsCheckOtherSide) {
	                    curr.left && (stack[idx++] = curr.left);
	                }
	                // Search the right area
	                curr.right && (stack[idx++] = curr.right);
	            }
	        }
	
	        return nearestNode.data;
	    };
	
	    KDTree.prototype._addNearest = function (found, dist, node) {
	        var nearestNList = this._nearstNList;
	
	        // Insert to the right position
	        // Sort from small to large
	        for (var i = found - 1; i > 0; i--) {
	            if (dist >= nearestNList[i - 1].dist) {                
	                break;
	            }
	            else {
	                nearestNList[i].dist = nearestNList[i - 1].dist;
	                nearestNList[i].node = nearestNList[i - 1].node;
	            }
	        }
	
	        nearestNList[i].dist = dist;
	        nearestNList[i].node = node;
	    };
	
	    /**
	     * Find nearest N points
	     * @param  {Array} target Target point
	     * @param  {number} N
	     * @param  {Function} squaredDistance Squared distance function
	     * @param  {Array} [output] Output nearest N points
	     */
	    KDTree.prototype.nearestN = function (target, N, squaredDistance, output) {
	        if (N <= 0) {
	            output.length = 0;
	            return output;
	        }
	
	        var curr = this.root;
	        var stack = this._stack;
	        var idx = 0;
	
	        var nearestNList = this._nearstNList;
	        for (var i = 0; i < N; i++) {
	            // Allocate
	            if (!nearestNList[i]) {
	                nearestNList[i] = {};
	            }
	            nearestNList[i].dist = 0;
	            nearestNList[i].node = null;
	        }
	        var currDist = squaredDistance(curr.data, target);
	
	        var found = 0;
	        if (curr.data !== target) {
	            found++;
	            this._addNearest(found, currDist, curr);
	        }
	
	        if (target.array[curr.axis] < curr.data.array[curr.axis]) {
	            // Left first
	            curr.right && (stack[idx++] = curr.right);
	            curr.left && (stack[idx++] = curr.left);
	        }
	        else {
	            // Right first
	            curr.left && (stack[idx++] = curr.left);
	            curr.right && (stack[idx++] = curr.right);
	        }
	
	        while (idx--) {
	            curr = stack[idx];
	            var currDist = target.array[curr.axis] - curr.data.array[curr.axis];
	            var isLeft = currDist < 0;
	            var needsCheckOtherSide = false;
	            currDist = currDist * currDist;
	            // Intersecting right hyperplane with minDist hypersphere
	            if (found < N || currDist < nearestNList[found - 1].dist) {
	                currDist = squaredDistance(curr.data, target);
	                if (
	                    (found < N || currDist < nearestNList[found - 1].dist)
	                    && curr.data !== target
	                ) {
	                    if (found < N) {
	                        found++;
	                    }
	                    this._addNearest(found, currDist, curr);
	                }
	                needsCheckOtherSide = true;
	            }
	            if (isLeft) {
	                if (needsCheckOtherSide) {
	                    curr.right && (stack[idx++] = curr.right);
	                }
	                // Search in the left area
	                curr.left && (stack[idx++] = curr.left);
	            }
	            else {
	                if (needsCheckOtherSide) {
	                    curr.left && (stack[idx++] = curr.left);
	                }
	                // Search the right area
	                curr.right && (stack[idx++] = curr.right);
	            }
	        }
	
	        // Copy to output
	        for (var i = 0; i < found; i++) {
	            output[i] = nearestNList[i].node.data;
	        }
	        output.length = found;
	
	        return output;
	    };
	
	    return KDTree;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Quick select n-th element in an array.
	 *
	 * Note: it will change the elements placement in array.
	 *
	 * @module echarts/data/quickSelect
	 * @author Yi Shen(https://github.com/pissang)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	    function defaultCompareFunc(a, b) {
	        return a - b;
	    }
	
	    function swapElement(list, idx0, idx1) {
	        var tmp = list[idx0];
	        list[idx0] = list[idx1];
	        list[idx1] = tmp;
	    }
	
	    function select(list, left, right, nth, compareFunc) {
	        var pivotIdx = left;
	        while (right > left) {
	            var pivotIdx = Math.round((right + left) / 2);
	            var pivotValue = list[pivotIdx];
	            // Swap pivot to the end
	            swapElement(list, pivotIdx, right);
	            pivotIdx = left;
	            for (var i = left; i <= right - 1; i++) {
	                if (compareFunc(pivotValue, list[i]) >= 0) {
	                    swapElement(list, i, pivotIdx);
	                    pivotIdx++;
	                }
	            }
	            swapElement(list, right, pivotIdx);
	
	            if (pivotIdx === nth) {
	                return pivotIdx;
	            } else if (pivotIdx < nth) {
	                left = pivotIdx + 1;
	            } else {
	                right = pivotIdx - 1;
	            }
	        }
	        // Left == right
	        return left;
	    }
	
	    /**
	     * @alias module:echarts/data/quickSelect
	     * @param {Array} list
	     * @param {number} [left]
	     * @param {number} [right]
	     * @param {number} nth
	     * @param {Function} [compareFunc]
	     * @example
	     *     var quickSelect = require('echarts/data/quickSelect');
	     *     var list = [5, 2, 1, 4, 3]
	     *     quickSelect(list, 3);
	     *     quickSelect(list, 0, 3, 1, function (a, b) {return a - b});
	     *
	     * @return {number}
	     */
	    function quickSelect(list, left, right, nth, compareFunc) {
	        if (arguments.length <= 3) {
	            nth = left;
	            if (arguments.length == 2) {
	                compareFunc = defaultCompareFunc;
	            } else {
	                compareFunc = right;
	            }
	            left = 0;
	            right = list.length - 1;
	        }
	        return select(list, left, right, nth, compareFunc);
	    }
	    
	    return quickSelect;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echart图表库
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/*require*/) {     //chart
	    var self = {};
	
	    var _chartLibrary = {};         //echart图表库
	
	    /**
	     * 定义图形实现
	     * @param {Object} name
	     * @param {Object} clazz 图形实现
	     */
	    self.define = function (name, clazz) {
	        _chartLibrary[name] = clazz;
	        return self;
	    };
	
	    /**
	     * 获取图形实现
	     * @param {Object} name
	     */
	    self.get = function (name) {
	        return _chartLibrary[name];
	    };
	
	    return self;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：工具箱
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var LineShape = __webpack_require__(205);
	    var ImageShape = __webpack_require__(190);
	    var RectangleShape = __webpack_require__(188);
	    var IconShape = __webpack_require__(198);
	    
	    var ecConfig = __webpack_require__(167);
	    ecConfig.toolbox = {
	        zlevel: 0,                  // 一级层叠
	        z: 6,                       // 二级层叠
	        show: false,
	        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：
	                                   // 'horizontal' ¦ 'vertical'
	        x: 'right',                // 水平安放位置，默认为全图右对齐，可选为：
	                                   // 'center' ¦ 'left' ¦ 'right'
	                                   // ¦ {number}（x坐标，单位px）
	        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：
	                                   // 'top' ¦ 'bottom' ¦ 'center'
	                                   // ¦ {number}（y坐标，单位px）
	        color: ['#1e90ff','#22bb22','#4b0082','#d2691e'],
	        disableColor: '#ddd',
	        effectiveColor: 'red',
	        backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色
	        borderColor: '#ccc',       // 工具箱边框颜色
	        borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 工具箱内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，
	                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔
	        itemSize: 16,              // 工具箱图形宽度
	        showTitle: true,
	        // textStyle: {},
	        feature: {
	            mark: {
	                show: false,
	                title: {
	                    mark: '辅助线开关',
	                    markUndo: '删除辅助线',
	                    markClear: '清空辅助线'
	                },
	                lineStyle: {
	                    width: 1,
	                    color: '#1e90ff',
	                    type: 'dashed'
	                }
	            },
	            dataZoom: {
	                show: false,
	                title: {
	                    dataZoom: '区域缩放',
	                    dataZoomReset: '区域缩放后退'
	                }
	            },
	            dataView: {
	                show: false,
	                title: '数据视图',
	                readOnly: false,
	                lang: ['数据视图', '关闭', '刷新']
	            },
	            magicType: {
	                show: false,
	                title: {
	                    line: '折线图切换',
	                    bar: '柱形图切换',
	                    stack: '堆积',
	                    tiled: '平铺',
	                    force: '力导向布局图切换',
	                    chord: '和弦图切换',
	                    pie: '饼图切换',
	                    funnel: '漏斗图切换'
	                },
	                /*
	                option: {
	                    line: {},
	                    bar: {},
	                    stack: {},
	                    tiled: {},
	                    force: {},
	                    chord: {},
	                    pie: {},
	                    funnel: {}
	                },
	                */
	                type: [] // 'line', 'bar', 'stack', 'tiled', 'force', 'chord', 'pie', 'funnel'
	            },
	            restore: {
	                show: false,
	                title: '还原'
	            },
	            saveAsImage: {
	                show: false,
	                title: '保存为图片',
	                type: 'png',
	                lang: ['点击保存'] 
	            }
	        }
	    };
	
	    var zrUtil = __webpack_require__(168);
	    var zrConfig = __webpack_require__(175);
	    var zrEvent = __webpack_require__(170);
	    
	    var _MAGICTYPE_STACK = 'stack';
	    var _MAGICTYPE_TILED = 'tiled';
	        
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {HtmlElement} dom 目标对象
	     * @param {ECharts} myChart 当前图表实例
	     */
	    function Toolbox(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this.dom = myChart.dom;
	        
	        this._magicType = {};
	        this._magicMap = {};
	        this._isSilence = false;
	        
	        this._iconList;
	        this._iconShapeMap = {};
	        //this._itemGroupLocation;
	        this._featureTitle = {};             // 文字
	        this._featureIcon = {};              // 图标
	        this._featureColor = {};             // 颜色
	        this._featureOption = {};
	        this._enableColor = 'red';
	        this._disableColor = '#ccc';
	        // this._markStart;
	        // this._marking;
	        // this._markShape;
	        // this._zoomStart;
	        // this._zooming;
	        // this._zoomShape;
	        // this._zoomQueue;
	        // this._dataView;
	        this._markShapeList = [];
	        var self = this;
	        self._onMark = function (param) {
	            self.__onMark(param);
	        };
	        self._onMarkUndo = function (param) {
	            self.__onMarkUndo(param);
	        };
	        self._onMarkClear = function (param) {
	            self.__onMarkClear(param);
	        };
	        self._onDataZoom = function (param) {
	            self.__onDataZoom(param);
	        };
	        self._onDataZoomReset = function (param) {
	            self.__onDataZoomReset(param);
	        };
	        self._onDataView = function (param) {
	            self.__onDataView(param);
	        };
	        self._onRestore = function (param) {
	            self.__onRestore(param);
	        };
	        self._onSaveAsImage = function (param) {
	            self.__onSaveAsImage(param);
	        };
	        self._onMagicType = function (param) {
	            self.__onMagicType(param);
	        };
	        self._onCustomHandler = function (param) {
	            self.__onCustomHandler(param);
	        };
	        self._onmousemove = function (param) {
	            return self.__onmousemove(param);
	        };
	
	        self._onmousedown = function (param) {
	            return self.__onmousedown(param);
	        };
	        
	        self._onmouseup = function (param) {
	            return self.__onmouseup(param);
	        };
	        
	        self._onclick = function (param) {
	            return self.__onclick(param);
	        };
	    }
	
	    Toolbox.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TOOLBOX,
	        _buildShape: function () {
	            this._iconList = [];
	            var toolboxOption = this.option.toolbox;
	            this._enableColor = toolboxOption.effectiveColor;
	            this._disableColor = toolboxOption.disableColor;
	            var feature = toolboxOption.feature;
	            var iconName = [];
	            for (var key in feature){
	                if (feature[key].show) {
	                    switch (key) {
	                        case 'mark' :
	                            iconName.push({ key: key, name: 'mark' });
	                            iconName.push({ key: key, name: 'markUndo' });
	                            iconName.push({ key: key, name: 'markClear' });
	                            break;
	                        case 'magicType' :
	                            for (var i = 0, l = feature[key].type.length; i < l; i++) {
	                                feature[key].title[feature[key].type[i] + 'Chart']
	                                    = feature[key].title[feature[key].type[i]];
	                                if (feature[key].option) {
	                                    feature[key].option[feature[key].type[i] + 'Chart']
	                                        = feature[key].option[feature[key].type[i]];
	                                }
	                                iconName.push({ key: key, name: feature[key].type[i] + 'Chart' });
	                            }
	                            break;
	                        case 'dataZoom' :
	                            iconName.push({ key: key, name: 'dataZoom' });
	                            iconName.push({ key: key, name: 'dataZoomReset' });
	                            break;
	                        case 'saveAsImage' :
	                            if (this.canvasSupported) {
	                                iconName.push({ key: key, name: 'saveAsImage' });
	                            }
	                            break;
	                        default :
	                            iconName.push({ key: key, name: key });
	                            break;
	                    }
	                }
	            }
	            if (iconName.length > 0) {
	                var name;
	                var key;
	                for (var i = 0, l = iconName.length; i < l; i++) {
	                    name = iconName[i].name;
	                    key = iconName[i].key;
	                    this._iconList.push(name);
	                    this._featureTitle[name] = feature[key].title[name] || feature[key].title;
	                    if (feature[key].icon) {
	                        this._featureIcon[name] = feature[key].icon[name] || feature[key].icon;
	                    }
	                    if (feature[key].color) {
	                        this._featureColor[name] = feature[key].color[name] || feature[key].color;
	                    }
	                    if (feature[key].option) {
	                        this._featureOption[name] = feature[key].option[name] 
	                                                    || feature[key].option;
	                    }
	                }
	                this._itemGroupLocation = this._getItemGroupLocation();
	
	                this._buildBackground();
	                this._buildItem();
	
	                for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                    this.zr.addShape(this.shapeList[i]);
	                }
	                if (this._iconShapeMap['mark']) {
	                    this._iconDisable(this._iconShapeMap['markUndo']);
	                    this._iconDisable(this._iconShapeMap['markClear']);
	                }
	                if (this._iconShapeMap['dataZoomReset'] && this._zoomQueue.length === 0) {
	                    this._iconDisable(this._iconShapeMap['dataZoomReset']);
	                }
	            }
	        },
	
	        /**
	         * 构建所有图例元素
	         */
	        _buildItem: function () {
	            var toolboxOption = this.option.toolbox;
	            var iconLength = this._iconList.length;
	            var lastX = this._itemGroupLocation.x;
	            var lastY = this._itemGroupLocation.y;
	            var itemSize = toolboxOption.itemSize;
	            var itemGap = toolboxOption.itemGap;
	            var itemShape;
	
	            var color = toolboxOption.color instanceof Array
	                        ? toolboxOption.color : [toolboxOption.color];
	            
	            var textFont = this.getFont(toolboxOption.textStyle);
	            var textPosition;
	            var textAlign;
	            var textBaseline;
	            if (toolboxOption.orient === 'horizontal') {
	                textPosition = this._itemGroupLocation.y / this.zr.getHeight() < 0.5
	                               ? 'bottom' : 'top';
	                textAlign = this._itemGroupLocation.x / this.zr.getWidth() < 0.5
	                            ? 'left' : 'right';
	                textBaseline = this._itemGroupLocation.y / this.zr.getHeight() < 0.5
	                               ? 'top' : 'bottom';
	            }
	            else {
	                textPosition = this._itemGroupLocation.x / this.zr.getWidth() < 0.5
	                               ? 'right' : 'left';
	            }
	            
	           this._iconShapeMap = {};
	           var self = this;
	
	            for (var i = 0; i < iconLength; i++) {
	                // 图形
	                itemShape = {
	                    type: 'icon',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    style: {
	                        x: lastX,
	                        y: lastY,
	                        width: itemSize,
	                        height: itemSize,
	                        iconType: this._iconList[i],
	                        lineWidth: 1,
	                        strokeColor: this._featureColor[this._iconList[i]] 
	                                     || color[i % color.length],
	                        brushType: 'stroke'
	                    },
	                    highlightStyle: {
	                        lineWidth: 1,
	                        text: toolboxOption.showTitle 
	                              ? this._featureTitle[this._iconList[i]]
	                              : undefined,
	                        textFont: textFont,
	                        textPosition: textPosition,
	                        strokeColor: this._featureColor[this._iconList[i]] 
	                                     || color[i % color.length]
	                    },
	                    hoverable: true,
	                    clickable: true
	                };
	                
	                if (this._featureIcon[this._iconList[i]]) {
	                    itemShape.style.image = this._featureIcon[this._iconList[i]].replace(
	                        new RegExp('^image:\\/\\/'), ''
	                    );
	                    itemShape.style.opacity = 0.8;
	                    itemShape.highlightStyle.opacity = 1;
	                    itemShape.type = 'image';
	                }
	                
	                if (toolboxOption.orient === 'horizontal') {
	                    // 修正左对齐第一个或右对齐最后一个
	                    if (i === 0 && textAlign === 'left') {
	                        itemShape.highlightStyle.textPosition = 'specific';
	                        itemShape.highlightStyle.textAlign = textAlign;
	                        itemShape.highlightStyle.textBaseline = textBaseline;
	                        itemShape.highlightStyle.textX = lastX;
	                        itemShape.highlightStyle.textY = textBaseline === 'top' 
	                                                     ? lastY + itemSize + 10
	                                                     : lastY - 10;
	                    }
	                    if (i === iconLength - 1 && textAlign === 'right') {
	                        itemShape.highlightStyle.textPosition = 'specific';
	                        itemShape.highlightStyle.textAlign = textAlign;
	                        itemShape.highlightStyle.textBaseline = textBaseline;
	                        itemShape.highlightStyle.textX = lastX + itemSize;
	                        itemShape.highlightStyle.textY = textBaseline === 'top' 
	                                                         ? lastY + itemSize + 10
	                                                         : lastY - 10;
	                    }
	                }
	                
	                switch(this._iconList[i]) {
	                    case 'mark':
	                        itemShape.onclick = self._onMark;
	                        break;
	                    case 'markUndo':
	                        itemShape.onclick = self._onMarkUndo;
	                        break;
	                    case 'markClear':
	                        itemShape.onclick = self._onMarkClear;
	                        break;
	                    case 'dataZoom':
	                        itemShape.onclick = self._onDataZoom;
	                        break;
	                    case 'dataZoomReset':
	                        itemShape.onclick = self._onDataZoomReset;
	                        break;
	                    case 'dataView' :
	                        if (!this._dataView) {
	                            var DataView = __webpack_require__(228);
	                            this._dataView = new DataView(
	                                this.ecTheme, this.messageCenter, this.zr, this.option, this.myChart
	                            );
	                        }
	                        itemShape.onclick = self._onDataView;
	                        break;
	                    case 'restore':
	                        itemShape.onclick = self._onRestore;
	                        break;
	                    case 'saveAsImage':
	                        itemShape.onclick = self._onSaveAsImage;
	                        break;
	                    default:
	                        if (this._iconList[i].match('Chart')) {
	                            itemShape._name = this._iconList[i].replace('Chart', '');
	                            itemShape.onclick = self._onMagicType;
	                        }
	                        else {
	                            itemShape.onclick = self._onCustomHandler;
	                        }
	                        break;
	                }
	
	                if (itemShape.type === 'icon') {
	                    itemShape = new IconShape(itemShape);
	                }
	                else if (itemShape.type === 'image') {
	                    itemShape = new ImageShape(itemShape);
	                }
	                this.shapeList.push(itemShape);
	                this._iconShapeMap[this._iconList[i]] = itemShape;
	
	                if (toolboxOption.orient === 'horizontal') {
	                    lastX += itemSize + itemGap;
	                }
	                else {
	                    lastY += itemSize + itemGap;
	                }
	            }
	        },
	
	        _buildBackground: function () {
	            var toolboxOption = this.option.toolbox;
	            var padding = this.reformCssArray(this.option.toolbox.padding);
	
	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style: {
	                    x: this._itemGroupLocation.x - padding[3],
	                    y: this._itemGroupLocation.y - padding[0],
	                    width: this._itemGroupLocation.width + padding[3] + padding[1],
	                    height: this._itemGroupLocation.height + padding[0] + padding[2],
	                    brushType: toolboxOption.borderWidth === 0 ? 'fill' : 'both',
	                    color: toolboxOption.backgroundColor,
	                    strokeColor: toolboxOption.borderColor,
	                    lineWidth: toolboxOption.borderWidth
	                }
	            }));
	        },
	
	        /**
	         * 根据选项计算图例实体的位置坐标
	         */
	        _getItemGroupLocation: function () {
	            var toolboxOption = this.option.toolbox;
	            var padding = this.reformCssArray(this.option.toolbox.padding);
	            var iconLength = this._iconList.length;
	            var itemGap = toolboxOption.itemGap;
	            var itemSize = toolboxOption.itemSize;
	            var totalWidth = 0;
	            var totalHeight = 0;
	
	            if (toolboxOption.orient === 'horizontal') {
	                // 水平布局，计算总宽度，别忘减去最后一个的itemGap
	                totalWidth = (itemSize + itemGap) * iconLength - itemGap;
	                totalHeight = itemSize;
	            }
	            else {
	                // 垂直布局，计算总高度
	                totalHeight = (itemSize + itemGap) * iconLength - itemGap;
	                totalWidth = itemSize;
	            }
	
	            var x;
	            var zrWidth = this.zr.getWidth();
	            switch (toolboxOption.x) {
	                case 'center' :
	                    x = Math.floor((zrWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = padding[3] + toolboxOption.borderWidth;
	                    break;
	                case 'right' :
	                    x = zrWidth
	                        - totalWidth
	                        - padding[1]
	                        - toolboxOption.borderWidth;
	                    break;
	                default :
	                    x = toolboxOption.x - 0;
	                    x = isNaN(x) ? 0 : x;
	                    break;
	            }
	
	            var y;
	            var zrHeight = this.zr.getHeight();
	            switch (toolboxOption.y) {
	                case 'top' :
	                    y = padding[0] + toolboxOption.borderWidth;
	                    break;
	                case 'bottom' :
	                    y = zrHeight
	                        - totalHeight
	                        - padding[2]
	                        - toolboxOption.borderWidth;
	                    break;
	                case 'center' :
	                    y = Math.floor((zrHeight - totalHeight) / 2);
	                    break;
	                default :
	                    y = toolboxOption.y - 0;
	                    y = isNaN(y) ? 0 : y;
	                    break;
	            }
	
	            return {
	                x: x,
	                y: y,
	                width: totalWidth,
	                height: totalHeight
	            };
	        },
	
	        __onmousemove: function (param) {
	            if (this._marking) {
	                this._markShape.style.xEnd = zrEvent.getX(param.event);
	                this._markShape.style.yEnd = zrEvent.getY(param.event);
	                this.zr.addHoverShape(this._markShape);
	            }
	            if (this._zooming) {
	                this._zoomShape.style.width = 
	                    zrEvent.getX(param.event) - this._zoomShape.style.x;
	                this._zoomShape.style.height = 
	                    zrEvent.getY(param.event) - this._zoomShape.style.y;
	                this.zr.addHoverShape(this._zoomShape);
	                this.dom.style.cursor = 'crosshair';
	                zrEvent.stop(param.event);
	            }
	            if (this._zoomStart
	                && (this.dom.style.cursor != 'pointer' && this.dom.style.cursor != 'move')
	            ) {
	                this.dom.style.cursor = 'crosshair';
	            }
	        },
	
	        __onmousedown: function (param) {
	            if (param.target) {
	                return;
	            }
	            this._zooming = true;
	            var x = zrEvent.getX(param.event);
	            var y = zrEvent.getY(param.event);
	            var zoomOption = this.option.dataZoom || {};
	            this._zoomShape = new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    x: x,
	                    y: y,
	                    width: 1,
	                    height: 1,
	                    brushType: 'both'
	                },
	                highlightStyle: {
	                    lineWidth: 2,
	                    color: zoomOption.fillerColor 
	                           || ecConfig.dataZoom.fillerColor,
	                    strokeColor: zoomOption.handleColor 
	                                  || ecConfig.dataZoom.handleColor,
	                    brushType: 'both'
	                }
	            });
	            this.zr.addHoverShape(this._zoomShape);
	            return true; // 阻塞全局事件
	        },
	        
	        __onmouseup: function (/*param*/) {
	            if (!this._zoomShape 
	                || Math.abs(this._zoomShape.style.width) < 10 
	                || Math.abs(this._zoomShape.style.height) < 10
	            ) {
	                this._zooming = false;
	                return true;
	            }
	            if (this._zooming && this.component.dataZoom) {
	                this._zooming = false;
	                
	                var zoom = this.component.dataZoom.rectZoom(this._zoomShape.style);
	                if (zoom) {
	                    this._zoomQueue.push({
	                        start: zoom.start,
	                        end: zoom.end,
	                        start2: zoom.start2,
	                        end2: zoom.end2
	                    });
	                    this._iconEnable(this._iconShapeMap['dataZoomReset']);
	                    this.zr.refreshNextFrame();
	                }
	            }
	            return true; // 阻塞全局事件
	        },
	        
	        __onclick: function (param) {
	            if (param.target) {
	                return;
	            }
	            if (this._marking) {
	                this._marking = false;
	                this._markShapeList.push(this._markShape);
	                this._iconEnable(this._iconShapeMap['markUndo']);
	                this._iconEnable(this._iconShapeMap['markClear']);
	                this.zr.addShape(this._markShape);
	                this.zr.refreshNextFrame();
	            } 
	            else if (this._markStart) {
	                this._marking = true;
	                var x = zrEvent.getX(param.event);
	                var y = zrEvent.getY(param.event);
	                this._markShape = new LineShape({
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    style: {
	                        xStart: x,
	                        yStart: y,
	                        xEnd: x,
	                        yEnd: y,
	                        lineWidth: this.query(
	                                       this.option,
	                                       'toolbox.feature.mark.lineStyle.width'
	                                   ),
	                        strokeColor: this.query(
	                                         this.option,
	                                         'toolbox.feature.mark.lineStyle.color'
	                                     ),
	                        lineType: this.query(
	                                      this.option,
	                                      'toolbox.feature.mark.lineStyle.type'
	                                  )
	                    }
	                });
	                this.zr.addHoverShape(this._markShape);
	            }
	        },
	        
	        __onMark: function (param) {
	            var target = param.target;
	            if (this._marking || this._markStart) {
	                // 取消
	                this._resetMark();
	                this.zr.refreshNextFrame();
	            }
	            else {
	                // 启用Mark
	                this._resetZoom();   // mark与dataZoom互斥
	                
	                this.zr.modShape(target.id, {style: {strokeColor: this._enableColor}});
	                this.zr.refreshNextFrame();
	                this._markStart = true;
	                var self = this;
	                setTimeout(function (){
	                    self.zr
	                    && self.zr.on(zrConfig.EVENT.CLICK, self._onclick)
	                    && self.zr.on(zrConfig.EVENT.MOUSEMOVE, self._onmousemove);
	                }, 10);
	            }
	            return true; // 阻塞全局事件
	        },
	        
	        __onMarkUndo: function () {
	            if (this._marking) {
	                this._marking = false;
	            } else {
	                var len = this._markShapeList.length;
	                if (len >= 1) {
	                    var target = this._markShapeList[len - 1];
	                    this.zr.delShape(target.id);
	                    this.zr.refreshNextFrame();
	                    this._markShapeList.pop();
	                    if (len === 1) {
	                        this._iconDisable(this._iconShapeMap['markUndo']);
	                        this._iconDisable(this._iconShapeMap['markClear']);
	                    }
	                }
	            }
	            return true;
	        },
	
	        __onMarkClear: function () {
	            if (this._marking) {
	                this._marking = false;
	            }
	            var len = this._markShapeList.length;
	            if (len > 0) {
	                while(len--) {
	                    this.zr.delShape(this._markShapeList.pop().id);
	                }
	                this._iconDisable(this._iconShapeMap['markUndo']);
	                this._iconDisable(this._iconShapeMap['markClear']);
	                this.zr.refreshNextFrame();
	            }
	            return true;
	        },
	        
	        __onDataZoom: function (param) {
	            var target = param.target;
	            if (this._zooming || this._zoomStart) {
	                // 取消
	                this._resetZoom();
	                this.zr.refreshNextFrame();
	                this.dom.style.cursor = 'default';
	            }
	            else {
	                // 启用Zoom
	                this._resetMark();   // mark与dataZoom互斥
	                
	                this.zr.modShape(target.id, {style: {strokeColor: this._enableColor}});
	                this.zr.refreshNextFrame();
	                this._zoomStart = true;
	                var self = this;
	                setTimeout(function (){
	                    self.zr
	                    && self.zr.on(zrConfig.EVENT.MOUSEDOWN, self._onmousedown)
	                    && self.zr.on(zrConfig.EVENT.MOUSEUP, self._onmouseup)
	                    && self.zr.on(zrConfig.EVENT.MOUSEMOVE, self._onmousemove);
	                }, 10);
	                
	                this.dom.style.cursor = 'crosshair';
	            }
	            return true; // 阻塞全局事件
	        },
	        
	        __onDataZoomReset: function () {
	            if (this._zooming) {
	                this._zooming = false;
	            }
	            this._zoomQueue.pop();
	            //console.log(this._zoomQueue)
	            if (this._zoomQueue.length > 0) {
	                this.component.dataZoom.absoluteZoom(
	                    this._zoomQueue[this._zoomQueue.length - 1]
	                );
	            }
	            else {
	                this.component.dataZoom.rectZoom();
	                this._iconDisable(this._iconShapeMap['dataZoomReset']);
	                this.zr.refreshNextFrame();
	            }
	            
	            return true;
	        },
	
	        _resetMark: function () {
	            this._marking = false;
	            if (this._markStart) {
	                this._markStart = false;
	                if (this._iconShapeMap['mark']) {
	                    // 还原图标为未生效状态
	                    this.zr.modShape(
	                        this._iconShapeMap['mark'].id,
	                        {
	                            style: {
	                                strokeColor: this._iconShapeMap['mark']
	                                                 .highlightStyle
	                                                 .strokeColor
	                            }
	                         }
	                    );
	                }
	                
	                this.zr.un(zrConfig.EVENT.CLICK, this._onclick);
	                this.zr.un(zrConfig.EVENT.MOUSEMOVE, this._onmousemove);
	            }
	        },
	        
	        _resetZoom: function () {
	            this._zooming = false;
	            if (this._zoomStart) {
	                this._zoomStart = false;
	                if (this._iconShapeMap['dataZoom']) {
	                    // 还原图标为未生效状态
	                    this.zr.modShape(
	                        this._iconShapeMap['dataZoom'].id,
	                        {
	                            style: {
	                                strokeColor: this._iconShapeMap['dataZoom']
	                                                 .highlightStyle
	                                                 .strokeColor
	                            }
	                         }
	                    );
	                }
	                
	                this.zr.un(zrConfig.EVENT.MOUSEDOWN, this._onmousedown);
	                this.zr.un(zrConfig.EVENT.MOUSEUP, this._onmouseup);
	                this.zr.un(zrConfig.EVENT.MOUSEMOVE, this._onmousemove);
	            }
	        },
	
	        _iconDisable: function (target) {
	            if (target.type != 'image') {
	                this.zr.modShape(target.id, {
	                    hoverable: false,
	                    clickable: false,
	                    style: {
	                        strokeColor: this._disableColor
	                    }
	                });
	            }
	            else {
	                this.zr.modShape(target.id, {
	                    hoverable: false,
	                    clickable: false,
	                    style: {
	                        opacity: 0.3
	                    }
	                });
	            }
	        },
	
	        _iconEnable: function (target) {
	            if (target.type != 'image') {
	                this.zr.modShape(target.id, {
	                    hoverable: true,
	                    clickable: true,
	                    style: {
	                        strokeColor: target.highlightStyle.strokeColor
	                    }
	                });
	            }
	            else {
	                this.zr.modShape(target.id, {
	                    hoverable: true,
	                    clickable: true,
	                    style: {
	                        opacity: 0.8
	                    }
	                });
	            }
	        },
	
	        __onDataView: function () {
	            this._dataView.show(this.option);
	            return true;
	        },
	
	        __onRestore: function (){
	            this._resetMark();
	            this._resetZoom();
	            this.messageCenter.dispatch(ecConfig.EVENT.RESTORE, null, null, this.myChart);
	            return true;
	        },
	        
	        __onSaveAsImage: function () {
	            var saveOption = this.option.toolbox.feature.saveAsImage;
	            var imgType = saveOption.type || 'png';
	            if (imgType != 'png' && imgType != 'jpeg') {
	                imgType = 'png';
	            }
	            
	            var image;
	            if (!this.myChart.isConnected()) {
	                image = this.zr.toDataURL(
	                    'image/' + imgType,
	                    this.option.backgroundColor 
	                    && this.option.backgroundColor.replace(' ','') === 'rgba(0,0,0,0)'
	                        ? '#fff' : this.option.backgroundColor
	                );
	            }
	            else {
	                image = this.myChart.getConnectedDataURL(imgType);
	            }
	             
	            var downloadDiv = document.createElement('div');
	            downloadDiv.id = '__echarts_download_wrap__';
	            downloadDiv.style.cssText = 'position:fixed;'
	                + 'z-index:99999;'
	                + 'display:block;'
	                + 'top:0;left:0;'
	                + 'background-color:rgba(33,33,33,0.5);'
	                + 'text-align:center;'
	                + 'width:100%;'
	                + 'height:100%;'
	                + 'line-height:' 
	                + document.documentElement.clientHeight + 'px;';
	                
	            var downloadLink = document.createElement('a');
	            //downloadLink.onclick = _saveImageForIE;
	            downloadLink.href = image;
	            downloadLink.setAttribute(
	                'download',
	                (saveOption.name 
	                 ? saveOption.name 
	                 : (this.option.title && (this.option.title.text || this.option.title.subtext))
	                   ? (this.option.title.text || this.option.title.subtext)
	                   : 'ECharts')
	                + '.' + imgType 
	            );
	            downloadLink.innerHTML = '<img style="vertical-align:middle" src="' + image 
	                + '" title="'
	                + ((!!window.ActiveXObject || 'ActiveXObject' in window)
	                  ? '右键->图片另存为'
	                  : (saveOption.lang ? saveOption.lang[0] : '点击保存'))
	                + '"/>';
	            
	            downloadDiv.appendChild(downloadLink);
	            document.body.appendChild(downloadDiv);
	            downloadLink = null;
	            downloadDiv = null;
	            
	            setTimeout(function (){
	                var _d = document.getElementById('__echarts_download_wrap__');
	                if (_d) {
	                    _d.onclick = function () {
	                        var d = document.getElementById(
	                            '__echarts_download_wrap__'
	                        );
	                        d.onclick = null;
	                        d.innerHTML = '';
	                        document.body.removeChild(d);
	                        d = null;
	                    };
	                    _d = null;
	                }
	            }, 500);
	            
	            /*
	            function _saveImageForIE() {
	                window.win = window.open(image);
	                win.document.execCommand("SaveAs");
	                win.close()
	            }
	            */
	            return;
	        },
	
	        __onMagicType: function (param) {
	            this._resetMark();
	            var itemName = param.target._name;
	            if (!this._magicType[itemName]) {
	                // 启用
	                this._magicType[itemName] = true;
	                // 折柱互斥
	                if (itemName === ecConfig.CHART_TYPE_LINE) {
	                    this._magicType[ecConfig.CHART_TYPE_BAR] = false;
	                }
	                else if (itemName === ecConfig.CHART_TYPE_BAR) {
	                    this._magicType[ecConfig.CHART_TYPE_LINE] = false;
	                }
	                // 饼图漏斗互斥
	                if (itemName === ecConfig.CHART_TYPE_PIE) {
	                    this._magicType[ecConfig.CHART_TYPE_FUNNEL] = false;
	                }
	                else if (itemName === ecConfig.CHART_TYPE_FUNNEL) {
	                    this._magicType[ecConfig.CHART_TYPE_PIE] = false;
	                }
	                // 力导和弦互斥
	                if (itemName === ecConfig.CHART_TYPE_FORCE) {
	                    this._magicType[ecConfig.CHART_TYPE_CHORD] = false;
	                }
	                else if (itemName === ecConfig.CHART_TYPE_CHORD) {
	                    this._magicType[ecConfig.CHART_TYPE_FORCE] = false;
	                }
	                // 堆积平铺互斥
	                if (itemName === _MAGICTYPE_STACK) {
	                    this._magicType[_MAGICTYPE_TILED] = false;
	                }
	                else if (itemName === _MAGICTYPE_TILED) {
	                    this._magicType[_MAGICTYPE_STACK] = false;
	                }
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.MAGIC_TYPE_CHANGED,
	                    param.event,
	                    { magicType: this._magicType },
	                    this.myChart
	                );
	            }
	            
	            return true;
	        },
	        
	        setMagicType: function (magicType) {
	            this._resetMark();
	            this._magicType = magicType;
	            
	            !this._isSilence && this.messageCenter.dispatch(
	                ecConfig.EVENT.MAGIC_TYPE_CHANGED,
	                null,
	                { magicType: this._magicType },
	                this.myChart
	            );
	        },
	        
	        // 用户自定义扩展toolbox方法
	        __onCustomHandler: function (param) {
	            var target = param.target.style.iconType;
	            var featureHandler = this.option.toolbox.feature[target].onclick;
	            if (typeof featureHandler === 'function') {
	                featureHandler.call(this, this.option);
	            }
	        },
	
	        // 重置备份还原状态等
	        reset: function (newOption, isRestore) {
	            isRestore && this.clear();
	            
	            if (this.query(newOption, 'toolbox.show')
	                && this.query(newOption, 'toolbox.feature.magicType.show')
	            ) {
	                var magicType = newOption.toolbox.feature.magicType.type;
	                var len = magicType.length;
	                this._magicMap = {};     // 标识可控类型
	                while (len--) {
	                    this._magicMap[magicType[len]] = true;
	                }
	
	                len = newOption.series.length;
	                var oriType;        // 备份还原可控类型
	                var axis;
	                while (len--) {
	                    oriType = newOption.series[len].type;
	                    if (this._magicMap[oriType]) {
	                        axis = newOption.xAxis instanceof Array
	                               ? newOption.xAxis[newOption.series[len].xAxisIndex || 0]
	                               : newOption.xAxis;
	                        if (axis && (axis.type || 'category') === 'category') {
	                            axis.__boundaryGap = axis.boundaryGap != null
	                                                 ? axis.boundaryGap : true;
	                        }
	                        axis = newOption.yAxis instanceof Array
	                               ? newOption.yAxis[newOption.series[len].yAxisIndex || 0]
	                               : newOption.yAxis;
	                        if (axis && axis.type === 'category') {
	                            axis.__boundaryGap = axis.boundaryGap != null
	                                                 ? axis.boundaryGap : true;
	                        }
	                        newOption.series[len].__type = oriType;
	                        // 避免不同类型图表类型的样式污染
	                        newOption.series[len].__itemStyle = zrUtil.clone(
	                            newOption.series[len].itemStyle || {}
	                        );
	                    }
	                    
	                    if (this._magicMap[_MAGICTYPE_STACK] || this._magicMap[_MAGICTYPE_TILED]) {
	                        newOption.series[len].__stack = newOption.series[len].stack;
	                    }
	                }
	            }
	            
	            this._magicType = isRestore ? {} : (this._magicType || {});
	            for (var itemName in this._magicType) {
	                if (this._magicType[itemName]) {
	                    this.option = newOption;
	                    this.getMagicOption();
	                    break;
	                }
	            }
	            
	            // 框选缩放
	            var zoomOption = newOption.dataZoom;
	            if (zoomOption && zoomOption.show) {
	                var start = zoomOption.start != null
	                            && zoomOption.start >= 0
	                            && zoomOption.start <= 100
	                            ? zoomOption.start : 0;
	                var end = zoomOption.end != null
	                          && zoomOption.end >= 0
	                          && zoomOption.end <= 100
	                          ? zoomOption.end : 100;
	                if (start > end) {
	                    // 大小颠倒自动翻转
	                    start = start + end;
	                    end = start - end;
	                    start = start - end;
	                }
	                this._zoomQueue = [{
	                    start: start,
	                    end: end,
	                    start2: 0,
	                    end2: 100
	                }];
	            }
	            else {
	                this._zoomQueue = [];
	            }
	        },
	        
	        getMagicOption: function (){
	            var axis;
	            var chartType;
	            if (this._magicType[ecConfig.CHART_TYPE_LINE] 
	                || this._magicType[ecConfig.CHART_TYPE_BAR]
	            ) {
	                // 图表类型有折柱切换
	                var boundaryGap = this._magicType[ecConfig.CHART_TYPE_LINE] ? false : true;
	                for (var i = 0, l = this.option.series.length; i < l; i++) {
	                    chartType = this.option.series[i].type;
	                    if (chartType == ecConfig.CHART_TYPE_LINE
	                        || chartType == ecConfig.CHART_TYPE_BAR
	                    ) {
	                        axis = this.option.xAxis instanceof Array
	                               ? this.option.xAxis[this.option.series[i].xAxisIndex || 0]
	                               : this.option.xAxis;
	                        if (axis && (axis.type || 'category') === 'category') {
	                            axis.boundaryGap = boundaryGap ? true : axis.__boundaryGap;
	                        }
	                        axis = this.option.yAxis instanceof Array
	                               ? this.option.yAxis[this.option.series[i].yAxisIndex || 0]
	                               : this.option.yAxis;
	                        if (axis && axis.type === 'category') {
	                            axis.boundaryGap = boundaryGap ? true : axis.__boundaryGap;
	                        }
	                    }
	                }
	                
	                this._defaultMagic(ecConfig.CHART_TYPE_LINE, ecConfig.CHART_TYPE_BAR);
	            }
	            this._defaultMagic(ecConfig.CHART_TYPE_CHORD, ecConfig.CHART_TYPE_FORCE);
	            this._defaultMagic(ecConfig.CHART_TYPE_PIE, ecConfig.CHART_TYPE_FUNNEL);
	            
	            if (this._magicType[_MAGICTYPE_STACK] || this._magicType[_MAGICTYPE_TILED]) {
	                // 有堆积平铺切换
	                for (var i = 0, l = this.option.series.length; i < l; i++) {
	                    if (this._magicType[_MAGICTYPE_STACK]) {
	                        // 启用堆积
	                        this.option.series[i].stack = '_ECHARTS_STACK_KENER_2014_';
	                        chartType = _MAGICTYPE_STACK;
	                    }
	                    else if (this._magicType[_MAGICTYPE_TILED]) {
	                        // 启用平铺
	                        this.option.series[i].stack = null;
	                        chartType = _MAGICTYPE_TILED;
	                    }
	                    if (this._featureOption[chartType + 'Chart']) {
	                        zrUtil.merge(
	                            this.option.series[i],
	                            this._featureOption[chartType + 'Chart'] || {},
	                            true
	                        );
	                    }
	                }
	            }
	            return this.option;
	        },
	        
	        _defaultMagic : function(cType1, cType2) {
	            if (this._magicType[cType1] || this._magicType[cType2]) {
	                for (var i = 0, l = this.option.series.length; i < l; i++) {
	                    var chartType = this.option.series[i].type;
	                    if (chartType == cType1 || chartType == cType2) {
	                        this.option.series[i].type = this._magicType[cType1] ? cType1 : cType2;
	                        // 避免不同类型图表类型的样式污染
	                        this.option.series[i].itemStyle = zrUtil.clone(
	                            this.option.series[i].__itemStyle
	                        );
	                        chartType = this.option.series[i].type;
	                        if (this._featureOption[chartType + 'Chart']) {
	                            zrUtil.merge(
	                                this.option.series[i],
	                                this._featureOption[chartType + 'Chart'] || {},
	                                true
	                            );
	                        }
	                    }
	                }
	            }
	        },
	
	        silence: function (s) {
	            this._isSilence = s;
	        },
	        
	        resize: function () {
	            this._resetMark();
	            this.clear();
	            if (this.option && this.option.toolbox && this.option.toolbox.show) {
	               this._buildShape();
	            }
	            if (this._dataView) {
	                this._dataView.resize();
	            }
	        },
	
	        hideDataView: function () {
	            if (this._dataView) {
	                this._dataView.hide();
	            }
	        },
	        
	        clear: function(notMark) {
	            if (this.zr) {
	                this.zr.delShape(this.shapeList);
	                this.shapeList = [];
	                
	                if (!notMark) {
	                    this.zr.delShape(this._markShapeList);
	                    this._markShapeList = [];
	                }
	            }
	        },
	        
	        /**
	         * 释放后实例不可用
	         */
	        onbeforDispose: function () {
	            if (this._dataView) {
	                this._dataView.dispose();
	                this._dataView = null;
	            }
	            this._markShapeList = null;
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this._resetMark();
	                this._resetZoom();
	                
	                newOption.toolbox = this.reformOption(newOption.toolbox);
	                this.option = newOption;
	                
	                this.clear(true);
	    
	                if (newOption.toolbox.show) {
	                    this._buildShape();
	                }
	    
	                this.hideDataView();
	            }
	        }
	    };
	    
	    zrUtil.inherits(Toolbox, Base);
	    
	    __webpack_require__(229).define('toolbox', Toolbox);
	    
	    return Toolbox;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：提示框
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	
	    var ecConfig = __webpack_require__(167);
	    var zrUtil = __webpack_require__(168);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 提示框参数
	     * @param {HtmlElement} dom 目标对象
	     */
	    function DataView(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this.dom = myChart.dom;
	        
	        // dataview dom & css
	        this._tDom = document.createElement('div');
	        this._textArea = document.createElement('textArea');
	        this._buttonRefresh = document.createElement('button');
	        // 高级浏览器默认type为submit
	        // 如果图表出现在form表单时，点击button后会提交表单
	        // 设置为button，防止点击button后提交表单
	        this._buttonRefresh.setAttribute('type', 'button');
	        this._buttonClose = document.createElement('button');
	        this._buttonClose.setAttribute('type', 'button');
	        this._hasShow = false;
	
	        // 缓存一些高宽数据
	        this._zrHeight = zr.getHeight();
	        this._zrWidth = zr.getWidth();
	    
	        this._tDom.className = 'echarts-dataview';
	        this.hide();
	        this.dom.firstChild.appendChild(this._tDom);
	
	        if (window.addEventListener) {
	            this._tDom.addEventListener('click', this._stop);
	            this._tDom.addEventListener('mousewheel', this._stop);
	            this._tDom.addEventListener('mousemove', this._stop);
	            this._tDom.addEventListener('mousedown', this._stop);
	            this._tDom.addEventListener('mouseup', this._stop);
	
	            // mobile支持
	            this._tDom.addEventListener('touchstart', this._stop);
	            this._tDom.addEventListener('touchmove', this._stop);
	            this._tDom.addEventListener('touchend', this._stop);
	        }
	        else {
	            this._tDom.attachEvent('onclick', this._stop);
	            this._tDom.attachEvent('onmousewheel', this._stop);
	            this._tDom.attachEvent('onmousemove', this._stop);
	            this._tDom.attachEvent('onmousedown', this._stop);
	            this._tDom.attachEvent('onmouseup', this._stop);
	        }
	    }
	    
	    DataView.prototype = {
	        type : ecConfig.COMPONENT_TYPE_DATAVIEW,
	        _lang : ['Data View', 'close', 'refresh'],
	        // 通用样式
	        _gCssText : 'position:absolute;'
	                    + 'display:block;'
	                    + 'overflow:hidden;'
	                    + 'transition:height 0.8s,background-color 1s;'
	                    + '-moz-transition:height 0.8s,background-color 1s;'
	                    + '-webkit-transition:height 0.8s,background-color 1s;'
	                    + '-o-transition:height 0.8s,background-color 1s;'
	                    + 'z-index:1;'
	                    + 'left:0;'
	                    + 'top:0;',
	        hide : function () {
	            this._sizeCssText = 'width:' + this._zrWidth + 'px;'
	                           + 'height:' + 0 + 'px;'
	                           + 'background-color:#f0ffff;';
	            this._tDom.style.cssText = this._gCssText + this._sizeCssText;
	            // 这是个很恶心的事情
	            /*
	            this.dom.onselectstart = function () {
	                return false;
	            };
	            */
	        },
	
	        show : function (newOption) {
	            this._hasShow = true;
	            var lang = this.query(this.option, 'toolbox.feature.dataView.lang')
	                       || this._lang;
	
	            this.option = newOption;
	
	            this._tDom.innerHTML = '<p style="padding:8px 0;margin:0 0 10px 0;'
	                              + 'border-bottom:1px solid #eee">'
	                              + (lang[0] || this._lang[0])
	                              + '</p>';
	
	            var customContent = this.query(
	                this.option, 'toolbox.feature.dataView.optionToContent'
	            );
	            if (typeof customContent != 'function') {
	                this._textArea.value = this._optionToContent();
	            }
	            else {
	                // innerHTML the custom optionToContent;
	                this._textArea = document.createElement('div');
	                this._textArea.innerHTML = customContent(this.option);
	            }
	
	            this._textArea.style.cssText =
	                'display:block;margin:0 0 8px 0;padding:4px 6px;overflow:auto;'
	                + 'width:100%;'
	                + 'height:' + (this._zrHeight - 100) + 'px;';
	
	            this._tDom.appendChild(this._textArea);
	
	            this._buttonClose.style.cssText = 'float:right;padding:1px 6px;';
	            this._buttonClose.innerHTML = lang[1] || this._lang[1];
	            var self = this;
	            this._buttonClose.onclick = function (){
	                self.hide();
	            };
	            this._tDom.appendChild(this._buttonClose);
	
	            if (this.query(this.option, 'toolbox.feature.dataView.readOnly')
	                === false
	            ) {
	                this._buttonRefresh.style.cssText =
	                    'float:right;margin-right:10px;padding:1px 6px;';
	                this._buttonRefresh.innerHTML = lang[2] || this._lang[2];
	                this._buttonRefresh.onclick = function (){
	                    self._save();
	                };
	                this._textArea.readOnly = false;
	                this._textArea.style.cursor = 'default';
	            }
	            else {
	                this._buttonRefresh.style.cssText =
	                    'display:none';
	                this._textArea.readOnly = true;
	                this._textArea.style.cursor = 'text';
	            }
	            this._tDom.appendChild(this._buttonRefresh);
	
	            this._sizeCssText = 'width:' + this._zrWidth + 'px;'
	                           + 'height:' + this._zrHeight + 'px;'
	                           + 'background-color:#fff;';
	            this._tDom.style.cssText = this._gCssText + this._sizeCssText;
	            // 这是个很恶心的事情
	            /*
	            this.dom.onselectstart = function () {
	                return true;
	            };
	            */
	        },
	
	        _optionToContent : function () {
	            var i;
	            var j;
	            var k;
	            var len;
	            var data;
	            var valueList;
	            var axisList = [];
	            var content = '';
	            if (this.option.xAxis) {
	                if (this.option.xAxis instanceof Array) {
	                    axisList = this.option.xAxis;
	                } else {
	                    axisList = [this.option.xAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    // 横纵默认为类目
	                    if ((axisList[i].type || 'category') == 'category') {
	                        valueList = [];
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            valueList.push(this.getDataFromOption(axisList[i].data[j]));
	                        }
	                        content += valueList.join(', ') + '\n\n';
	                    }
	                }
	            }
	
	            if (this.option.yAxis) {
	                if (this.option.yAxis instanceof Array) {
	                    axisList = this.option.yAxis;
	                } else {
	                    axisList = [this.option.yAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    if (axisList[i].type  == 'category') {
	                        valueList = [];
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            valueList.push(this.getDataFromOption(axisList[i].data[j]));
	                        }
	                        content += valueList.join(', ') + '\n\n';
	                    }
	                }
	            }
	
	            var series = this.option.series;
	            var itemName;
	            for (i = 0, len = series.length; i < len; i++) {
	                valueList = [];
	                for (j = 0, k = series[i].data.length; j < k; j++) {
	                    data = series[i].data[j];
	                    if (series[i].type == ecConfig.CHART_TYPE_PIE
	                        || series[i].type == ecConfig.CHART_TYPE_MAP
	                    ) {
	                        itemName = (data.name || '-') + ':';
	                    }
	                    else {
	                        itemName = '';
	                    }
	                    
	                    if (series[i].type == ecConfig.CHART_TYPE_SCATTER) {
	                        data = this.getDataFromOption(data).join(', ');
	                    }
	                    valueList.push(itemName + this.getDataFromOption(data));
	                }
	                content += (series[i].name || '-') + ' : \n';
	                content += valueList.join(
	                    series[i].type == ecConfig.CHART_TYPE_SCATTER ? '\n': ', '
	                );
	                content += '\n\n';
	            }
	
	            return content;
	        },
	
	        _save : function () {
	            var customContent = this.query(
	                this.option, 'toolbox.feature.dataView.contentToOption'
	            );
	            if (typeof customContent != 'function') {
	                var text = this._textArea.value.split('\n');
	                var content = [];
	                for (var i = 0, l = text.length; i < l; i++) {
	                    text[i] = this._trim(text[i]);
	                    if (text[i] !== '') {
	                        content.push(text[i]);
	                    }
	                }
	                this._contentToOption(content);
	            }
	            else {
	                // return the textArea dom for custom contentToOption
	                customContent(this._textArea, this.option);
	            }
	
	            this.hide();
	            
	            var self = this;
	            setTimeout(
	                function (){
	                    self.messageCenter && self.messageCenter.dispatch(
	                        ecConfig.EVENT.DATA_VIEW_CHANGED,
	                        null,
	                        {option : self.option},
	                        self.myChart
	                    );
	                },
	                // 有动画，所以高级浏览器时间更长点
	                self.canvasSupported ? 800 : 100
	            );
	        },
	
	        _contentToOption : function (content) {
	            var i;
	            var j;
	            var k;
	            var len;
	            var data;
	            var axisList = [];
	
	            var contentIdx = 0;
	            var contentValueList;
	            var value;
	
	            if (this.option.xAxis) {
	                if (this.option.xAxis instanceof Array) {
	                    axisList = this.option.xAxis;
	                } else {
	                    axisList = [this.option.xAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    // 横纵默认为类目
	                    if ((axisList[i].type || 'category') == 'category'
	                    ) {
	                        contentValueList = content[contentIdx].split(',');
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            value = this._trim(contentValueList[j] || '');
	                            data = axisList[i].data[j];
	                            if (typeof axisList[i].data[j].value != 'undefined'
	                            ) {
	                                axisList[i].data[j].value = value;
	                            }
	                            else {
	                                axisList[i].data[j] = value;
	                            }
	                        }
	                        contentIdx++;
	                    }
	                }
	            }
	
	            if (this.option.yAxis) {
	                if (this.option.yAxis instanceof Array) {
	                    axisList = this.option.yAxis;
	                } else {
	                    axisList = [this.option.yAxis];
	                }
	                for (i = 0, len = axisList.length; i < len; i++) {
	                    if (axisList[i].type  == 'category') {
	                        contentValueList = content[contentIdx].split(',');
	                        for (j = 0, k = axisList[i].data.length; j < k; j++) {
	                            value = this._trim(contentValueList[j] || '');
	                            data = axisList[i].data[j];
	                            if (typeof axisList[i].data[j].value != 'undefined'
	                            ) {
	                                axisList[i].data[j].value = value;
	                            }
	                            else {
	                                axisList[i].data[j] = value;
	                            }
	                        }
	                        contentIdx++;
	                    }
	                }
	            }
	
	            var series = this.option.series;
	            for (i = 0, len = series.length; i < len; i++) {
	                contentIdx++;
	                if (series[i].type == ecConfig.CHART_TYPE_SCATTER) {
	                    for (var j = 0, k = series[i].data.length; j < k; j++) {
	                        contentValueList = content[contentIdx];
	                        value = contentValueList.replace(' ','').split(',');
	                        if (typeof series[i].data[j].value != 'undefined'
	                        ) {
	                            series[i].data[j].value = value;
	                        }
	                        else {
	                            series[i].data[j] = value;
	                        }
	                        contentIdx++;
	                    }
	                }
	                else {
	                    contentValueList = content[contentIdx].split(',');
	                    for (var j = 0, k = series[i].data.length; j < k; j++) {
	                        value = (contentValueList[j] || '').replace(/.*:/,'');
	                        value = this._trim(value);
	                        value = (value != '-' && value !== '')
	                                ? (value - 0)
	                                : '-';
	                        if (typeof series[i].data[j].value != 'undefined'
	                        ) {
	                            series[i].data[j].value = value;
	                        }
	                        else {
	                            series[i].data[j] = value;
	                        }
	                    }
	                    contentIdx++;
	                }
	            }
	        },
	
	        _trim : function (str){
	            var trimer = new RegExp(
	                '(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+\x24)', 'g'
	            );
	            return str.replace(trimer, '');
	        },
	
	        // 阻塞zrender事件
	        _stop : function (e){
	            e = e || window.event;
	            if (e.stopPropagation) {
	                e.stopPropagation();
	            }
	            else {
	                e.cancelBubble = true;
	            }
	        },
	
	        /**
	         * zrender事件响应：窗口大小改变
	         */
	        resize : function () {
	            this._zrHeight = this.zr.getHeight();
	            this._zrWidth = this.zr.getWidth();
	            if (this._tDom.offsetHeight > 10) {
	                this._sizeCssText = 'width:' + this._zrWidth + 'px;'
	                               + 'height:' + this._zrHeight + 'px;'
	                               + 'background-color:#fff;';
	                this._tDom.style.cssText = this._gCssText + this._sizeCssText;
	                this._textArea.style.cssText = 'display:block;margin:0 0 8px 0;'
	                                        + 'padding:4px 6px;overflow:auto;'
	                                        + 'width:100%;'
	                                        + 'height:' + (this._zrHeight - 100) + 'px;';
	            }
	        },
	
	        /**
	         * 释放后实例不可用，重载基类方法
	         */
	        dispose : function () {
	            if (window.removeEventListener) {
	                this._tDom.removeEventListener('click', this._stop);
	                this._tDom.removeEventListener('mousewheel', this._stop);
	                this._tDom.removeEventListener('mousemove', this._stop);
	                this._tDom.removeEventListener('mousedown', this._stop);
	                this._tDom.removeEventListener('mouseup', this._stop);
	
	                // mobile支持
	                this._tDom.removeEventListener('touchstart', this._stop);
	                this._tDom.removeEventListener('touchmove', this._stop);
	                this._tDom.removeEventListener('touchend', this._stop);
	            }
	            else {
	                this._tDom.detachEvent('onclick', this._stop);
	                this._tDom.detachEvent('onmousewheel', this._stop);
	                this._tDom.detachEvent('onmousemove', this._stop);
	                this._tDom.detachEvent('onmousedown', this._stop);
	                this._tDom.detachEvent('onmouseup', this._stop);
	            }
	
	            this._buttonRefresh.onclick = null;
	            this._buttonClose.onclick = null;
	
	            if (this._hasShow) {
	                this._tDom.removeChild(this._textArea);
	                this._tDom.removeChild(this._buttonRefresh);
	                this._tDom.removeChild(this._buttonClose);
	            }
	
	            this._textArea = null;
	            this._buttonRefresh = null;
	            this._buttonClose = null;
	
	            this.dom.firstChild.removeChild(this._tDom);
	            this._tDom = null;
	        }
	    };
	    
	    zrUtil.inherits(DataView, Base);
	    
	    __webpack_require__(229).define('dataView', DataView);
	    
	    return DataView;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echart组件库
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (/*require*/) {     // component
	    var self = {};
	
	    var _componentLibrary = {};     // echart组件库
	
	    /**
	     * 定义图形实现
	     * @param {Object} name
	     * @param {Object} clazz 图形实现
	     */
	    self.define = function (name, clazz) {
	        _componentLibrary[name] = clazz;
	        return self;
	    };
	
	    /**
	     * 获取图形实现
	     * @param {Object} name
	     */
	    self.get = function (name) {
	        return _componentLibrary[name];
	    };
	    
	    return self;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：图表标题
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var TextShape = __webpack_require__(182);
	    var RectangleShape = __webpack_require__(188);
	    
	    var ecConfig = __webpack_require__(167);
	    // 图表标题
	    ecConfig.title = {
	        zlevel: 0,                  // 一级层叠
	        z: 6,                       // 二级层叠
	        show: true,
	        text: '',
	        // link: null,             // 超链接跳转
	        // target: null,           // 仅支持self | blank
	        subtext: '',
	        // sublink: null,          // 超链接跳转
	        // subtarget: null,        // 仅支持self | blank
	        x: 'left',                 // 水平安放位置，默认为左对齐，可选为：
	                                   // 'center' ¦ 'left' ¦ 'right'
	                                   // ¦ {number}（x坐标，单位px）
	        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：
	                                   // 'top' ¦ 'bottom' ¦ 'center'
	                                   // ¦ {number}（y坐标，单位px）
	        //textAlign: null          // 水平对齐方式，默认根据x设置自动调整
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderColor: '#ccc',       // 标题边框颜色
	        borderWidth: 0,            // 标题边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 标题内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        itemGap: 5,                // 主副标题纵向间隔，单位px，默认为10，
	        textStyle: {
	            fontSize: 18,
	            fontWeight: 'bolder',
	            color: '#333'          // 主标题文字颜色
	        },
	        subtextStyle: {
	            color: '#aaa'          // 副标题文字颜色
	        }
	    };
	    
	    var zrUtil = __webpack_require__(168);
	    var zrArea = __webpack_require__(183);
	    var zrColor = __webpack_require__(187);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     */
	    function Title(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.refresh(option);
	    }
	    
	    Title.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TITLE,
	        _buildShape: function () {
	            if (!this.titleOption.show) {
	                return;
	            }
	            // 标题元素组的位置参数，通过计算所得x, y, width, height
	            this._itemGroupLocation = this._getItemGroupLocation();
	
	            this._buildBackground();
	            this._buildItem();
	
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },
	
	        /**
	         * 构建所有标题元素
	         */
	        _buildItem: function () {
	            var text = this.titleOption.text;
	            var link = this.titleOption.link;
	            var target = this.titleOption.target;
	            var subtext = this.titleOption.subtext;
	            var sublink = this.titleOption.sublink;
	            var subtarget = this.titleOption.subtarget;
	            var font = this.getFont(this.titleOption.textStyle);
	            var subfont = this.getFont(this.titleOption.subtextStyle);
	            
	            var x = this._itemGroupLocation.x;
	            var y = this._itemGroupLocation.y;
	            var width = this._itemGroupLocation.width;
	            var height = this._itemGroupLocation.height;
	            
	            var textShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    y: y,
	                    color: this.titleOption.textStyle.color,
	                    text: text,
	                    textFont: font,
	                    textBaseline: 'top'
	                },
	                highlightStyle: {
	                    color: zrColor.lift(this.titleOption.textStyle.color, 1),
	                    brushType: 'fill'
	                },
	                hoverable: false
	            };
	            if (link) {
	                textShape.hoverable = true;
	                textShape.clickable = true;
	                textShape.onclick = function (){
	                    if (!target || target != 'self') {
	                        window.open(link);
	                    }
	                    else {
	                        window.location = link;
	                    }
	                };
	            }
	            
	            var subtextShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    y: y + height,
	                    color: this.titleOption.subtextStyle.color,
	                    text: subtext,
	                    textFont: subfont,
	                    textBaseline: 'bottom'
	                },
	                highlightStyle: {
	                    color: zrColor.lift(this.titleOption.subtextStyle.color, 1),
	                    brushType: 'fill'
	                },
	                hoverable: false
	            };
	            if (sublink) {
	                subtextShape.hoverable = true;
	                subtextShape.clickable = true;
	                subtextShape.onclick = function (){
	                    if (!subtarget || subtarget != 'self') {
	                        window.open(sublink);
	                    }
	                    else {
	                        window.location = sublink;
	                    }
	                };
	            }
	
	            switch (this.titleOption.x) {
	                case 'center' :
	                    textShape.style.x = subtextShape.style.x = x + width / 2;
	                    textShape.style.textAlign = subtextShape.style.textAlign 
	                                              = 'center';
	                    break;
	                case 'left' :
	                    textShape.style.x = subtextShape.style.x = x;
	                    textShape.style.textAlign = subtextShape.style.textAlign 
	                                              = 'left';
	                    break;
	                case 'right' :
	                    textShape.style.x = subtextShape.style.x = x + width;
	                    textShape.style.textAlign = subtextShape.style.textAlign 
	                                              = 'right';
	                    break;
	                default :
	                    x = this.titleOption.x - 0;
	                    x = isNaN(x) ? 0 : x;
	                    textShape.style.x = subtextShape.style.x = x;
	                    break;
	            }
	            
	            if (this.titleOption.textAlign) {
	                textShape.style.textAlign = subtextShape.style.textAlign 
	                                          = this.titleOption.textAlign;
	            }
	
	            this.shapeList.push(new TextShape(textShape));
	            subtext !== '' && this.shapeList.push(new TextShape(subtextShape));
	        },
	
	        _buildBackground: function () {
	            var padding = this.reformCssArray(this.titleOption.padding);
	
	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style: {
	                    x: this._itemGroupLocation.x - padding[3],
	                    y: this._itemGroupLocation.y - padding[0],
	                    width: this._itemGroupLocation.width + padding[3] + padding[1],
	                    height: this._itemGroupLocation.height + padding[0] + padding[2],
	                    brushType: this.titleOption.borderWidth === 0 ? 'fill' : 'both',
	                    color: this.titleOption.backgroundColor,
	                    strokeColor: this.titleOption.borderColor,
	                    lineWidth: this.titleOption.borderWidth
	                }
	            }));
	        },
	
	        /**
	         * 根据选项计算标题实体的位置坐标
	         */
	        _getItemGroupLocation: function () {
	            var padding = this.reformCssArray(this.titleOption.padding);
	            var text = this.titleOption.text;
	            var subtext = this.titleOption.subtext;
	            var font = this.getFont(this.titleOption.textStyle);
	            var subfont = this.getFont(this.titleOption.subtextStyle);
	            
	            var totalWidth = Math.max(
	                    zrArea.getTextWidth(text, font),
	                    zrArea.getTextWidth(subtext, subfont)
	                );
	            var totalHeight = zrArea.getTextHeight(text, font)
	                              + (subtext === ''
	                                 ? 0
	                                 : (this.titleOption.itemGap
	                                    + zrArea.getTextHeight(subtext, subfont))
	                                );
	
	            var x;
	            var zrWidth = this.zr.getWidth();
	            switch (this.titleOption.x) {
	                case 'center' :
	                    x = Math.floor((zrWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = padding[3] + this.titleOption.borderWidth;
	                    break;
	                case 'right' :
	                    x = zrWidth
	                        - totalWidth
	                        - padding[1]
	                        - this.titleOption.borderWidth;
	                    break;
	                default :
	                    x = this.titleOption.x - 0;
	                    x = isNaN(x) ? 0 : x;
	                    break;
	            }
	
	            var y;
	            var zrHeight = this.zr.getHeight();
	            switch (this.titleOption.y) {
	                case 'top' :
	                    y = padding[0] + this.titleOption.borderWidth;
	                    break;
	                case 'bottom' :
	                    y = zrHeight
	                        - totalHeight
	                        - padding[2]
	                        - this.titleOption.borderWidth;
	                    break;
	                case 'center' :
	                    y = Math.floor((zrHeight - totalHeight) / 2);
	                    break;
	                default :
	                    y = this.titleOption.y - 0;
	                    y = isNaN(y) ? 0 : y;
	                    break;
	            }
	
	            return {
	                x: x,
	                y: y,
	                width: totalWidth,
	                height: totalHeight
	            };
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption;
	
	                this.option.title = this.reformOption(this.option.title);
	                this.titleOption = this.option.title;
	                this.titleOption.textStyle = this.getTextStyle(
	                    this.titleOption.textStyle
	                );
	                this.titleOption.subtextStyle = this.getTextStyle(
	                    this.titleOption.subtextStyle
	                );
	            }
	            
	            this.clear();
	            this._buildShape();
	        }
	    };
	    
	    zrUtil.inherits(Title, Base);
	    
	    __webpack_require__(229).define('title', Title);
	    
	    return Title;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：提示框
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var CrossShape = __webpack_require__(232);
	    var LineShape = __webpack_require__(205);
	    var RectangleShape = __webpack_require__(188);
	    var rectangleInstance = new RectangleShape({});
	    
	    var ecConfig = __webpack_require__(167);
	    // 提示框
	    ecConfig.tooltip = {
	        zlevel: 1,                  // 一级层叠，频繁变化的tooltip指示器在pc上独立一层
	        z: 8,                       // 二级层叠
	        show: true,
	        showContent: true,         // tooltip主体内容
	        trigger: 'item',           // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	        // position: null          // 位置 {Array} | {Function}
	        // formatter: null         // 内容格式器：{string}（Template） ¦ {Function}
	        islandFormatter: '{a} <br/>{b} : {c}',  // 数据孤岛内容格式器
	        showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms
	        hideDelay: 100,            // 隐藏延迟，单位ms
	        transitionDuration: 0.4,   // 动画变换时间，单位s
	        enterable: false,
	        backgroundColor: 'rgba(0,0,0,0.7)',     // 提示背景颜色，默认为透明度为0.7的黑色
	        borderColor: '#333',       // 提示边框颜色
	        borderRadius: 4,           // 提示边框圆角，单位px，默认为4
	        borderWidth: 0,            // 提示边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 提示内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        axisPointer: {             // 坐标轴指示器，坐标轴触发有效
	            type: 'line',          // 默认为直线，可选为：'line' | 'shadow' | 'cross'
	            lineStyle: {           // 直线指示器样式设置
	                color: '#48b',
	                width: 2,
	                type: 'solid'
	            },
	            crossStyle: {
	                color: '#1e90ff',
	                width: 1,
	                type: 'dashed'
	            },
	            shadowStyle: {                      // 阴影指示器样式设置
	                color: 'rgba(150,150,150,0.3)', // 阴影颜色
	                width: 'auto',                  // 阴影大小
	                type: 'default'
	            }
	        },
	        textStyle: {
	            color: '#fff'
	        }
	    };
	
	    var ecData = __webpack_require__(215);
	    var zrConfig = __webpack_require__(175);
	    var zrEvent = __webpack_require__(170);
	    var zrArea = __webpack_require__(183);
	    var zrColor = __webpack_require__(187);
	    var zrUtil = __webpack_require__(168);
	    var zrShapeBase = __webpack_require__(185);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 提示框参数
	     * @param {HtmlElement} dom 目标对象
	     * @param {ECharts} myChart 当前图表实例
	     */
	    function Tooltip(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.dom = myChart.dom;
	        
	        var self = this;
	        self._onmousemove = function (param) {
	            return self.__onmousemove(param);
	        };
	        self._onglobalout = function (param) {
	            return self.__onglobalout(param);
	        };
	        
	        this.zr.on(zrConfig.EVENT.MOUSEMOVE, self._onmousemove);
	        this.zr.on(zrConfig.EVENT.GLOBALOUT, self._onglobalout);
	
	        self._hide = function (param) {
	            return self.__hide(param);
	        };
	        self._tryShow = function(param) {
	            return self.__tryShow(param);
	        };
	        self._refixed = function(param) {
	            return self.__refixed(param);
	        };
	        
	        self._setContent = function(ticket, res) {
	            return self.__setContent(ticket, res);
	        };
	        
	        this._tDom = this._tDom || document.createElement('div');
	        // 避免拖拽时页面选中的尴尬
	        this._tDom.onselectstart = function() {
	            return false;
	        };
	        this._tDom.onmouseover = function() {
	            self._mousein = true;
	        };
	        this._tDom.onmouseout = function() {
	            self._mousein = false;
	        };
	        this._tDom.className = 'echarts-tooltip';
	        this._tDom.style.position = 'absolute';  // 不是多余的，别删！
	        this.hasAppend = false;
	        
	        this._axisLineShape && this.zr.delShape(this._axisLineShape.id);
	        this._axisLineShape = new LineShape({
	            zlevel: this.getZlevelBase(),
	            z: this.getZBase(),
	            invisible: true,
	            hoverable: false
	        });
	        this.shapeList.push(this._axisLineShape);
	        this.zr.addShape(this._axisLineShape);
	        
	        this._axisShadowShape && this.zr.delShape(this._axisShadowShape.id);
	        this._axisShadowShape = new LineShape({
	            zlevel: this.getZlevelBase(),
	            z: 1,                      // grid上，chart下
	            invisible: true,
	            hoverable: false
	        });
	        this.shapeList.push(this._axisShadowShape);
	        this.zr.addShape(this._axisShadowShape);
	        
	        this._axisCrossShape && this.zr.delShape(this._axisCrossShape.id);
	        this._axisCrossShape = new CrossShape({
	            zlevel: this.getZlevelBase(),
	            z: this.getZBase(),
	            invisible: true,
	            hoverable: false
	        });
	        this.shapeList.push(this._axisCrossShape);
	        this.zr.addShape(this._axisCrossShape);
	        
	        this.showing = false;
	        this.refresh(option);
	    }
	    
	    Tooltip.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TOOLTIP,
	        // 通用样式
	        _gCssText: 'position:absolute;display:block;border-style:solid;white-space:nowrap;',
	        /**
	         * 根据配置设置dom样式
	         */
	        _style: function (opt) {
	            if (!opt) {
	                return '';
	            }
	            var cssText = [];
	            if (opt.transitionDuration) {
	                var transitionText = 'left ' + opt.transitionDuration + 's,'
	                                    + 'top ' + opt.transitionDuration + 's';
	                cssText.push(
	                    'transition:' + transitionText
	                );
	                cssText.push(
	                    '-moz-transition:' + transitionText
	                );
	                cssText.push(
	                    '-webkit-transition:' + transitionText
	                );
	                cssText.push(
	                    '-o-transition:' + transitionText
	                );
	            }
	
	            if (opt.backgroundColor) {
	                // for sb ie~
	                cssText.push(
	                    'background-Color:' + zrColor.toHex(
	                        opt.backgroundColor
	                    )
	                );
	                cssText.push('filter:alpha(opacity=70)');
	                cssText.push('background-Color:' + opt.backgroundColor);
	            }
	
	            if (opt.borderWidth != null) {
	                cssText.push('border-width:' + opt.borderWidth + 'px');
	            }
	
	            if (opt.borderColor != null) {
	                cssText.push('border-color:' + opt.borderColor);
	            }
	
	            if (opt.borderRadius != null) {
	                cssText.push(
	                    'border-radius:' + opt.borderRadius + 'px'
	                );
	                cssText.push(
	                    '-moz-border-radius:' + opt.borderRadius + 'px'
	                );
	                cssText.push(
	                    '-webkit-border-radius:' + opt.borderRadius + 'px'
	                );
	                cssText.push(
	                    '-o-border-radius:' + opt.borderRadius + 'px'
	                );
	            }
	
	            var textStyle = opt.textStyle;
	            if (textStyle) {
	                textStyle.color && cssText.push('color:' + textStyle.color);
	                textStyle.decoration && cssText.push(
	                    'text-decoration:' + textStyle.decoration
	                );
	                textStyle.align && cssText.push(
	                    'text-align:' + textStyle.align
	                );
	                textStyle.fontFamily && cssText.push(
	                    'font-family:' + textStyle.fontFamily
	                );
	                textStyle.fontSize && cssText.push(
	                    'font-size:' + textStyle.fontSize + 'px'
	                );
	                textStyle.fontSize && cssText.push(
	                    'line-height:' + Math.round(textStyle.fontSize*3/2) + 'px'
	                );
	                textStyle.fontStyle && cssText.push(
	                    'font-style:' + textStyle.fontStyle
	                );
	                textStyle.fontWeight && cssText.push(
	                    'font-weight:' + textStyle.fontWeight
	                );
	            }
	
	
	            var padding = opt.padding;
	            if (padding != null) {
	                padding = this.reformCssArray(padding);
	                cssText.push(
	                    'padding:' + padding[0] + 'px '
	                               + padding[1] + 'px '
	                               + padding[2] + 'px '
	                               + padding[3] + 'px'
	                );
	            }
	
	            cssText = cssText.join(';') + ';';
	
	            return cssText;
	        },
	        
	        __hide: function () {
	            this._lastDataIndex = -1;
	            this._lastSeriesIndex = -1;
	            this._lastItemTriggerId = -1;
	            if (this._tDom) {
	                this._tDom.style.display = 'none';
	            }
	            var needRefresh = false;
	            if (!this._axisLineShape.invisible) {
	                this._axisLineShape.invisible = true;
	                this.zr.modShape(this._axisLineShape.id);
	                needRefresh = true;
	            }
	            if (!this._axisShadowShape.invisible) {
	                this._axisShadowShape.invisible = true;
	                this.zr.modShape(this._axisShadowShape.id);
	                needRefresh = true;
	            }
	            if (!this._axisCrossShape.invisible) {
	                this._axisCrossShape.invisible = true;
	                this.zr.modShape(this._axisCrossShape.id);
	                needRefresh = true;
	            }
	            if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                this.zr.delShape(this._lastTipShape.tipShape);
	                this._lastTipShape = false;
	                this.shapeList.length = 2;
	            }
	            needRefresh && this.zr.refreshNextFrame();
	            this.showing = false;
	        },
	        
	        _show: function (position, x, y, specialCssText) {
	            var domHeight = this._tDom.offsetHeight;
	            var domWidth = this._tDom.offsetWidth;
	            if (position) {
	                if (typeof position === 'function') {
	                    position = position([x, y]);
	                }
	                if (position instanceof Array) {
	                    x = position[0];
	                    y = position[1];
	                }
	            }
	            if (x + domWidth > this._zrWidth) {
	                // 太靠右
	                //x = this._zrWidth - domWidth;
	                x -= (domWidth + 40);
	            }
	            if (y + domHeight > this._zrHeight) {
	                // 太靠下
	                //y = this._zrHeight - domHeight;
	                y -= (domHeight - 20);
	            }
	            if (y < 20) {
	                y = 0;
	            }
	            this._tDom.style.cssText = this._gCssText
	                                  + this._defaultCssText
	                                  + (specialCssText ? specialCssText : '')
	                                  + 'left:' + x + 'px;top:' + y + 'px;';
	            
	            if (domHeight < 10 || domWidth < 10) {
	                // this._zrWidth - x < 100 || this._zrHeight - y < 100
	                setTimeout(this._refixed, 20);
	            }
	            this.showing = true;
	        },
	        
	        __refixed: function () {
	            if (this._tDom) {
	                var cssText = '';
	                var domHeight = this._tDom.offsetHeight;
	                var domWidth = this._tDom.offsetWidth;
	                if (this._tDom.offsetLeft + domWidth > this._zrWidth) {
	                    cssText += 'left:' + (this._zrWidth - domWidth - 20) + 'px;';
	                }
	                if (this._tDom.offsetTop + domHeight > this._zrHeight) {
	                    cssText += 'top:' + (this._zrHeight - domHeight - 10) + 'px;';
	                }
	                if (cssText !== '') {
	                    this._tDom.style.cssText += cssText;
	                }
	            }
	        },
	        
	        __tryShow: function () {
	            var needShow;
	            var trigger;
	            if (!this._curTarget) {
	                // 坐标轴事件
	                this._findPolarTrigger() || this._findAxisTrigger();
	            }
	            else {
	                // 数据项事件
	                if (this._curTarget._type === 'island' && this.option.tooltip.show) {
	                    this._showItemTrigger();
	                    return;
	                }
	                var serie = ecData.get(this._curTarget, 'series');
	                var data = ecData.get(this._curTarget, 'data');
	                needShow = this.deepQuery(
	                    [data, serie, this.option],
	                    'tooltip.show'
	                );
	                if (serie == null || data == null || !needShow) {
	                    // 不响应tooltip的数据对象延时隐藏
	                    clearTimeout(this._hidingTicket);
	                    clearTimeout(this._showingTicket);
	                    this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                }
	                else {
	                    trigger = this.deepQuery(
	                        [data, serie, this.option],
	                        'tooltip.trigger'
	                    );
	                    
	                    trigger === 'axis'
	                                ? this._showAxisTrigger(
	                                      serie.xAxisIndex, serie.yAxisIndex,
	                                      ecData.get(this._curTarget, 'dataIndex')
	                                  )
	                                : this._showItemTrigger();
	                }
	            }
	        },
	
	        /**
	         * 直角系 
	         */
	        _findAxisTrigger: function () {
	            if (!this.component.xAxis || !this.component.yAxis) {
	                this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                return;
	            }
	            var series = this.option.series;
	            var xAxisIndex;
	            var yAxisIndex;
	            for (var i = 0, l = series.length; i < l; i++) {
	                // 找到第一个axis触发tooltip的系列
	                if (this.deepQuery([series[i], this.option], 'tooltip.trigger') === 'axis') {
	                    xAxisIndex = series[i].xAxisIndex || 0;
	                    yAxisIndex = series[i].yAxisIndex || 0;
	                    if (this.component.xAxis.getAxis(xAxisIndex)
	                        && this.component.xAxis.getAxis(xAxisIndex).type
	                           === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                    ) {
	                        // 横轴为类目轴
	                        this._showAxisTrigger(xAxisIndex, yAxisIndex,
	                            this._getNearestDataIndex(
	                                'x', this.component.xAxis.getAxis(xAxisIndex)
	                            )
	                        );
	                        return;
	                    } 
	                    else if (this.component.yAxis.getAxis(yAxisIndex)
	                             && this.component.yAxis.getAxis(yAxisIndex).type
	                                === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                    ) {
	                        // 纵轴为类目轴
	                        this._showAxisTrigger(xAxisIndex, yAxisIndex,
	                            this._getNearestDataIndex(
	                                'y', this.component.yAxis.getAxis(yAxisIndex)
	                            )
	                        );
	                        return;
	                    }
	                    else {
	                        // 双数值轴
	                        this._showAxisTrigger(xAxisIndex, yAxisIndex, -1);
	                        return;
	                    }
	                }
	            }
	            if (this.option.tooltip.axisPointer.type === 'cross') {
	                this._showAxisTrigger(-1, -1, -1);
	            }
	        },
	        
	        /**
	         * 极坐标 
	         */
	        _findPolarTrigger: function () {
	            if (!this.component.polar) {
	                return false;
	            }
	            var x = zrEvent.getX(this._event);
	            var y = zrEvent.getY(this._event);
	            var polarIndex = this.component.polar.getNearestIndex([x, y]);
	            var valueIndex;
	            if (polarIndex) {
	                valueIndex = polarIndex.valueIndex;
	                polarIndex = polarIndex.polarIndex;
	            }
	            else {
	                polarIndex = -1;
	            }
	            
	            if (polarIndex != -1) {
	                return this._showPolarTrigger(polarIndex, valueIndex);
	            }
	            
	            return false;
	        },
	        
	        /**
	         * 根据坐标轴事件带的属性获取最近的axisDataIndex
	         */
	        _getNearestDataIndex: function (direction, categoryAxis) {
	            var dataIndex = -1;
	            var x = zrEvent.getX(this._event);
	            var y = zrEvent.getY(this._event);
	            if (direction === 'x') {
	                // 横轴为类目轴
	                var left;
	                var right;
	                var xEnd = this.component.grid.getXend();
	                var curCoord = categoryAxis.getCoordByIndex(dataIndex);
	                while (curCoord < xEnd) {
	                    right = curCoord;
	                    if (curCoord <= x) {
	                        left = curCoord;
	                    }
	                    else {
	                        break;
	                    }
	                    curCoord = categoryAxis.getCoordByIndex(++dataIndex);
	                }
	                if (dataIndex <= 0) {
	                    dataIndex = 0;
	                }
	                else if (x - left <= right - x) {
	                    dataIndex -= 1;
	                }
	                else {
	                    // 离右边近，看是否为最后一个
	                    if (categoryAxis.getNameByIndex(dataIndex) == null) {
	                        dataIndex -= 1;
	                    }
	                }
	                return dataIndex;
	            }
	            else {
	                // 纵轴为类目轴
	                var top;
	                var bottom;
	                var yStart = this.component.grid.getY();
	                var curCoord = categoryAxis.getCoordByIndex(dataIndex);
	                while (curCoord > yStart) {
	                    top = curCoord;
	                    if (curCoord >= y) {
	                        bottom = curCoord;
	                    }
	                    else {
	                        break;
	                    }
	                    curCoord = categoryAxis.getCoordByIndex(++dataIndex);
	                }
	
	                if (dataIndex <= 0) {
	                    dataIndex = 0;
	                }
	                else if (y - top >= bottom - y) {
	                    dataIndex -= 1;
	                }
	                else {
	                    // 离上方边近，看是否为最后一个
	                    if (categoryAxis.getNameByIndex(dataIndex) == null) {
	                        dataIndex -= 1;
	                    }
	                }
	                return dataIndex;
	            }
	            return -1;
	        },
	
	        /**
	         * 直角系 
	         */
	        _showAxisTrigger: function (xAxisIndex, yAxisIndex, dataIndex) {
	            !this._event.connectTrigger && this.messageCenter.dispatch(
	                ecConfig.EVENT.TOOLTIP_IN_GRID,
	                this._event,
	                null,
	                this.myChart
	            );
	            if (this.component.xAxis == null
	                || this.component.yAxis == null
	                || xAxisIndex == null
	                || yAxisIndex == null
	                // || dataIndex < 0
	            ) {
	                // 不响应tooltip的数据对象延时隐藏
	                clearTimeout(this._hidingTicket);
	                clearTimeout(this._showingTicket);
	                this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                return;
	            }
	            var series = this.option.series;
	            var seriesArray = [];
	            var seriesIndex = [];
	            var categoryAxis;
	
	            var formatter;
	            var position;
	            var showContent;
	            var specialCssText = '';
	            if (this.option.tooltip.trigger === 'axis') {
	                if (!this.option.tooltip.show) {
	                    return;
	                }
	                formatter = this.option.tooltip.formatter;
	                position = this.option.tooltip.position;
	            }
	
	            var axisLayout = xAxisIndex != -1
	                             && this.component.xAxis.getAxis(xAxisIndex).type
	                                === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                             ? 'xAxis'      // 横轴为类目轴，找到所有用这条横轴并且axis触发的系列数据
	                             : yAxisIndex != -1
	                               && this.component.yAxis.getAxis(yAxisIndex).type
	                                  === ecConfig.COMPONENT_TYPE_AXIS_CATEGORY
	                               ? 'yAxis'    // 纵轴为类目轴，找到所有用这条纵轴并且axis触发的系列数据
	                               : false;
	            var x;
	            var y;
	            if (axisLayout) {
	                var axisIndex = axisLayout == 'xAxis' ? xAxisIndex : yAxisIndex;
	                categoryAxis = this.component[axisLayout].getAxis(axisIndex);
	                for (var i = 0, l = series.length; i < l; i++) {
	                    if (!this._isSelected(series[i].name)) {
	                        continue;
	                    }
	                    if (series[i][axisLayout + 'Index'] === axisIndex
	                        && this.deepQuery([series[i], this.option], 'tooltip.trigger') === 'axis'
	                    ) {
	                        showContent = this.query(series[i], 'tooltip.showContent') 
	                                      || showContent;
	                        formatter = this.query(series[i], 'tooltip.formatter') 
	                                    || formatter;
	                        position = this.query(series[i], 'tooltip.position') 
	                                   || position;
	                        
	                        specialCssText += this._style(this.query(series[i], 'tooltip'));
	                        if (series[i].stack != null && axisLayout == 'xAxis') {
	                            seriesArray.unshift(series[i]);
	                            seriesIndex.unshift(i);
	                        }
	                        else {
	                            seriesArray.push(series[i]);
	                            seriesIndex.push(i);
	                        }
	                    }
	                }
	                
	                // 寻找高亮元素
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.TOOLTIP_HOVER,
	                    this._event,
	                    {
	                        seriesIndex: seriesIndex,
	                        dataIndex: dataIndex
	                    },
	                    this.myChart
	                );
	                
	                var rect;
	                if (axisLayout == 'xAxis') {
	                    x = this.subPixelOptimize(
	                        categoryAxis.getCoordByIndex(dataIndex),
	                        this._axisLineWidth
	                    );
	                    y = zrEvent.getY(this._event);
	                    rect = [
	                        x, this.component.grid.getY(), 
	                        x, this.component.grid.getYend()
	                    ];
	                }
	                else {
	                    x = zrEvent.getX(this._event);
	                    y = this.subPixelOptimize(
	                        categoryAxis.getCoordByIndex(dataIndex),
	                        this._axisLineWidth
	                    );
	                    rect = [
	                        this.component.grid.getX(), y, 
	                        this.component.grid.getXend(), y
	                    ];
	                }
	                this._styleAxisPointer(
	                    seriesArray,
	                    rect[0], rect[1], rect[2], rect[3],
	                    categoryAxis.getGap(), x, y
	                );
	            }
	            else {
	                // 双数值轴
	                x = zrEvent.getX(this._event);
	                y = zrEvent.getY(this._event);
	                this._styleAxisPointer(
	                    series,
	                    this.component.grid.getX(), y, 
	                    this.component.grid.getXend(), y,
	                    0, x, y
	                );
	                if (dataIndex >= 0) {
	                    this._showItemTrigger(true);
	                }
	                else {
	                    clearTimeout(this._hidingTicket);
	                    clearTimeout(this._showingTicket);
	                    this._tDom.style.display = 'none';
	                }
	            }
	
	            if (seriesArray.length > 0) {
	                // 复位item trigger和axis trigger间短距离来回变换时的不响应
	                this._lastItemTriggerId = -1;
	                // 相同dataIndex seriesIndex时不再触发内容更新
	                if (this._lastDataIndex != dataIndex || this._lastSeriesIndex != seriesIndex[0]) {
	                    this._lastDataIndex = dataIndex;
	                    this._lastSeriesIndex = seriesIndex[0];
	                    var data;
	                    var value;
	                    if (typeof formatter === 'function') {
	                        var params = [];
	                        for (var i = 0, l = seriesArray.length; i < l; i++) {
	                            data = seriesArray[i].data[dataIndex];
	                            value = this.getDataFromOption(data, '-');
	                            
	                            params.push({
	                                seriesIndex: seriesIndex[i],
	                                seriesName: seriesArray[i].name || '',
	                                series: seriesArray[i],
	                                dataIndex: dataIndex,
	                                data: data,
	                                name: categoryAxis.getNameByIndex(dataIndex),
	                                value: value,
	                                // 向下兼容
	                                0: seriesArray[i].name || '',
	                                1: categoryAxis.getNameByIndex(dataIndex),
	                                2: value,
	                                3: data
	                            });
	                        }
	                        this._curTicket = 'axis:' + dataIndex;
	                        this._tDom.innerHTML = formatter.call(
	                            this.myChart, params, this._curTicket, this._setContent
	                        );
	                    }
	                    else if (typeof formatter === 'string') {
	                        this._curTicket = NaN;
	                        formatter = formatter.replace('{a}','{a0}')
	                                             .replace('{b}','{b0}')
	                                             .replace('{c}','{c0}');
	                        for (var i = 0, l = seriesArray.length; i < l; i++) {
	                            formatter = formatter.replace(
	                                '{a' + i + '}',
	                                this._encodeHTML(seriesArray[i].name || '')
	                            );
	                            formatter = formatter.replace(
	                                '{b' + i + '}',
	                                this._encodeHTML(categoryAxis.getNameByIndex(dataIndex))
	                            );
	                            data = seriesArray[i].data[dataIndex];
	                            data = this.getDataFromOption(data, '-');
	                            formatter = formatter.replace(
	                                '{c' + i + '}',
	                                data instanceof Array 
	                                ? data : this.numAddCommas(data)
	                            );
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                    else {
	                        this._curTicket = NaN;
	                        formatter = this._encodeHTML(
	                            categoryAxis.getNameByIndex(dataIndex)
	                        );
	    
	                        for (var i = 0, l = seriesArray.length; i < l; i++) {
	                            formatter += '<br/>' 
	                                         + this._encodeHTML(seriesArray[i].name || '')
	                                         + ' : ';
	                            data = seriesArray[i].data[dataIndex];
	                            data = this.getDataFromOption(data, '-');
	                            formatter += data instanceof Array 
	                                         ? data : this.numAddCommas(data);
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                }
	
	                // don't modify, just false, showContent == undefined == true
	                if (showContent === false || !this.option.tooltip.showContent) {
	                    // 只用tooltip的行为，不显示主体
	                    return;
	                }
	                
	                if (!this.hasAppend) {
	                    this._tDom.style.left = this._zrWidth / 2 + 'px';
	                    this._tDom.style.top = this._zrHeight / 2 + 'px';
	                    this.dom.firstChild.appendChild(this._tDom);
	                    this.hasAppend = true;
	                }
	                this._show(position, x + 10, y + 10, specialCssText);
	            }
	        },
	        
	        /**
	         * 极坐标 
	         */
	        _showPolarTrigger: function (polarIndex, dataIndex) {
	            if (this.component.polar == null
	                || polarIndex == null
	                || dataIndex == null
	                || dataIndex < 0
	            ) {
	                return false;
	            }
	            var series = this.option.series;
	            var seriesArray = [];
	            var seriesIndex = [];
	
	            var formatter;
	            var position;
	            var showContent;
	            var specialCssText = '';
	            if (this.option.tooltip.trigger === 'axis') {
	                if (!this.option.tooltip.show) {
	                    return false;
	                }
	                formatter = this.option.tooltip.formatter;
	                position = this.option.tooltip.position;
	            }
	            var indicatorName = this.option.polar[polarIndex].indicator[dataIndex].text;
	
	            // 找到所有用这个极坐标并且axis触发的系列数据
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (!this._isSelected(series[i].name)) {
	                    continue;
	                }
	                if (series[i].polarIndex === polarIndex
	                    && this.deepQuery([series[i], this.option], 'tooltip.trigger') === 'axis'
	                ) {
	                    showContent = this.query(series[i], 'tooltip.showContent') 
	                                  || showContent;
	                    formatter = this.query(series[i], 'tooltip.formatter') 
	                                || formatter;
	                    position = this.query(series[i], 'tooltip.position') 
	                               || position;
	                    specialCssText += this._style(this.query(series[i], 'tooltip'));
	                    seriesArray.push(series[i]);
	                    seriesIndex.push(i);
	                }
	            }
	            if (seriesArray.length > 0) {
	                var polarData;
	                var data;
	                var value;
	                var params = [];
	
	                for (var i = 0, l = seriesArray.length; i < l; i++) {
	                    polarData = seriesArray[i].data;
	                    for (var j = 0, k = polarData.length; j < k; j++) {
	                        data = polarData[j];
	                        if (!this._isSelected(data.name)) {
	                            continue;
	                        }
	                        data = data != null
	                               ? data
	                               : {name:'', value: {dataIndex:'-'}};
	                        value = this.getDataFromOption(data.value[dataIndex]);
	                        params.push({
	                            seriesIndex: seriesIndex[i],
	                            seriesName: seriesArray[i].name || '',
	                            series: seriesArray[i],
	                            dataIndex: dataIndex,
	                            data: data,
	                            name: data.name,
	                            indicator: indicatorName,
	                            value: value,
	                            // 向下兼容
	                            0: seriesArray[i].name || '',
	                            1: data.name,
	                            2: value,
	                            3: indicatorName
	                        });
	                    }
	                }
	                if (params.length <= 0) {
	                    return;
	                }
	                // 复位item trigger和axis trigger间短距离来回变换时的不响应
	                this._lastItemTriggerId = -1;
	
	                // 相同dataIndex seriesIndex时不再触发内容更新
	                if (this._lastDataIndex != dataIndex || this._lastSeriesIndex != seriesIndex[0]) {
	                    this._lastDataIndex = dataIndex;
	                    this._lastSeriesIndex = seriesIndex[0];
	                    if (typeof formatter === 'function') {
	                        this._curTicket = 'axis:' + dataIndex;
	                        this._tDom.innerHTML = formatter.call(
	                            this.myChart, params, this._curTicket, this._setContent
	                        );
	                    }
	                    else if (typeof formatter === 'string') {
	                        formatter = formatter.replace('{a}','{a0}')
	                                             .replace('{b}','{b0}')
	                                             .replace('{c}','{c0}')
	                                             .replace('{d}','{d0}');
	                        for (var i = 0, l = params.length; i < l; i++) {
	                            formatter = formatter.replace(
	                                '{a' + i + '}',
	                                this._encodeHTML(params[i].seriesName)
	                            );
	                            formatter = formatter.replace(
	                                '{b' + i + '}',
	                                this._encodeHTML(params[i].name)
	                            );
	                            formatter = formatter.replace(
	                                '{c' + i + '}',
	                                this.numAddCommas(params[i].value)
	                            );
	                            formatter = formatter.replace(
	                                '{d' + i + '}',
	                                this._encodeHTML(params[i].indicator)
	                            );
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                    else {
	                        formatter = this._encodeHTML(params[0].name) + '<br/>' 
	                                    + this._encodeHTML(params[0].indicator) + ' : ' 
	                                    + this.numAddCommas(params[0].value);
	                        for (var i = 1, l = params.length; i < l; i++) {
	                            formatter += '<br/>' + this._encodeHTML(params[i].name) 
	                                         + '<br/>';
	                            formatter += this._encodeHTML(params[i].indicator) + ' : ' 
	                                         + this.numAddCommas(params[i].value);
	                        }
	                        this._tDom.innerHTML = formatter;
	                    }
	                }
	
	                // don't modify, just false, showContent == undefined == true
	                if (showContent === false || !this.option.tooltip.showContent) {
	                    // 只用tooltip的行为，不显示主体
	                    return;
	                }
	                
	                if (!this.hasAppend) {
	                    this._tDom.style.left = this._zrWidth / 2 + 'px';
	                    this._tDom.style.top = this._zrHeight / 2 + 'px';
	                    this.dom.firstChild.appendChild(this._tDom);
	                    this.hasAppend = true;
	                }
	                this._show(
	                    position,
	                    zrEvent.getX(this._event), 
	                    zrEvent.getY(this._event), 
	                    specialCssText
	                );
	                return true;
	            }
	        },
	        
	        /**
	         * @parma {boolean} axisTrigger 
	         */
	        _showItemTrigger: function (axisTrigger) {
	            if (!this._curTarget) {
	                return;
	            }
	            var serie = ecData.get(this._curTarget, 'series');
	            var seriesIndex = ecData.get(this._curTarget, 'seriesIndex');
	            var data = ecData.get(this._curTarget, 'data');
	            var dataIndex = ecData.get(this._curTarget, 'dataIndex');
	            var name = ecData.get(this._curTarget, 'name');
	            var value = ecData.get(this._curTarget, 'value');
	            var special = ecData.get(this._curTarget, 'special');
	            var special2 = ecData.get(this._curTarget, 'special2');
	            var queryTarget = [data, serie, this.option];
	            // 从低优先级往上找到trigger为item的formatter和样式
	            var formatter;
	            var position;
	            var showContent;
	            var specialCssText = '';
	            if (this._curTarget._type != 'island') {
	                // 全局
	                var trigger = axisTrigger ? 'axis' : 'item';
	                if (this.option.tooltip.trigger === trigger) {
	                    formatter = this.option.tooltip.formatter;
	                    position = this.option.tooltip.position;
	                }
	                // 系列
	                if (this.query(serie, 'tooltip.trigger') === trigger) {
	                    showContent = this.query(serie, 'tooltip.showContent') || showContent;
	                    formatter = this.query(serie, 'tooltip.formatter') || formatter;
	                    position = this.query(serie, 'tooltip.position') || position;
	                    specialCssText += this._style(this.query(serie, 'tooltip'));
	                }
	                // 数据项
	                showContent = this.query(data, 'tooltip.showContent') || showContent;
	                formatter = this.query(data, 'tooltip.formatter') || formatter;
	                position = this.query(data, 'tooltip.position') || position;
	                specialCssText += this._style(this.query(data, 'tooltip'));
	            }
	            else {
	                this._lastItemTriggerId = NaN;
	                showContent = this.deepQuery(queryTarget, 'tooltip.showContent');
	                formatter = this.deepQuery(queryTarget, 'tooltip.islandFormatter');
	                position = this.deepQuery(queryTarget, 'tooltip.islandPosition');
	            }
	
	            // 复位item trigger和axis trigger间短距离来回变换时的不响应
	            this._lastDataIndex = -1;
	            this._lastSeriesIndex = -1;
	
	            // 相同dataIndex seriesIndex时不再触发内容更新
	            if (this._lastItemTriggerId !== this._curTarget.id) {
	                this._lastItemTriggerId = this._curTarget.id;
	                if (typeof formatter === 'function') {
	                    this._curTicket = (serie.name || '') + ':' + dataIndex;
	                    this._tDom.innerHTML = formatter.call(
	                        this.myChart,
	                        {
	                            seriesIndex: seriesIndex,
	                            seriesName: serie.name || '',
	                            series: serie,
	                            dataIndex: dataIndex,
	                            data: data,
	                            name: name,
	                            value: value,
	                            percent: special,   // 饼图
	                            indicator: special, // 雷达图
	                            value2: special2,
	                            indicator2: special2,
	                            // 向下兼容
	                            0: serie.name || '',
	                            1: name,
	                            2: value,
	                            3: special,
	                            4: special2,
	                            5: data,
	                            6: seriesIndex,
	                            7: dataIndex
	                        },
	                        this._curTicket,
	                        this._setContent
	                    );
	                }
	                else if (typeof formatter === 'string') {
	                    this._curTicket = NaN;
	                    formatter = formatter.replace('{a}', '{a0}')
	                                         .replace('{b}', '{b0}')
	                                         .replace('{c}', '{c0}');
	                    formatter = formatter.replace('{a0}', this._encodeHTML(serie.name || ''))
	                                         .replace('{b0}', this._encodeHTML(name))
	                                         .replace(
	                                             '{c0}',
	                                             value instanceof Array ? value : this.numAddCommas(value)
	                                         );
	    
	                    formatter = formatter.replace('{d}', '{d0}')
	                                         .replace('{d0}', special || '');
	                    formatter = formatter.replace('{e}', '{e0}')
	                                         .replace(
	                                             '{e0}',
	                                             ecData.get(this._curTarget, 'special2') || ''
	                                         );
	    
	                    this._tDom.innerHTML = formatter;
	                }
	                else {
	                    this._curTicket = NaN;
	                    if (serie.type === ecConfig.CHART_TYPE_RADAR && special) {
	                        this._tDom.innerHTML = this._itemFormatter.radar.call(
	                            this, serie, name, value, special
	                        );
	                    }
	                    // chord 处理暂时跟 force 一样
	                    // else if (serie.type === ecConfig.CHART_TYPE_CHORD) {
	                    //     this._tDom.innerHTML = this._itemFormatter.chord.call(
	                    //         this, serie, name, value, special, special2
	                    //     );
	                    // }
	                    else if (serie.type === ecConfig.CHART_TYPE_EVENTRIVER) {
	                        this._tDom.innerHTML = this._itemFormatter.eventRiver.call(
	                            this, serie, name, value, data
	                        );
	                    }
	                    else {
	                        this._tDom.innerHTML = ''
	                            + (serie.name != null ? (this._encodeHTML(serie.name) + '<br/>') : '')
	                            + (name === '' ? '' : (this._encodeHTML(name) + ' : '))
	                            + (value instanceof Array ? value : this.numAddCommas(value));
	                    }
	                }
	            }
	
	            var x = zrEvent.getX(this._event);
	            var y = zrEvent.getY(this._event);
	            if (this.deepQuery(queryTarget, 'tooltip.axisPointer.show') 
	                && this.component.grid
	            ) {
	                this._styleAxisPointer(
	                    [serie],
	                    this.component.grid.getX(), y, 
	                    this.component.grid.getXend(), y,
	                    0, x, y
	                );
	            }
	            else {
	                this._hide();
	            }
	            
	            // don't modify, just false, showContent == undefined == true
	            if (showContent === false || !this.option.tooltip.showContent) {
	                // 只用tooltip的行为，不显示主体
	                return;
	            }
	            
	            if (!this.hasAppend) {
	                this._tDom.style.left = this._zrWidth / 2 + 'px';
	                this._tDom.style.top = this._zrHeight / 2 + 'px';
	                this.dom.firstChild.appendChild(this._tDom);
	                this.hasAppend = true;
	            }
	            
	            this._show(position, x + 20, y - 20, specialCssText);
	        },
	
	        _itemFormatter: {
	            radar: function(serie, name, value, indicator){
	                var html = '';
	                html += this._encodeHTML(name === '' ? (serie.name || '') : name);
	                html += html === '' ? '' : '<br />';
	                for (var i = 0 ; i < indicator.length; i ++) {
	                    html += this._encodeHTML(indicator[i].text) + ' : ' 
	                            + this.numAddCommas(value[i]) + '<br />';
	                }
	                return html;
	            },
	            chord: function(serie, name, value, special, special2) {
	                if (special2 == null) {
	                    // 外环上
	                    return this._encodeHTML(name) + ' (' + this.numAddCommas(value) + ')';
	                }
	                else {
	                    var name1 = this._encodeHTML(name);
	                    var name2 = this._encodeHTML(special);
	                    // 内部弦上
	                    return ''
	                        + (serie.name != null ? (this._encodeHTML(serie.name) + '<br/>') : '')
	                        + name1 + ' -> ' + name2 
	                        + ' (' + this.numAddCommas(value) + ')'
	                        + '<br />'
	                        + name2 + ' -> ' + name1
	                        + ' (' + this.numAddCommas(special2) + ')';
	                }
	            },
	            eventRiver: function(serie, name, value, data) {
	                var html = '';
	                html += this._encodeHTML(serie.name === '' ? '' : (serie.name + ' : ') );
	                html += this._encodeHTML(name);
	                html += html === '' ? '' : '<br />';
	                data = data.evolution;
	                for (var i = 0, l = data.length; i < l; i++) {
	                    html += '<div style="padding-top:5px;">';
	                    if (!data[i].detail) {
	                        continue;
	                    }
	                    if (data[i].detail.img) {
	                        html += '<img src="' + data[i].detail.img 
	                                + '" style="float:left;width:40px;height:40px;">';
	                    }
	                    html += '<div style="margin-left:45px;">' + data[i].time + '<br/>';
	                    html += '<a href="' + data[i].detail.link + '" target="_blank">';
	                    html += data[i].detail.text + '</a></div>';
	                    html += '</div>';
	                }
	                return html;
	            }
	        },
	        
	        /**
	         * 设置坐标轴指示器样式 
	         */
	        _styleAxisPointer: function (seriesArray, xStart, yStart, xEnd, yEnd, gap, x, y) {
	            if (seriesArray.length > 0) {
	                var queryTarget;
	                var curType;
	                var axisPointer = this.option.tooltip.axisPointer;
	                var pointType = axisPointer.type;
	                var style = {
	                    line: {},
	                    cross: {},
	                    shadow: {}
	                };
	                for (var pType in style) {
	                    style[pType].color = axisPointer[pType + 'Style'].color;
	                    style[pType].width = axisPointer[pType + 'Style'].width;
	                    style[pType].type = axisPointer[pType + 'Style'].type;
	                }
	                for (var i = 0, l = seriesArray.length; i < l; i++) {
	                    //if (this.deepQuery([seriesArray[i], this.option], 'tooltip.trigger') === 'axis') {
	                        queryTarget = seriesArray[i];
	                        curType = this.query(queryTarget, 'tooltip.axisPointer.type');
	                        pointType = curType || pointType; 
	                        if (curType) {
	                            style[curType].color = this.query(
	                                queryTarget,
	                                'tooltip.axisPointer.' + curType + 'Style.color'
	                            ) || style[curType].color;
	                            style[curType].width = this.query(
	                                queryTarget,
	                                'tooltip.axisPointer.' + curType + 'Style.width'
	                            ) || style[curType].width;
	                            style[curType].type = this.query(
	                                queryTarget,
	                                'tooltip.axisPointer.' + curType + 'Style.type'
	                            ) || style[curType].type;
	                        }
	                    //}
	                }
	                
	                if (pointType === 'line') {
	                    var lineWidth = style.line.width;
	                    var isVertical = xStart == xEnd;
	                    this._axisLineShape.style = {
	                        xStart: isVertical ? this.subPixelOptimize(xStart, lineWidth) : xStart,
	                        yStart: isVertical ? yStart : this.subPixelOptimize(yStart, lineWidth),
	                        xEnd: isVertical ? this.subPixelOptimize(xEnd, lineWidth) : xEnd,
	                        yEnd: isVertical ? yEnd : this.subPixelOptimize(yEnd, lineWidth),
	                        strokeColor: style.line.color,
	                        lineWidth: lineWidth,
	                        lineType: style.line.type
	                    };
	                    this._axisLineShape.invisible = false;
	                    this.zr.modShape(this._axisLineShape.id);
	                }
	                else if (pointType === 'cross') {
	                    var crossWidth = style.cross.width;
	                    this._axisCrossShape.style = {
	                        brushType: 'stroke',
	                        rect: this.component.grid.getArea(),
	                        x: this.subPixelOptimize(x, crossWidth),
	                        y: this.subPixelOptimize(y, crossWidth),
	                        text: ('( ' 
	                               + this.component.xAxis.getAxis(0).getValueFromCoord(x)
	                               + ' , '
	                               + this.component.yAxis.getAxis(0).getValueFromCoord(y) 
	                               + ' )'
	                              ).replace('  , ', ' ').replace(' ,  ', ' '),
	                        textPosition: 'specific',
	                        strokeColor: style.cross.color,
	                        lineWidth: crossWidth,
	                        lineType: style.cross.type
	                    };
	                    if (this.component.grid.getXend() - x > 100) {          // 右侧有空间
	                        this._axisCrossShape.style.textAlign = 'left';
	                        this._axisCrossShape.style.textX = x + 10;
	                    }
	                    else {
	                        this._axisCrossShape.style.textAlign = 'right';
	                        this._axisCrossShape.style.textX = x - 10;
	                    }
	                    if (y - this.component.grid.getY() > 50) {             // 上方有空间
	                        this._axisCrossShape.style.textBaseline = 'bottom';
	                        this._axisCrossShape.style.textY = y - 10;
	                    }
	                    else {
	                        this._axisCrossShape.style.textBaseline = 'top';
	                        this._axisCrossShape.style.textY = y + 10;
	                    }
	                    this._axisCrossShape.invisible = false;
	                    this.zr.modShape(this._axisCrossShape.id);
	                }
	                else if (pointType === 'shadow') {
	                    if (style.shadow.width == null 
	                        || style.shadow.width === 'auto'
	                        || isNaN(style.shadow.width)
	                    ) {
	                        style.shadow.width = gap;
	                    }
	                    if (xStart === xEnd) {
	                        // 纵向
	                        if (Math.abs(this.component.grid.getX() - xStart) < 2) {
	                            // 最左边
	                            style.shadow.width /= 2;
	                            xStart = xEnd = xEnd + style.shadow.width / 2;
	                        }
	                        else if (Math.abs(this.component.grid.getXend() - xStart) < 2) {
	                            // 最右边
	                            style.shadow.width /= 2;
	                            xStart = xEnd = xEnd - style.shadow.width / 2;
	                        }
	                    }
	                    else if (yStart === yEnd) {
	                        // 横向
	                        if (Math.abs(this.component.grid.getY() - yStart) < 2) {
	                            // 最上边
	                            style.shadow.width /= 2;
	                            yStart = yEnd = yEnd + style.shadow.width / 2;
	                        }
	                        else if (Math.abs(this.component.grid.getYend() - yStart) < 2) {
	                            // 最右边
	                            style.shadow.width /= 2;
	                            yStart = yEnd = yEnd - style.shadow.width / 2;
	                        }
	                    }
	                    this._axisShadowShape.style = {
	                        xStart: xStart,
	                        yStart: yStart,
	                        xEnd: xEnd,
	                        yEnd: yEnd,
	                        strokeColor: style.shadow.color,
	                        lineWidth: style.shadow.width
	                    };
	                    this._axisShadowShape.invisible = false;
	                    this.zr.modShape(this._axisShadowShape.id);
	                }
	                this.zr.refreshNextFrame();
	            }
	        },
	
	        __onmousemove: function (param) {
	            clearTimeout(this._hidingTicket);
	            clearTimeout(this._showingTicket);
	            if (this._mousein && this._enterable) {
	                return;
	            }
	            var target = param.target;
	            var mx = zrEvent.getX(param.event);
	            var my = zrEvent.getY(param.event);
	            if (!target) {
	                // 判断是否落到直角系里，axis触发的tooltip
	                this._curTarget = false;
	                this._event = param.event;
	                // this._event._target = this._event.target || this._event.toElement;
	                this._event.zrenderX = mx;
	                this._event.zrenderY = my;
	                if (this._needAxisTrigger 
	                    && this.component.grid 
	                    && zrArea.isInside(rectangleInstance, this.component.grid.getArea(), mx, my)
	                ) {
	                    this._showingTicket = setTimeout(this._tryShow, this._showDelay);
	                }
	                else if (this._needAxisTrigger 
	                        && this.component.polar 
	                        && this.component.polar.isInside([mx, my]) != -1
	                ) {
	                    this._showingTicket = setTimeout(this._tryShow, this._showDelay);
	                }
	                else {
	                    !this._event.connectTrigger && this.messageCenter.dispatch(
	                        ecConfig.EVENT.TOOLTIP_OUT_GRID,
	                        this._event,
	                        null,
	                        this.myChart
	                    );
	                    this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	                }
	            }
	            else {
	                this._curTarget = target;
	                this._event = param.event;
	                // this._event._target = this._event.target || this._event.toElement;
	                this._event.zrenderX = mx;
	                this._event.zrenderY = my;
	                var polarIndex;
	                if (this._needAxisTrigger 
	                    && this.component.polar 
	                    && (polarIndex = this.component.polar.isInside([mx, my])) != -1
	                ) {
	                    // 看用这个polar的系列数据是否是axis触发，如果是设置_curTarget为nul
	                    var series = this.option.series;
	                    for (var i = 0, l = series.length; i < l; i++) {
	                        if (series[i].polarIndex === polarIndex
	                            && this.deepQuery(
	                                   [series[i], this.option], 'tooltip.trigger'
	                               ) === 'axis'
	                        ) {
	                            this._curTarget = null;
	                            break;
	                        }
	                    }
	                   
	                }
	                this._showingTicket = setTimeout(this._tryShow, this._showDelay);
	            }
	        },
	
	        /**
	         * zrender事件响应：鼠标离开绘图区域
	         */
	        __onglobalout: function () {
	            clearTimeout(this._hidingTicket);
	            clearTimeout(this._showingTicket);
	            this._hidingTicket = setTimeout(this._hide, this._hideDelay);
	        },
	        
	        /**
	         * 异步回调填充内容
	         */
	        __setContent: function (ticket, content) {
	            if (!this._tDom) {
	                return;
	            }
	            if (ticket === this._curTicket) {
	                this._tDom.innerHTML = content;
	            }
	            
	            setTimeout(this._refixed, 20);
	        },
	
	        ontooltipHover: function (param, tipShape) {
	            if (!this._lastTipShape // 不存在或者存在但dataIndex发生变化才需要重绘
	                || (this._lastTipShape && this._lastTipShape.dataIndex != param.dataIndex)
	            ) {
	                if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                    this.zr.delShape(this._lastTipShape.tipShape);
	                    this.shapeList.length = 2;
	                }
	                for (var i = 0, l = tipShape.length; i < l; i++) {
	                    tipShape[i].zlevel = this.getZlevelBase();
	                    tipShape[i].z = this.getZBase();
	                    
	                    tipShape[i].style = zrShapeBase.prototype.getHighlightStyle(
	                        tipShape[i].style,
	                        tipShape[i].highlightStyle
	                    );
	                    tipShape[i].draggable = false;
	                    tipShape[i].hoverable = false;
	                    tipShape[i].clickable = false;
	                    tipShape[i].ondragend = null;
	                    tipShape[i].ondragover = null;
	                    tipShape[i].ondrop = null;
	                    this.shapeList.push(tipShape[i]);
	                    this.zr.addShape(tipShape[i]);
	                }
	                this._lastTipShape = {
	                    dataIndex: param.dataIndex,
	                    tipShape: tipShape
	                };
	            }
	        },
	        
	        ondragend: function () {
	            this._hide();
	        },
	        
	        /**
	         * 图例选择
	         */
	        onlegendSelected: function (param) {
	            this._selectedMap = param.selected;
	        },
	        
	        _setSelectedMap: function () {
	            if (this.component.legend) {
	                this._selectedMap = zrUtil.clone(this.component.legend.getSelectedMap());
	            }
	            else {
	                this._selectedMap = {};
	            }
	        },
	        
	        _isSelected: function (itemName) {
	            if (this._selectedMap[itemName] != null) {
	                return this._selectedMap[itemName];
	            }
	            else {
	                return true; // 没在legend里定义的都为true啊~
	            }
	        },
	
	        /**
	         * 模拟tooltip hover方法
	         * {object} params  参数
	         *          {seriesIndex: 0, seriesName:'', dataInex:0} line、bar、scatter、k、radar
	         *          {seriesIndex: 0, seriesName:'', name:''} map、pie、chord
	         */
	        showTip: function (params) {
	            if (!params) {
	                return;
	            }
	            
	            var seriesIndex;
	            var series = this.option.series;
	            if (params.seriesIndex != null) {
	                seriesIndex = params.seriesIndex;
	            }
	            else {
	                var seriesName = params.seriesName;
	                for (var i = 0, l = series.length; i < l; i++) {
	                    if (series[i].name === seriesName) {
	                        seriesIndex = i;
	                        break;
	                    }
	                }
	            }
	            
	            var serie = series[seriesIndex];
	            if (serie == null) {
	                return;
	            }
	            var chart = this.myChart.chart[serie.type];
	            var isAxisTrigger = this.deepQuery(
	                                    [serie, this.option], 'tooltip.trigger'
	                                ) === 'axis';
	            
	            if (!chart) {
	                return;
	            }
	            
	            if (isAxisTrigger) {
	                // axis trigger
	                var dataIndex = params.dataIndex;
	                switch (chart.type) {
	                    case ecConfig.CHART_TYPE_LINE :
	                    case ecConfig.CHART_TYPE_BAR :
	                    case ecConfig.CHART_TYPE_K :
	                    case ecConfig.CHART_TYPE_RADAR :
	                        if (this.component.polar == null 
	                            || serie.data[0].value.length <= dataIndex
	                        ) {
	                            return;
	                        }
	                        var polarIndex = serie.polarIndex || 0;
	                        var vector = this.component.polar.getVector(
	                            polarIndex, dataIndex, 'max'
	                        );
	                        this._event = {
	                            zrenderX: vector[0],
	                            zrenderY: vector[1]
	                        };
	                        this._showPolarTrigger(
	                            polarIndex, 
	                            dataIndex
	                        );
	                        break;
	                }
	            }
	            else {
	                // item trigger
	                var shapeList = chart.shapeList;
	                var x;
	                var y;
	                switch (chart.type) {
	                    case ecConfig.CHART_TYPE_LINE :
	                    case ecConfig.CHART_TYPE_BAR :
	                    case ecConfig.CHART_TYPE_K :
	                    case ecConfig.CHART_TYPE_TREEMAP :
	                    case ecConfig.CHART_TYPE_SCATTER :
	                        var dataIndex = params.dataIndex;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i]._mark == null
	                                && ecData.get(shapeList[i], 'seriesIndex') == seriesIndex
	                                && ecData.get(shapeList[i], 'dataIndex') == dataIndex
	                            ) {
	                                this._curTarget = shapeList[i];
	                                x = shapeList[i].style.x;
	                                y = chart.type != ecConfig.CHART_TYPE_K 
	                                    ? shapeList[i].style.y : shapeList[i].style.y[0];
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_RADAR :
	                        var dataIndex = params.dataIndex;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'polygon'
	                                && ecData.get(shapeList[i], 'seriesIndex') == seriesIndex
	                                && ecData.get(shapeList[i], 'dataIndex') == dataIndex
	                            ) {
	                                this._curTarget = shapeList[i];
	                                var vector = this.component.polar.getCenter(
	                                    serie.polarIndex || 0
	                                );
	                                x = vector[0];
	                                y = vector[1];
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_PIE :
	                        var name = params.name;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'sector'
	                                && ecData.get(shapeList[i], 'seriesIndex') == seriesIndex
	                                && ecData.get(shapeList[i], 'name') == name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                var style = this._curTarget.style;
	                                var midAngle = (style.startAngle + style.endAngle) 
	                                                / 2 * Math.PI / 180;
	                                x = this._curTarget.style.x + Math.cos(midAngle) * style.r / 1.5;
	                                y = this._curTarget.style.y - Math.sin(midAngle) * style.r / 1.5;
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_MAP :
	                        var name = params.name;
	                        var mapType = serie.mapType;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'text'
	                                && shapeList[i]._mapType === mapType
	                                && shapeList[i].style._name === name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                x = this._curTarget.style.x + this._curTarget.position[0];
	                                y = this._curTarget.style.y + this._curTarget.position[1];
	                                break;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_CHORD:
	                        var name = params.name;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'sector'
	                                && ecData.get(shapeList[i], 'name') == name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                var style = this._curTarget.style;
	                                var midAngle = (style.startAngle + style.endAngle) 
	                                                / 2 * Math.PI / 180;
	                                x = this._curTarget.style.x + Math.cos(midAngle) * (style.r - 2);
	                                y = this._curTarget.style.y - Math.sin(midAngle) * (style.r - 2);
	                                this.zr.trigger(
	                                    zrConfig.EVENT.MOUSEMOVE,
	                                    {
	                                        zrenderX: x,
	                                        zrenderY: y
	                                    }
	                                );
	                                return;
	                            }
	                        }
	                        break;
	                    case ecConfig.CHART_TYPE_FORCE:
	                        var name = params.name;
	                        for (var i = 0, l = shapeList.length; i < l; i++) {
	                            if (shapeList[i].type === 'circle'
	                                && ecData.get(shapeList[i], 'name') == name
	                            ) {
	                                this._curTarget = shapeList[i];
	                                x = this._curTarget.position[0];
	                                y = this._curTarget.position[1];
	                                break;
	                            }
	                        }
	                        break;
	                }
	                if (x != null && y != null) {
	                    this._event = {
	                        zrenderX: x,
	                        zrenderY: y
	                    };
	                    this.zr.addHoverShape(this._curTarget);
	                    this.zr.refreshHover();
	                    this._showItemTrigger();
	                }
	            }
	        },
	        
	        /**
	         * 关闭，公开接口 
	         */
	        hideTip: function () {
	            this._hide();
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            // this._selectedMap;
	            // this._defaultCssText;    // css样式缓存
	            // this._needAxisTrigger;   // 坐标轴触发
	            // this._curTarget;
	            // this._event;
	            // this._curTicket;         // 异步回调标识，用来区分多个请求
	            
	            // 缓存一些高宽数据
	            this._zrHeight = this.zr.getHeight();
	            this._zrWidth = this.zr.getWidth();
	            
	            if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                this.zr.delShape(this._lastTipShape.tipShape);
	            }
	            this._lastTipShape = false;
	            this.shapeList.length = 2;
	            
	            this._lastDataIndex = -1;
	            this._lastSeriesIndex = -1;
	            this._lastItemTriggerId = -1;
	            
	            if (newOption) {
	                this.option = newOption;
	                this.option.tooltip = this.reformOption(this.option.tooltip);
	                
	                this.option.tooltip.textStyle = zrUtil.merge(
	                    this.option.tooltip.textStyle,
	                    this.ecTheme.textStyle
	                );
	                this._needAxisTrigger = false;
	                if (this.option.tooltip.trigger === 'axis') {
	                    this._needAxisTrigger = true;
	                }
	    
	                var series = this.option.series;
	                for (var i = 0, l = series.length; i < l; i++) {
	                    if (this.query(series[i], 'tooltip.trigger') === 'axis') {
	                        this._needAxisTrigger = true;
	                        break;
	                    }
	                }
	                // this._hidingTicket;
	                // this._showingTicket;
	                this._showDelay = this.option.tooltip.showDelay; // 显示延迟
	                this._hideDelay = this.option.tooltip.hideDelay; // 隐藏延迟
	                this._defaultCssText = this._style(this.option.tooltip);
	                
	                this._setSelectedMap();
	                this._axisLineWidth = this.option.tooltip.axisPointer.lineStyle.width;
	                this._enterable = this.option.tooltip.enterable;
	
	                if (! this._enterable && this._tDom.className.indexOf(zrConfig.elementClassName) < 0) {
	                    this._tDom.className += ' ' + zrConfig.elementClassName;
	                }
	            }
	            if (this.showing) {
	                var self = this;
	                setTimeout(function(){
	                    self.zr.trigger(zrConfig.EVENT.MOUSEMOVE, self.zr.handler._event);
	                },50);
	            }
	        },
	
	        /**
	         * 释放后实例不可用，重载基类方法
	         */
	        onbeforDispose: function () {
	            if (this._lastTipShape && this._lastTipShape.tipShape.length > 0) {
	                this.zr.delShape(this._lastTipShape.tipShape);
	            }
	            clearTimeout(this._hidingTicket);
	            clearTimeout(this._showingTicket);
	            this.zr.un(zrConfig.EVENT.MOUSEMOVE, this._onmousemove);
	            this.zr.un(zrConfig.EVENT.GLOBALOUT, this._onglobalout);
	            
	            if (this.hasAppend && !!this.dom.firstChild) {
	                this.dom.firstChild.removeChild(this._tDom);
	            }
	            this._tDom = null;
	        },
	        
	        /**
	         * html转码的方法
	         */
	        _encodeHTML: function (source) {
	            return String(source)
	                        .replace(/&/g, '&amp;')
	                        .replace(/</g, '&lt;')
	                        .replace(/>/g, '&gt;')
	                        .replace(/"/g, '&quot;')
	                        .replace(/'/g, '&#39;');
	        }
	    };
	    
	    zrUtil.inherits(Tooltip, Base);
	    
	    __webpack_require__(229).define('tooltip', Tooltip);
	
	    return Tooltip;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：十字准星
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'cross',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见
	
	       // 样式属性，默认状态样式样式属性
	       style  : {
	           rect      : {Object},  // 必须，对角框
	           x         : {number},  // 必须，横坐标
	           y         : {number},  // 必须，纵坐标
	       },
	
	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }
	
	       // 交互属性，详见shape.Base
	
	       // 事件属性，详见shape.Base
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(185);
	    var LineShape = __webpack_require__(205);
	    var zrUtil = __webpack_require__(168);
	
	    function Cross(options) {
	        Base.call(this, options);
	    }
	
	    Cross.prototype =  {
	        type : 'cross',
	
	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var rect = style.rect;
	            style.xStart = rect.x;
	            style.xEnd = rect.x + rect.width;
	            style.yStart = style.yEnd = style.y;
	            LineShape.prototype.buildPath(ctx, style);
	            style.xStart = style.xEnd = style.x;
	            style.yStart = rect.y;
	            style.yEnd = rect.y + rect.height;
	            LineShape.prototype.buildPath(ctx, style);
	        },
	
	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            return style.rect;
	        },
	
	        isCover : __webpack_require__(212)
	    };
	
	    zrUtil.inherits(Cross, Base);
	
	    return Cross;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：图例
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var TextShape = __webpack_require__(182);
	    var RectangleShape = __webpack_require__(188);
	    var SectorShape = __webpack_require__(234);
	    //var BeziercurveShape = require('zrenderjs/shape/Beziercurve');
	    var IconShape = __webpack_require__(198);
	    var CandleShape = __webpack_require__(236);
	    
	    var ecConfig = __webpack_require__(167);
	     // 图例
	    ecConfig.legend = {
	        zlevel: 0,                  // 一级层叠
	        z: 4,                       // 二级层叠
	        show: true,
	        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：
	                                   // 'horizontal' ¦ 'vertical'
	        x: 'center',               // 水平安放位置，默认为全图居中，可选为：
	                                   // 'center' ¦ 'left' ¦ 'right'
	                                   // ¦ {number}（x坐标，单位px）
	        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：
	                                   // 'top' ¦ 'bottom' ¦ 'center'
	                                   // ¦ {number}（y坐标，单位px）
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderColor: '#ccc',       // 图例边框颜色
	        borderWidth: 0,            // 图例边框线宽，单位px，默认为0（无边框）
	        padding: 5,                // 图例内边距，单位px，默认各方向内边距为5，
	                                   // 接受数组分别设定上右下左边距，同css
	        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，
	                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔
	        itemWidth: 20,             // 图例图形宽度
	        itemHeight: 14,            // 图例图形高度
	        textStyle: {
	            color: '#333'          // 图例文字颜色
	        },
	        selectedMode: true         // 选择模式，默认开启图例开关
	        // selected: null,         // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	        // data: [],               // 图例内容（详见legend.data，数组中每一项代表一个item
	    };
	
	    var zrUtil = __webpack_require__(168);
	    var zrArea = __webpack_require__(183);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     */
	    function Legend(ecTheme, messageCenter, zr, option, myChart) {
	        if (!this.query(option, 'legend.data')) {
	            console.error('option.legend.data has not been defined.');
	            return;
	        }
	        
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        var self = this;
	        self._legendSelected = function (param) {
	            self.__legendSelected(param);
	        };
	        self._dispatchHoverLink = function(param) {
	            return self.__dispatchHoverLink(param);
	        };
	        
	        this._colorIndex = 0;
	        this._colorMap = {};
	        this._selectedMap = {};
	        this._hasDataMap = {};
	        
	        this.refresh(option);
	    }
	    
	    Legend.prototype = {
	        type: ecConfig.COMPONENT_TYPE_LEGEND,
	        _buildShape: function () {
	            if (!this.legendOption.show) {
	                return;
	            }
	            // 图例元素组的位置参数，通过计算所得x, y, width, height
	            this._itemGroupLocation = this._getItemGroupLocation();
	
	            this._buildBackground();
	            this._buildItem();
	
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },
	
	        /**
	         * 构建所有图例元素
	         */
	        _buildItem: function () {
	            var data = this.legendOption.data;
	            var dataLength = data.length;
	            var itemName;
	            var itemType;
	            var itemShape;
	            var textShape;
	            var textStyle  = this.legendOption.textStyle;
	            var dataTextStyle;
	            var dataFont;
	            var formattedName;
	
	            var zrWidth = this.zr.getWidth();
	            var zrHeight = this.zr.getHeight();
	            var lastX = this._itemGroupLocation.x;
	            var lastY = this._itemGroupLocation.y;
	            var itemWidth = this.legendOption.itemWidth;
	            var itemHeight = this.legendOption.itemHeight;
	            var itemGap = this.legendOption.itemGap;
	            var color;
	
	            if (this.legendOption.orient === 'vertical' && this.legendOption.x === 'right') {
	                lastX = this._itemGroupLocation.x
	                        + this._itemGroupLocation.width
	                        - itemWidth;
	            }
	
	            for (var i = 0; i < dataLength; i++) {
	                dataTextStyle = zrUtil.merge(
	                    data[i].textStyle || {},
	                    textStyle
	                );
	                dataFont = this.getFont(dataTextStyle);
	                
	                itemName = this._getName(data[i]);
	                formattedName = this._getFormatterName(itemName);
	                if (itemName === '') { // 别帮我代码优化
	                    if (this.legendOption.orient === 'horizontal') {
	                        lastX = this._itemGroupLocation.x;
	                        lastY += itemHeight + itemGap;
	                    }
	                    else {
	                        this.legendOption.x === 'right'
	                            ? lastX -= this._itemGroupLocation.maxWidth + itemGap
	                            : lastX += this._itemGroupLocation.maxWidth + itemGap;
	                        lastY = this._itemGroupLocation.y;
	                    }
	                    continue;
	                }
	                itemType = data[i].icon || this._getSomethingByName(itemName).type;
	                
	                color = this.getColor(itemName);
	
	                if (this.legendOption.orient === 'horizontal') {
	                    if (zrWidth - lastX < 200   // 最后200px做分行预判
	                        && (itemWidth + 5 + zrArea.getTextWidth(formattedName, dataFont)
	                            // 分行的最后一个不用算itemGap
	                            + (i === dataLength - 1 || data[i + 1] === '' ? 0 : itemGap)
	                           ) >= zrWidth - lastX
	                    ) {
	                        lastX = this._itemGroupLocation.x;
	                        lastY += itemHeight + itemGap;
	                    }
	                }
	                else {
	                    if (zrHeight - lastY < 200   // 最后200px做分行预判
	                        && (itemHeight
	                            // 分行的最后一个不用算itemGap
	                            + (i === dataLength - 1 || data[i + 1] === '' ? 0 : itemGap)
	                           ) 
	                           >= zrHeight - lastY
	                    ) {
	                        this.legendOption.x === 'right'
	                        ? lastX -= this._itemGroupLocation.maxWidth + itemGap
	                        : lastX += this._itemGroupLocation.maxWidth + itemGap;
	                        lastY = this._itemGroupLocation.y;
	                    }
	                }
	
	                // 图形
	                itemShape = this._getItemShapeByType(
	                    lastX, lastY,
	                    itemWidth, itemHeight,
	                    (this._selectedMap[itemName] && this._hasDataMap[itemName] ? color : '#ccc'),
	                    itemType,
	                    color
	                );
	                itemShape._name = itemName;
	                itemShape = new IconShape(itemShape);
	
	                // 文字
	                textShape = {
	                    // shape: 'text',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    style: {
	                        x: lastX + itemWidth + 5,
	                        y: lastY + itemHeight / 2,
	                        color: this._selectedMap[itemName]
	                                ? (dataTextStyle.color === 'auto' ? color : dataTextStyle.color)
	                                : '#ccc',
	                        text: formattedName,
	                        textFont: dataFont,
	                        textBaseline: 'middle'
	                    },
	                    highlightStyle: {
	                        color: color,
	                        brushType: 'fill'
	                    },
	                    hoverable: !!this.legendOption.selectedMode,
	                    clickable: !!this.legendOption.selectedMode
	                };
	
	                if (this.legendOption.orient === 'vertical'
	                    && this.legendOption.x === 'right'
	                ) {
	                    textShape.style.x -= (itemWidth + 10);
	                    textShape.style.textAlign = 'right';
	                }
	
	                textShape._name = itemName;
	                textShape = new TextShape(textShape);
	                
	                if (this.legendOption.selectedMode) {
	                    itemShape.onclick = textShape.onclick = this._legendSelected;
	                    itemShape.onmouseover =  textShape.onmouseover = this._dispatchHoverLink;
	                    itemShape.hoverConnect = textShape.id;
	                    textShape.hoverConnect = itemShape.id;
	                }
	                this.shapeList.push(itemShape);
	                this.shapeList.push(textShape);
	
	                if (this.legendOption.orient === 'horizontal') {
	                    lastX += itemWidth + 5
	                             + zrArea.getTextWidth(formattedName, dataFont)
	                             + itemGap;
	                }
	                else {
	                    lastY += itemHeight + itemGap;
	                }
	            }
	        
	            if (this.legendOption.orient === 'horizontal'
	                && this.legendOption.x === 'center'
	                && lastY != this._itemGroupLocation.y
	            ) {
	                // 多行橫排居中优化
	                this._mLineOptimize();
	            }
	        },
	        
	        _getName: function(data) {
	            return typeof data.name != 'undefined' ? data.name : data;
	        },
	
	        _getFormatterName: function(itemName) {
	            var formatter = this.legendOption.formatter;
	            var formattedName;
	            if (typeof formatter === 'function') {
	                formattedName = formatter.call(this.myChart, itemName);
	            }
	            else if (typeof formatter === 'string') {
	                formattedName = formatter.replace('{name}', itemName);
	            }
	            else {
	                formattedName = itemName;
	            }
	            return formattedName;
	        },
	
	        _getFormatterNameFromData: function(data) {
	            var itemName = this._getName(data);
	            return this._getFormatterName(itemName);
	        },
	        
	        // 多行橫排居中优化
	        _mLineOptimize: function () {
	            var lineOffsetArray = []; // 每行宽度
	            var lastX = this._itemGroupLocation.x;
	            for (var i = 2, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].style.x === lastX) {
	                    lineOffsetArray.push(
	                        (
	                            this._itemGroupLocation.width 
	                            - (
	                                this.shapeList[i - 1].style.x
	                                + zrArea.getTextWidth(
	                                      this.shapeList[i - 1].style.text,
	                                      this.shapeList[i - 1].style.textFont
	                                  )
	                                - lastX
	                            )
	                        ) / 2
	                    );
	                }
	                else if (i === l - 1) {
	                    lineOffsetArray.push(
	                        (
	                            this._itemGroupLocation.width 
	                            - (
	                                this.shapeList[i].style.x
	                                + zrArea.getTextWidth(
	                                      this.shapeList[i].style.text,
	                                      this.shapeList[i].style.textFont
	                                  )
	                                - lastX
	                            )
	                        ) / 2
	                    );
	                }
	            }
	            var curLineIndex = -1;
	            for (var i = 1, l = this.shapeList.length; i < l; i++) {
	                if (this.shapeList[i].style.x === lastX) {
	                    curLineIndex++;
	                }
	                if (lineOffsetArray[curLineIndex] === 0) {
	                    continue;
	                }
	                else {
	                    this.shapeList[i].style.x += lineOffsetArray[curLineIndex];
	                }
	            }
	        },
	
	        _buildBackground: function () {
	            var padding = this.reformCssArray(this.legendOption.padding);
	
	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style: {
	                    x: this._itemGroupLocation.x - padding[3],
	                    y: this._itemGroupLocation.y - padding[0],
	                    width: this._itemGroupLocation.width + padding[3] + padding[1],
	                    height: this._itemGroupLocation.height + padding[0] + padding[2],
	                    brushType: this.legendOption.borderWidth === 0 ? 'fill' : 'both',
	                    color: this.legendOption.backgroundColor,
	                    strokeColor: this.legendOption.borderColor,
	                    lineWidth: this.legendOption.borderWidth
	                }
	            }));
	        },
	
	        /**
	         * 根据选项计算图例实体的位置坐标
	         */
	        _getItemGroupLocation: function () {
	            var data = this.legendOption.data;
	            var dataLength = data.length;
	            var itemGap = this.legendOption.itemGap;
	            var itemWidth = this.legendOption.itemWidth + 5; // 5px是图形和文字的间隔，不可配
	            var itemHeight = this.legendOption.itemHeight;
	            var textStyle  = this.legendOption.textStyle;
	            var font = this.getFont(textStyle);
	            var totalWidth = 0;
	            var totalHeight = 0;
	            var padding = this.reformCssArray(this.legendOption.padding);
	            var zrWidth = this.zr.getWidth() - padding[1] - padding[3];
	            var zrHeight = this.zr.getHeight() - padding[0] - padding[2];
	            
	            var temp = 0; // 宽高计算，用于多行判断
	            var maxWidth = 0; // 垂直布局有用
	            if (this.legendOption.orient === 'horizontal') {
	                // 水平布局，计算总宽度
	                totalHeight = itemHeight;
	                for (var i = 0; i < dataLength; i++) {
	                    if (this._getName(data[i]) === '') {
	                        temp -= itemGap;
	                        totalWidth = Math.max(totalWidth, temp);
	                        totalHeight += itemHeight + itemGap;
	                        temp = 0;
	                        continue;
	                    }
	                    var tempTextWidth = zrArea.getTextWidth(
	                        this._getFormatterNameFromData(data[i]),
	                        data[i].textStyle 
	                        ? this.getFont(zrUtil.merge(
	                            data[i].textStyle || {},
	                            textStyle
	                          ))
	                        : font
	                    );
	                    if (temp + itemWidth + tempTextWidth + itemGap > zrWidth) {
	                        // new line
	                        temp -= itemGap;  // 减去最后一个的itemGap
	                        totalWidth = Math.max(totalWidth, temp);
	                        totalHeight += itemHeight + itemGap;
	                        temp = 0;
	                    }
	                    else {
	                        temp += itemWidth + tempTextWidth + itemGap;
	                        totalWidth = Math.max(totalWidth, temp - itemGap);
	                    }
	                }
	            }
	            else {
	                // 垂直布局，计算总高度
	                for (var i = 0; i < dataLength; i++) {
	                    maxWidth = Math.max(
	                        maxWidth,
	                        zrArea.getTextWidth(
	                            this._getFormatterNameFromData(data[i]),
	                            data[i].textStyle 
	                            ? this.getFont(zrUtil.merge(
	                                  data[i].textStyle || {},
	                                  textStyle
	                              ))
	                            : font
	                        )
	                    );
	                }
	                maxWidth += itemWidth;
	                totalWidth = maxWidth;
	                for (var i = 0; i < dataLength; i++) {
	                    if (this._getName(data[i]) === '') {
	                        totalWidth += maxWidth + itemGap;
	                        temp -= itemGap;  // 减去最后一个的itemGap
	                        totalHeight = Math.max(totalHeight, temp);
	                        temp = 0;
	                        continue;
	                    }
	                    if (temp + itemHeight + itemGap > zrHeight) {
	                        // new line
	                        totalWidth += maxWidth + itemGap;
	                        temp -= itemGap;  // 减去最后一个的itemGap
	                        totalHeight = Math.max(totalHeight, temp);
	                        temp = 0;
	                    }
	                    else {
	                        temp += itemHeight + itemGap;
	                        totalHeight = Math.max(totalHeight, temp - itemGap);
	                    }
	                }
	            }
	
	            zrWidth = this.zr.getWidth();
	            zrHeight = this.zr.getHeight();
	            var x;
	            switch (this.legendOption.x) {
	                case 'center' :
	                    x = Math.floor((zrWidth - totalWidth) / 2);
	                    break;
	                case 'left' :
	                    x = padding[3] + this.legendOption.borderWidth;
	                    break;
	                case 'right' :
	                    x = zrWidth
	                        - totalWidth
	                        - padding[1]
	                        - padding[3]
	                        - this.legendOption.borderWidth * 2;
	                    break;
	                default :
	                    x = this.parsePercent(this.legendOption.x, zrWidth);
	                    break;
	            }
	            
	            var y;
	            switch (this.legendOption.y) {
	                case 'top' :
	                    y = padding[0] + this.legendOption.borderWidth;
	                    break;
	                case 'bottom' :
	                    y = zrHeight
	                        - totalHeight
	                        - padding[0]
	                        - padding[2]
	                        - this.legendOption.borderWidth * 2;
	                    break;
	                case 'center' :
	                    y = Math.floor((zrHeight - totalHeight) / 2);
	                    break;
	                default :
	                    y = this.parsePercent(this.legendOption.y, zrHeight);
	                    break;
	            }
	
	            return {
	                x: x,
	                y: y,
	                width: totalWidth,
	                height: totalHeight,
	                maxWidth: maxWidth
	            };
	        },
	
	        /**
	         * 根据名称返回series数据或data
	         */
	        _getSomethingByName: function (name) {
	            var series = this.option.series;
	            var data;
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].name === name) {
	                    // 系列名称优先
	                    return {
	                        type: series[i].type,
	                        series: series[i],
	                        seriesIndex: i,
	                        data: null,
	                        dataIndex: -1
	                    };
	                }
	
	                if (
	                    series[i].type === ecConfig.CHART_TYPE_PIE 
	                    || series[i].type === ecConfig.CHART_TYPE_RADAR
	                    || series[i].type === ecConfig.CHART_TYPE_CHORD
	                    || series[i].type === ecConfig.CHART_TYPE_FORCE
	                    || series[i].type === ecConfig.CHART_TYPE_FUNNEL
	                    || series[i].type === ecConfig.CHART_TYPE_TREEMAP
	                ) {
	                    data = series[i].categories || series[i].data || series[i].nodes;
	
	                    for (var j = 0, k = data.length; j < k; j++) {
	                        if (data[j].name === name) {
	                            return {
	                                type: series[i].type,
	                                series: series[i],
	                                seriesIndex: i,
	                                data: data[j],
	                                dataIndex: j
	                            };
	                        }
	                    }
	                }
	            }
	            return {
	                type: 'bar',
	                series: null,
	                seriesIndex: -1,
	                data: null,
	                dataIndex: -1
	            };
	        },
	        
	        _getItemShapeByType: function (x, y, width, height, color, itemType, defaultColor) {
	            var highlightColor = color === '#ccc' ? defaultColor : color;
	            var itemShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    iconType: 'legendicon' + itemType,
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height,
	                    color: color,
	                    strokeColor: color,
	                    lineWidth: 2
	                },
	                highlightStyle: {
	                    color: highlightColor,
	                    strokeColor: highlightColor,
	                    lineWidth: 1
	                },
	                hoverable: this.legendOption.selectedMode,
	                clickable: this.legendOption.selectedMode
	            };
	            
	            var imageLocation;
	            if (itemType.match('image')) {
	                var imageLocation = itemType.replace(
	                    new RegExp('^image:\\/\\/'), ''
	                );
	                itemType = 'image';
	            }
	            // 特殊设置
	            switch (itemType) {
	                case 'line':
	                    itemShape.style.brushType = 'stroke';
	                    itemShape.highlightStyle.lineWidth = 3;
	                    break;
	                case 'radar':
	                case 'venn':
	                case 'tree':
	                case 'treemap':
	                case 'scatter':
	                    itemShape.highlightStyle.lineWidth = 3;
	                    break;
	                case 'k':
	                    itemShape.style.brushType = 'both';
	                    itemShape.highlightStyle.lineWidth = 3;
	                    itemShape.highlightStyle.color =
	                    itemShape.style.color = this.deepQuery(
	                        [this.ecTheme, ecConfig], 'k.itemStyle.normal.color'
	                    ) || '#fff';
	                    itemShape.style.strokeColor = color != '#ccc' 
	                        ? (
	                            this.deepQuery(
	                                [this.ecTheme, ecConfig], 'k.itemStyle.normal.lineStyle.color'
	                            ) || '#ff3200'
	                        )
	                        : color;
	                    break;
	                case 'image':
	                    itemShape.style.iconType = 'image';
	                    itemShape.style.image = imageLocation;
	                    if (color === '#ccc') {
	                        itemShape.style.opacity = 0.5;
	                    }
	                    break;
	            }
	            return itemShape;
	        },
	
	        __legendSelected: function (param) {
	            var itemName = param.target._name;
	            if (this.legendOption.selectedMode === 'single') {
	                for (var k in this._selectedMap) {
	                    this._selectedMap[k] = false;
	                }
	            }
	            this._selectedMap[itemName] = !this._selectedMap[itemName];
	            this.messageCenter.dispatch(
	                ecConfig.EVENT.LEGEND_SELECTED,
	                param.event,
	                {
	                    selected: this._selectedMap,
	                    target: itemName
	                },
	                this.myChart
	            );
	        },
	        
	        /**
	         * 产生hover link事件 
	         */
	        __dispatchHoverLink : function(param) {
	            this.messageCenter.dispatch(
	                ecConfig.EVENT.LEGEND_HOVERLINK,
	                param.event,
	                {
	                    target: param.target._name
	                },
	                this.myChart
	            );
	            return;
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption || this.option;
	                this.option.legend = this.reformOption(this.option.legend);
	                this.legendOption = this.option.legend;
	                
	                var data = this.legendOption.data || [];
	                var itemName;
	                var something;
	                var color;
	                var queryTarget;
	                if (this.legendOption.selected) {
	                    for (var k in this.legendOption.selected) {
	                        this._selectedMap[k] = typeof this._selectedMap[k] != 'undefined'
	                                               ? this._selectedMap[k]
	                                               : this.legendOption.selected[k];
	                    }
	                }
	                for (var i = 0, dataLength = data.length; i < dataLength; i++) {
	                    itemName = this._getName(data[i]);
	                    if (itemName === '') {
	                        continue;
	                    }
	                    something = this._getSomethingByName(itemName);
	                    if (!something.series) {
	                        this._hasDataMap[itemName] = false;
	                    } 
	                    else {
	                        this._hasDataMap[itemName] = true;
	                        if (something.data
	                            && (something.type === ecConfig.CHART_TYPE_PIE
	                                || something.type === ecConfig.CHART_TYPE_FORCE
	                                || something.type === ecConfig.CHART_TYPE_FUNNEL)
	                        ) {
	                            queryTarget = [something.data, something.series];
	                        }
	                        else {
	                            queryTarget = [something.series];
	                        }
	                        
	                        color = this.getItemStyleColor(
	                            this.deepQuery(queryTarget, 'itemStyle.normal.color'),
	                            something.seriesIndex,
	                            something.dataIndex,
	                            something.data
	                        );
	                        if (color && something.type != ecConfig.CHART_TYPE_K) {
	                            this.setColor(itemName, color);
	                        }
	                        this._selectedMap[itemName] = 
	                            this._selectedMap[itemName] != null
	                            ? this._selectedMap[itemName] : true; 
	                    }
	                }
	            }
	            this.clear();
	            this._buildShape();
	        },
	        
	        getRelatedAmount: function(name) {
	            var amount = 0;
	            var series = this.option.series;
	            var data;
	            for (var i = 0, l = series.length; i < l; i++) {
	                if (series[i].name === name) {
	                    // 系列名称优先
	                    amount++;
	                }
	
	                if (
	                    series[i].type === ecConfig.CHART_TYPE_PIE 
	                    || series[i].type === ecConfig.CHART_TYPE_RADAR
	                    || series[i].type === ecConfig.CHART_TYPE_CHORD
	                    || series[i].type === ecConfig.CHART_TYPE_FORCE
	                    || series[i].type === ecConfig.CHART_TYPE_FUNNEL
	                ) {
	                    data = series[i].type != ecConfig.CHART_TYPE_FORCE
	                           ? series[i].data         // 饼图、雷达图、和弦图得查找里面的数据名字
	                           : series[i].categories;  // 力导布局查找categories配置
	                    for (var j = 0, k = data.length; j < k; j++) {
	                        if (data[j].name === name && data[j].value != '-') {
	                            amount++;
	                        }
	                    }
	                }
	            }
	            return amount;
	        },
	
	        setColor: function (legendName, color) {
	            this._colorMap[legendName] = color;
	        },
	
	        getColor: function (legendName) {
	            if (!this._colorMap[legendName]) {
	                this._colorMap[legendName] = this.zr.getColor(this._colorIndex++);
	            }
	            return this._colorMap[legendName];
	        },
	        
	        hasColor: function (legendName) {
	            return this._colorMap[legendName] ? this._colorMap[legendName] : false;
	        },
	
	        add: function (name, color){
	            var data = this.legendOption.data;
	            for (var i = 0, dataLength = data.length; i < dataLength; i++) {
	                if (this._getName(data[i]) === name) {
	                    // 已有就不重复加了
	                    return;
	                }
	            }
	            this.legendOption.data.push(name);
	            this.setColor(name,color);
	            this._selectedMap[name] = true;
	            this._hasDataMap[name] = true;
	        },
	
	        del: function (name){
	            var data = this.legendOption.data;
	            for (var i = 0, dataLength = data.length; i < dataLength; i++) {
	                if (this._getName(data[i]) === name) {
	                    return this.legendOption.data.splice(i, 1);
	                }
	            }
	        },
	        
	        /**
	         * 特殊图形元素回调设置
	         * @param {Object} name
	         * @param {Object} itemShape
	         */
	        getItemShape: function (name) {
	            if (name == null) {
	                return;
	            }
	            var shape;
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                shape = this.shapeList[i];
	                if (shape._name === name && shape.type != 'text') {
	                    return shape;
	                }
	            }
	        },
	        
	        /**
	         * 特殊图形元素回调设置
	         * @param {Object} name
	         * @param {Object} itemShape
	         */
	        setItemShape: function (name, itemShape) {
	            var shape;
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                shape = this.shapeList[i];
	                if (shape._name === name && shape.type != 'text') {
	                    if (!this._selectedMap[name]) {
	                        itemShape.style.color = '#ccc';
	                        itemShape.style.strokeColor = '#ccc';
	                    }
	                    this.zr.modShape(shape.id, itemShape);
	                }
	            }
	        },
	
	        isSelected: function (itemName) {
	            if (typeof this._selectedMap[itemName] != 'undefined') {
	                return this._selectedMap[itemName];
	            }
	            else {
	                // 没在legend里定义的都为true啊~
	                return true;
	            }
	        },
	        
	        getSelectedMap: function () {
	            return this._selectedMap;
	        },
	        
	        setSelected: function(itemName, selectStatus) {
	            if (this.legendOption.selectedMode === 'single') {
	                for (var k in this._selectedMap) {
	                    this._selectedMap[k] = false;
	                }
	            }
	            this._selectedMap[itemName] = selectStatus;
	            this.messageCenter.dispatch(
	                ecConfig.EVENT.LEGEND_SELECTED,
	                null,
	                {
	                    selected: this._selectedMap,
	                    target: itemName
	                },
	                this.myChart
	            );
	        },
	        
	        /**
	         * 图例选择
	         */
	        onlegendSelected: function (param, status) {
	            var legendSelected = param.selected;
	            for (var itemName in legendSelected) {
	                if (this._selectedMap[itemName] != legendSelected[itemName]) {
	                    // 有一项不一致都需要重绘
	                    status.needRefresh = true;
	                }
	                this._selectedMap[itemName] = legendSelected[itemName];
	            }
	            return;
	        }
	    };
	    
	    var legendIcon = {
	        line: function (ctx, style) {
	            var dy = style.height / 2;
	            ctx.moveTo(style.x,     style.y + dy);
	            ctx.lineTo(style.x + style.width,style.y + dy);
	        },
	        
	        pie: function (ctx, style) {
	            var x = style.x;
	            var y = style.y;
	            var width = style.width;
	            var height = style.height;
	            SectorShape.prototype.buildPath(ctx, {
	                x: x + width / 2,
	                y: y + height + 2,
	                r: height,
	                r0: 6,
	                startAngle: 45,
	                endAngle: 135
	            });
	        },
	        
	        eventRiver: function (ctx, style) {
	            var x = style.x;
	            var y = style.y;
	            var width = style.width;
	            var height = style.height;
	            ctx.moveTo(x, y + height);
	            ctx.bezierCurveTo(
	                x + width, y + height, x, y + 4, x + width, y + 4
	            );
	            ctx.lineTo(x + width, y);
	            ctx.bezierCurveTo(
	                x, y, x + width, y + height - 4, x, y + height - 4
	            );
	            ctx.lineTo(x, y + height);
	        },
	        
	        k: function (ctx, style) {
	            var x = style.x;
	            var y = style.y;
	            var width = style.width;
	            var height = style.height;
	            CandleShape.prototype.buildPath(ctx, {
	                x: x + width / 2,
	                y: [y + 1, y + 1, y + height - 6, y + height],
	                width: width - 6
	            });
	        },
	        
	        bar: function (ctx, style) {
	            var x = style.x;
	            var y = style.y +1;
	            var width = style.width;
	            var height = style.height - 2;
	            var r = 3;
	            
	            ctx.moveTo(x + r, y);
	            ctx.lineTo(x + width - r, y);
	            ctx.quadraticCurveTo(
	                x + width, y, x + width, y + r
	            );
	            ctx.lineTo(x + width, y + height - r);
	            ctx.quadraticCurveTo(
	                x + width, y + height, x + width - r, y + height
	            );
	            ctx.lineTo(x + r, y + height);
	            ctx.quadraticCurveTo(
	                x, y + height, x, y + height - r
	            );
	            ctx.lineTo(x, y + r);
	            ctx.quadraticCurveTo(x, y, x + r, y);
	        },
	        
	        force: function (ctx, style) {
	            IconShape.prototype.iconLibrary.circle(ctx, style);
	        },
	        
	        radar: function (ctx, style) {
	            var n = 6;
	            var x = style.x + style.width / 2;
	            var y = style.y + style.height / 2;
	            var r = style.height / 2;
	
	            var dStep = 2 * Math.PI / n;
	            var deg = -Math.PI / 2;
	            var xStart = x + r * Math.cos(deg);
	            var yStart = y + r * Math.sin(deg);
	            
	            ctx.moveTo(xStart, yStart);
	            deg += dStep;
	            for (var i = 0, end = n - 1; i < end; i ++) {
	                ctx.lineTo(x + r * Math.cos(deg), y + r * Math.sin(deg));
	                deg += dStep;
	            }
	            ctx.lineTo(xStart, yStart);
	        }
	    };
	    legendIcon.chord = legendIcon.pie;
	    legendIcon.map = legendIcon.bar;
	    
	    for (var k in legendIcon) {
	        IconShape.prototype.iconLibrary['legendicon' + k] = legendIcon[k];
	    }
	    
	    zrUtil.inherits(Legend, Base);
	    
	    __webpack_require__(229).define('legend', Legend);
	    
	    return Legend;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 扇形
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @module zrender/shape/Sector
	 * @example
	 *     var Sector = require('zrender/shape/Sector');
	 *     var shape = new Sector({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 60,
	 *             r0: 30,
	 *             startAngle: 0,
	 *             endEngle: 180
	 *         } 
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} ISectorStyle
	 * @property {number} x 圆心x坐标
	 * @property {number} y 圆心y坐标
	 * @property {number} r 外圆半径
	 * @property {number} [r0=0] 内圆半径，指定后将出现内弧，同时扇边长度为`r - r0`
	 * @property {number} startAngle 起始角度，`[0, 360)`
	 * @property {number} endAngle 结束角度，`(0, 360]`
	 * @property {boolean} [clockWise=false] 是否是顺时针
	 * @property {string} [brushType='fill']
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	
	        var math = __webpack_require__(200);
	        var computeBoundingBox = __webpack_require__(235);
	        var vec2 = __webpack_require__(178);
	        var Base = __webpack_require__(185);
	        
	        var min0 = vec2.create();
	        var min1 = vec2.create();
	        var max0 = vec2.create();
	        var max1 = vec2.create();
	        /**
	         * @alias module:zrender/shape/Sector
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Sector = function (options) {
	            Base.call(this, options);
	            /**
	             * 扇形绘制样式
	             * @name module:zrender/shape/Sector#style
	             * @type {module:zrender/shape/Sector~ISectorStyle}
	             */
	            /**
	             * 扇形高亮绘制样式
	             * @name module:zrender/shape/Sector#highlightStyle
	             * @type {module:zrender/shape/Sector~ISectorStyle}
	             */
	        };
	
	        Sector.prototype = {
	            type: 'sector',
	
	            /**
	             * 创建扇形路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Sector~ISectorStyle} style
	             */
	            buildPath : function (ctx, style) {
	                var x = style.x;   // 圆心x
	                var y = style.y;   // 圆心y
	                var r0 = style.r0 || 0;     // 形内半径[0,r)
	                var r = style.r;            // 扇形外半径(0,r]
	                var startAngle = style.startAngle;          // 起始角度[0,360)
	                var endAngle = style.endAngle;              // 结束角度(0,360]
	                var clockWise = style.clockWise || false;
	
	                startAngle = math.degreeToRadian(startAngle);
	                endAngle = math.degreeToRadian(endAngle);
	
	                if (!clockWise) {
	                    // 扇形默认是逆时针方向，Y轴向上
	                    // 这个跟arc的标准不一样，为了兼容echarts
	                    startAngle = -startAngle;
	                    endAngle = -endAngle;
	                }
	
	                var unitX = math.cos(startAngle);
	                var unitY = math.sin(startAngle);
	                ctx.moveTo(
	                    unitX * r0 + x,
	                    unitY * r0 + y
	                );
	
	                ctx.lineTo(
	                    unitX * r + x,
	                    unitY * r + y
	                );
	
	                ctx.arc(x, y, r, startAngle, endAngle, !clockWise);
	
	                ctx.lineTo(
	                    math.cos(endAngle) * r0 + x,
	                    math.sin(endAngle) * r0 + y
	                );
	
	                if (r0 !== 0) {
	                    ctx.arc(x, y, r0, endAngle, startAngle, clockWise);
	                }
	
	                ctx.closePath();
	
	                return;
	            },
	
	            /**
	             * 返回扇形包围盒矩形
	             * @param {module:zrender/shape/Sector~ISectorStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var x = style.x;   // 圆心x
	                var y = style.y;   // 圆心y
	                var r0 = style.r0 || 0;     // 形内半径[0,r)
	                var r = style.r;            // 扇形外半径(0,r]
	                var startAngle = math.degreeToRadian(style.startAngle);
	                var endAngle = math.degreeToRadian(style.endAngle);
	                var clockWise = style.clockWise;
	
	                if (!clockWise) {
	                    startAngle = -startAngle;
	                    endAngle = -endAngle;
	                }
	
	                if (r0 > 1) {
	                    computeBoundingBox.arc(
	                        x, y, r0, startAngle, endAngle, !clockWise, min0, max0
	                    );   
	                } else {
	                    min0[0] = max0[0] = x;
	                    min0[1] = max0[1] = y;
	                }
	                computeBoundingBox.arc(
	                    x, y, r, startAngle, endAngle, !clockWise, min1, max1
	                );
	
	                vec2.min(min0, min0, min1);
	                vec2.max(max0, max0, max1);
	                style.__rect = {
	                    x: min0[0],
	                    y: min0[1],
	                    width: max0[0] - min0[0],
	                    height: max0[1] - min0[1]
	                };
	                return style.__rect;
	            }
	        };
	
	
	        __webpack_require__(168).inherits(Sector, Base);
	        return Sector;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang(https://github.com/pissang)
	 *         errorrik (errorrik@gmail.com)
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var vec2 = __webpack_require__(178);
	        var curve = __webpack_require__(184);
	
	        /**
	         * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	         * @module zrender/tool/computeBoundingBox
	         * @param {Array<Object>} points 顶点数组
	         * @param {number} min
	         * @param {number} max
	         */
	        function computeBoundingBox(points, min, max) {
	            if (points.length === 0) {
	                return;
	            }
	            var left = points[0][0];
	            var right = points[0][0];
	            var top = points[0][1];
	            var bottom = points[0][1];
	            
	            for (var i = 1; i < points.length; i++) {
	                var p = points[i];
	                if (p[0] < left) {
	                    left = p[0];
	                }
	                if (p[0] > right) {
	                    right = p[0];
	                }
	                if (p[1] < top) {
	                    top = p[1];
	                }
	                if (p[1] > bottom) {
	                    bottom = p[1];
	                }
	            }
	
	            min[0] = left;
	            min[1] = top;
	            max[0] = right;
	            max[1] = bottom;
	        }
	
	        /**
	         * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	         * @memberOf module:zrender/tool/computeBoundingBox
	         * @param {Array.<number>} p0
	         * @param {Array.<number>} p1
	         * @param {Array.<number>} p2
	         * @param {Array.<number>} p3
	         * @param {Array.<number>} min
	         * @param {Array.<number>} max
	         */
	        function computeCubeBezierBoundingBox(p0, p1, p2, p3, min, max) {
	            var xDim = [];
	            curve.cubicExtrema(p0[0], p1[0], p2[0], p3[0], xDim);
	            for (var i = 0; i < xDim.length; i++) {
	                xDim[i] = curve.cubicAt(p0[0], p1[0], p2[0], p3[0], xDim[i]);
	            }
	            var yDim = [];
	            curve.cubicExtrema(p0[1], p1[1], p2[1], p3[1], yDim);
	            for (var i = 0; i < yDim.length; i++) {
	                yDim[i] = curve.cubicAt(p0[1], p1[1], p2[1], p3[1], yDim[i]);
	            }
	
	            xDim.push(p0[0], p3[0]);
	            yDim.push(p0[1], p3[1]);
	
	            var left = Math.min.apply(null, xDim);
	            var right = Math.max.apply(null, xDim);
	            var top = Math.min.apply(null, yDim);
	            var bottom = Math.max.apply(null, yDim);
	
	            min[0] = left;
	            min[1] = top;
	            max[0] = right;
	            max[1] = bottom;
	        }
	
	        /**
	         * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	         * @memberOf module:zrender/tool/computeBoundingBox
	         * @param {Array.<number>} p0
	         * @param {Array.<number>} p1
	         * @param {Array.<number>} p2
	         * @param {Array.<number>} min
	         * @param {Array.<number>} max
	         */
	        function computeQuadraticBezierBoundingBox(p0, p1, p2, min, max) {
	            // Find extremities, where derivative in x dim or y dim is zero
	            var t1 = curve.quadraticExtremum(p0[0], p1[0], p2[0]);
	            var t2 = curve.quadraticExtremum(p0[1], p1[1], p2[1]);
	
	            t1 = Math.max(Math.min(t1, 1), 0);
	            t2 = Math.max(Math.min(t2, 1), 0);
	
	            var ct1 = 1 - t1;
	            var ct2 = 1 - t2;
	
	            var x1 = ct1 * ct1 * p0[0] 
	                     + 2 * ct1 * t1 * p1[0] 
	                     + t1 * t1 * p2[0];
	            var y1 = ct1 * ct1 * p0[1] 
	                     + 2 * ct1 * t1 * p1[1] 
	                     + t1 * t1 * p2[1];
	
	            var x2 = ct2 * ct2 * p0[0] 
	                     + 2 * ct2 * t2 * p1[0] 
	                     + t2 * t2 * p2[0];
	            var y2 = ct2 * ct2 * p0[1] 
	                     + 2 * ct2 * t2 * p1[1] 
	                     + t2 * t2 * p2[1];
	            min[0] = Math.min(p0[0], p2[0], x1, x2);
	            min[1] = Math.min(p0[1], p2[1], y1, y2);
	            max[0] = Math.max(p0[0], p2[0], x1, x2);
	            max[1] = Math.max(p0[1], p2[1], y1, y2);
	        }
	
	        var start = vec2.create();
	        var end = vec2.create();
	        var extremity = vec2.create();
	        /**
	         * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	         * @method
	         * @memberOf module:zrender/tool/computeBoundingBox
	         * @param {Array.<number>} center 圆弧中心点
	         * @param {number} radius 圆弧半径
	         * @param {number} startAngle 圆弧开始角度
	         * @param {number} endAngle 圆弧结束角度
	         * @param {number} anticlockwise 是否是顺时针
	         * @param {Array.<number>} min
	         * @param {Array.<number>} max
	         */
	        var computeArcBoundingBox = function (
	            x, y, r, startAngle, endAngle, anticlockwise, min, max
	        ) { 
	            if (Math.abs(startAngle - endAngle) >= Math.PI * 2) {
	                // Is a circle
	                min[0] = x - r;
	                min[1] = y - r;
	                max[0] = x + r;
	                max[1] = y + r;
	                return;
	            }
	
	            start[0] = Math.cos(startAngle) * r + x;
	            start[1] = Math.sin(startAngle) * r + y;
	
	            end[0] = Math.cos(endAngle) * r + x;
	            end[1] = Math.sin(endAngle) * r + y;
	
	            vec2.min(min, start, end);
	            vec2.max(max, start, end);
	            
	            // Thresh to [0, Math.PI * 2]
	            startAngle = startAngle % (Math.PI * 2);
	            if (startAngle < 0) {
	                startAngle = startAngle + Math.PI * 2;
	            }
	            endAngle = endAngle % (Math.PI * 2);
	            if (endAngle < 0) {
	                endAngle = endAngle + Math.PI * 2;
	            }
	
	            if (startAngle > endAngle && !anticlockwise) {
	                endAngle += Math.PI * 2;
	            } else if (startAngle < endAngle && anticlockwise) {
	                startAngle += Math.PI * 2;
	            }
	            if (anticlockwise) {
	                var tmp = endAngle;
	                endAngle = startAngle;
	                startAngle = tmp;
	            }
	
	            // var number = 0;
	            // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	            for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	                if (angle > startAngle) {
	                    extremity[0] = Math.cos(angle) * r + x;
	                    extremity[1] = Math.sin(angle) * r + y;
	
	                    vec2.min(min, extremity, min);
	                    vec2.max(max, extremity, max);
	                }
	            }
	        };
	
	        computeBoundingBox.cubeBezier = computeCubeBezierBoundingBox;
	        computeBoundingBox.quadraticBezier = computeQuadraticBezierBoundingBox;
	        computeBoundingBox.arc = computeArcBoundingBox;
	
	        return computeBoundingBox;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：蜡烛
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'candle',       // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见
	
	       // 样式属性，默认状态样式样式属性
	       style  : {
	           x             : {number},  // 必须，横坐标
	           y             : {Array},   // 必须，纵坐标数组
	       },
	
	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }
	
	       // 交互属性，详见shape.Base
	
	       // 事件属性，详见shape.Base
	   }
	         例子：
	   {
	       shape  : 'candle',
	       id     : '123456',
	       zlevel : 1,
	       style  : {
	           x : 200,
	           y : [100,123,90,125],
	           width : 150,
	           color : '#eee',
	           text : 'Baidu'
	       },
	       myName : 'kener',  // 可自带任何有效自定义属性
	
	       clickable : true,
	       onClick : function (eventPacket) {
	           alert(eventPacket.target.myName);
	       }
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(185);
	    var zrUtil = __webpack_require__(168);
	
	    function Candle(options) {
	        Base.call(this, options);
	    }
	
	    Candle.prototype =  {
	        type: 'candle',
	        _numberOrder : function (a, b) {
	            return b - a;
	        },
	
	        /**
	         * 创建矩形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var yList = zrUtil.clone(style.y).sort(this._numberOrder);
	
	            ctx.moveTo(style.x, yList[3]);
	            ctx.lineTo(style.x, yList[2]);
	            ctx.moveTo(style.x - style.width / 2, yList[2]);
	            ctx.rect(
	                style.x - style.width / 2,
	                yList[2],
	                style.width,
	                yList[1] - yList[2]
	            );
	            ctx.moveTo(style.x, yList[1]);
	            ctx.lineTo(style.x, yList[0]);
	        },
	
	        /**
	         * 返回矩形区域，用于局部刷新和文字定位
	         * @param {Object} style
	         */
	        getRect : function (style) {
	            if (!style.__rect) {
	                var lineWidth = 0;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	
	                var yList = zrUtil.clone(style.y).sort(this._numberOrder);
	                style.__rect = {
	                    x : Math.round(style.x - style.width / 2 - lineWidth / 2),
	                    y : Math.round(yList[3] - lineWidth / 2),
	                    width : style.width + lineWidth,
	                    height : yList[0] - yList[3] + lineWidth
	                };
	            }
	
	            return style.__rect;
	        },
	
	
	        isCover : __webpack_require__(212)
	    };
	
	    zrUtil.inherits(Candle, Base);
	
	    return Candle;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：时间轴组件
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var RectangleShape = __webpack_require__(188);
	    var IconShape = __webpack_require__(198);
	    var ChainShape = __webpack_require__(238);
	    
	    var ecConfig = __webpack_require__(167);
	    ecConfig.timeline = {
	        zlevel: 0,                  // 一级层叠
	        z: 4,                       // 二级层叠
	        show: true,
	        type: 'time',  // 模式是时间类型，支持 number
	        notMerge: false,
	        realtime: true,
	        x: 80,
	        // y: {number},
	        x2: 80,
	        y2: 0,
	        // width: {totalWidth} - x - x2,
	        height: 50,
	        backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色
	        borderColor: '#ccc',               // 时间轴边框颜色
	        borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）
	        padding: 5,                        // 时间轴内边距，单位px，默认各方向内边距为5，
	        controlPosition: 'left',           // 'right' | 'none'
	        autoPlay: false,
	        loop: true,
	        playInterval: 2000,                // 播放时间间隔，单位ms
	        lineStyle: {
	            width: 1,
	            color: '#666',
	            type: 'dashed'
	        },
	        label: {                            // 文本标签
	            show: true,
	            interval: 'auto',
	            rotate: 0,
	            // formatter: null,
	            textStyle: {                    // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#333'
	            }
	        },
	        checkpointStyle: {
	            symbol: 'auto',
	            symbolSize: 'auto',
	            color: 'auto',
	            borderColor: 'auto',
	            borderWidth: 'auto',
	            label: {                            // 文本标签
	                show: false,
	                textStyle: {                    // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: 'auto'
	                }
	            }
	        },
	        controlStyle: {
	            itemSize: 15,
	            itemGap: 5,
	            normal: { color: '#333'},
	            emphasis: { color: '#1e90ff'}
	        },
	        symbol: 'emptyDiamond',
	        symbolSize: 4,
	        currentIndex: 0
	        // data: []
	    };
	
	    var zrUtil = __webpack_require__(168);
	    var zrArea = __webpack_require__(183);
	    var zrEvent = __webpack_require__(170);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     */
	    function Timeline(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        var self = this;
	        self._onclick = function(param) {
	            return self.__onclick(param);
	        };
	        self._ondrift = function (dx, dy) {
	            return self.__ondrift(this, dx, dy);
	        };
	        self._ondragend = function () {
	            return self.__ondragend();
	        };
	        self._setCurrentOption = function() {
	            var timelineOption = self.timelineOption;
	            self.currentIndex %= timelineOption.data.length;
	            // console.log(self.currentIndex);
	            var curOption = self.options[self.currentIndex] || {};
	            self.myChart._setOption(curOption, timelineOption.notMerge, true);
	            
	            self.messageCenter.dispatch(
	                ecConfig.EVENT.TIMELINE_CHANGED,
	                null,
	                {
	                    currentIndex: self.currentIndex,
	                    data: timelineOption.data[self.currentIndex].name != null
	                          ? timelineOption.data[self.currentIndex].name
	                          : timelineOption.data[self.currentIndex]
	                },
	                self.myChart
	            );
	        };
	        self._onFrame = function() {
	            self._setCurrentOption();
	            self._syncHandleShape();
	            
	            if (self.timelineOption.autoPlay) {
	                self.playTicket = setTimeout(
	                    function() {
	                        self.currentIndex += 1;
	                        if (!self.timelineOption.loop
	                            && self.currentIndex >= self.timelineOption.data.length
	                        ) {
	                            self.currentIndex = self.timelineOption.data.length - 1;
	                            self.stop();
	                            return;
	                        }
	                        self._onFrame();
	                    },
	                    self.timelineOption.playInterval
	                );
	            }
	        };
	
	        this.setTheme(false);
	        this.options = this.option.options;
	        this.currentIndex = this.timelineOption.currentIndex % this.timelineOption.data.length;
	        
	        if (!this.timelineOption.notMerge && this.currentIndex !== 0) {
	            /*
	            for (var i = 1, l = this.timelineOption.data.length; i < l; i++) {
	                this.options[i] = zrUtil.merge(
	                    this.options[i], this.options[i - 1]
	                );
	            }
	            */
	           this.options[this.currentIndex] = zrUtil.merge(
	               this.options[this.currentIndex], this.options[0]
	           );
	        }
	        
	        if (this.timelineOption.show) {
	            this._buildShape();
	            this._syncHandleShape();
	        }
	        
	        this._setCurrentOption();
	        
	        if (this.timelineOption.autoPlay) {
	            var self = this;
	            this.playTicket = setTimeout(
	                function() {
	                    self.play();
	                },
	                this.ecTheme.animationDuration != null
	                ? this.ecTheme.animationDuration
	                : ecConfig.animationDuration
	            );
	        }
	    }
	    
	    Timeline.prototype = {
	        type: ecConfig.COMPONENT_TYPE_TIMELINE,
	        _buildShape: function () {
	            // 位置参数，通过计算所得x, y, width, height
	            this._location = this._getLocation();
	            this._buildBackground();
	            this._buildControl();
	            this._chainPoint = this._getChainPoint();
	            if (this.timelineOption.label.show) {
	                // 标签显示的挑选间隔
	                var interval = this._getInterval();
	                for (var i = 0, len = this._chainPoint.length; i < len; i += interval) {
	                    this._chainPoint[i].showLabel = true;
	                }
	            }
	            this._buildChain();
	            this._buildHandle();
	
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },
	
	        /**
	         * 根据选项计算实体的位置坐标
	         */
	        _getLocation: function () {
	            var timelineOption = this.timelineOption;
	            var padding = this.reformCssArray(this.timelineOption.padding);
	            
	            // 水平布局
	            var zrWidth = this.zr.getWidth();
	            var x = this.parsePercent(timelineOption.x, zrWidth);
	            var x2 = this.parsePercent(timelineOption.x2, zrWidth);
	            var width;
	            if (timelineOption.width == null) {
	                width = zrWidth - x - x2;
	                x2 = zrWidth - x2;
	            }
	            else {
	                width = this.parsePercent(timelineOption.width, zrWidth);
	                x2 = x + width;
	            }
	
	            var zrHeight = this.zr.getHeight();
	            var height = this.parsePercent(timelineOption.height, zrHeight);
	            var y;
	            var y2;
	            if (timelineOption.y != null) {
	                y = this.parsePercent(timelineOption.y, zrHeight);
	                y2 = y + height;
	            }
	            else {
	                y2 = zrHeight - this.parsePercent(timelineOption.y2, zrHeight);
	                y = y2 - height;
	            }
	
	            return {
	                x: x + padding[3],
	                y: y + padding[0],
	                x2: x2 - padding[1],
	                y2: y2 - padding[2],
	                width: width - padding[1] - padding[3],
	                height: height - padding[0] - padding[2]
	            };
	        },
	
	        _getReformedLabel: function (idx) {
	            var timelineOption = this.timelineOption;
	            var data = timelineOption.data[idx].name != null
	                       ? timelineOption.data[idx].name
	                       : timelineOption.data[idx];
	            var formatter = timelineOption.data[idx].formatter 
	                            || timelineOption.label.formatter;
	            if (formatter) {
	                if (typeof formatter === 'function') {
	                    data = formatter.call(this.myChart, data);
	                }
	                else if (typeof formatter === 'string') {
	                    data = formatter.replace('{value}', data);
	                }
	            }
	            return data;
	        },
	        
	        /**
	         * 计算标签显示挑选间隔
	         */
	        _getInterval: function () {
	            var chainPoint = this._chainPoint;
	            var timelineOption = this.timelineOption;
	            var interval   = timelineOption.label.interval;
	            if (interval === 'auto') {
	                // 麻烦的自适应计算
	                var fontSize = timelineOption.label.textStyle.fontSize;
	                var data = timelineOption.data;
	                var dataLength = timelineOption.data.length;
	
	                // 横向
	                if (dataLength > 3) {
	                    var isEnough = false;
	                    var labelSpace;
	                    var labelSize;
	                    interval = 0;
	                    while (!isEnough && interval < dataLength) {
	                        interval++;
	                        isEnough = true;
	                        for (var i = interval; i < dataLength; i += interval) {
	                            labelSpace = chainPoint[i].x - chainPoint[i - interval].x;
	                            if (timelineOption.label.rotate !== 0) {
	                                // 有旋转
	                                labelSize = fontSize;
	                            }
	                            else if (data[i].textStyle) {
	                                labelSize = zrArea.getTextWidth(
	                                    chainPoint[i].name,
	                                    chainPoint[i].textFont
	                                );
	                            }
	                            else {
	                                // 不定义data级特殊文本样式，用fontSize优化getTextWidth
	                                var label = chainPoint[i].name + '';
	                                var wLen = (label.match(/\w/g) || '').length;
	                                var oLen = label.length - wLen;
	                                labelSize = wLen * fontSize * 2 / 3 + oLen * fontSize;
	                            }
	
	                            if (labelSpace < labelSize) {
	                                // 放不下，中断循环让interval++
	                                isEnough = false;
	                                break;
	                            }
	                        }
	                    }
	                }
	                else {
	                    // 少于3个则全部显示
	                    interval = 1;
	                }
	            }
	            else {
	                // 用户自定义间隔
	                interval = interval - 0 + 1;
	            }
	
	            return interval;
	        },
	        
	        /**
	         * 根据选项计算时间链条上的坐标及symbolList
	         */
	        _getChainPoint: function() {
	            var timelineOption = this.timelineOption;
	            var symbol = timelineOption.symbol.toLowerCase();
	            var symbolSize = timelineOption.symbolSize;
	            var rotate = timelineOption.label.rotate;
	            var textStyle = timelineOption.label.textStyle;
	            var textFont = this.getFont(textStyle);
	            var dataTextStyle;
	            var data = timelineOption.data;
	            var x = this._location.x;
	            var y = this._location.y + this._location.height / 4 * 3;
	            var width = this._location.x2 - this._location.x;
	            var len = data.length;
	            
	            function _getName(i) {
	                return (data[i].name != null ? data[i].name : data[i] + '');
	            }
	            var xList = [];
	            if (len > 1) {
	                var boundaryGap = width / len;
	                boundaryGap = boundaryGap > 50 ? 50 : (boundaryGap < 20 ? 5 : boundaryGap);
	                width -= boundaryGap * 2;
	                if (timelineOption.type === 'number') {
	                    // 平均分布
	                    for (var i = 0; i < len; i++) {
	                        xList.push(x + boundaryGap + width / (len - 1) * i);
	                    }
	                }
	                else {
	                    // 时间比例
	                    xList[0] = new Date(_getName(0).replace(/-/g, '/'));
	                    xList[len - 1] = new Date(_getName(len - 1).replace(/-/g, '/')) - xList[0];
	                    for (var i = 1; i < len; i++) {
	                        xList[i] =  x + boundaryGap 
	                                    + width 
	                                      * (new Date(_getName(i).replace(/-/g, '/')) - xList[0]) 
	                                      / xList[len - 1];
	                    }
	                    xList[0] = x + boundaryGap;
	                }
	            }
	            else {
	                xList.push(x + width / 2);
	            }
	            
	            var list = [];
	            var curSymbol;
	            var n;
	            var isEmpty;
	            var textAlign;
	            var rotation;
	            for (var i = 0; i < len; i++) {
	                x = xList[i];
	                curSymbol = (data[i].symbol && data[i].symbol.toLowerCase()) || symbol;
	                if (curSymbol.match('empty')) {
	                    curSymbol = curSymbol.replace('empty', '');
	                    isEmpty = true;
	                }
	                else {
	                    isEmpty = false;
	                }
	                if (curSymbol.match('star')) {
	                    n = (curSymbol.replace('star','') - 0) || 5;
	                    curSymbol = 'star';
	                }
	                
	                dataTextStyle = data[i].textStyle 
	                                ? zrUtil.merge(data[i].textStyle || {}, textStyle)
	                                : textStyle;
	                
	                textAlign = dataTextStyle.align || 'center';
	                
	                if (rotate) {
	                    textAlign = rotate > 0 ? 'right' : 'left';
	                    rotation = [rotate * Math.PI / 180, x, y - 5];
	                }
	                else {
	                    rotation = false;
	                }
	                
	                list.push({
	                    x: x,
	                    n: n,
	                    isEmpty: isEmpty,
	                    symbol: curSymbol,
	                    symbolSize: data[i].symbolSize || symbolSize,
	                    color: data[i].color,
	                    borderColor: data[i].borderColor,
	                    borderWidth: data[i].borderWidth,
	                    name: this._getReformedLabel(i),
	                    textColor: dataTextStyle.color,
	                    textAlign: textAlign,
	                    textBaseline: dataTextStyle.baseline || 'middle',
	                    textX: x,
	                    textY: y - (rotate ? 5 : 0),
	                    textFont: data[i].textStyle ? this.getFont(dataTextStyle) : textFont,
	                    rotation: rotation,
	                    showLabel: false
	                });
	            }
	            
	            return list;
	        },
	        
	        _buildBackground: function () {
	            var timelineOption = this.timelineOption;
	            var padding = this.reformCssArray(this.timelineOption.padding);
	            var width = this._location.width;
	            var height = this._location.height;
	            
	            if (timelineOption.borderWidth !== 0 
	                || timelineOption.backgroundColor.replace(/\s/g,'') != 'rgba(0,0,0,0)'
	            ) {
	                // 背景
	                this.shapeList.push(new RectangleShape({
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable :false,
	                    style: {
	                        x: this._location.x - padding[3],
	                        y: this._location.y - padding[0],
	                        width: width + padding[1] + padding[3],
	                        height: height + padding[0] + padding[2],
	                        brushType: timelineOption.borderWidth === 0 ? 'fill' : 'both',
	                        color: timelineOption.backgroundColor,
	                        strokeColor: timelineOption.borderColor,
	                        lineWidth: timelineOption.borderWidth
	                    }
	                }));
	            }
	        },
	
	        _buildControl: function() {
	            var self = this;
	            var timelineOption = this.timelineOption;
	            var lineStyle = timelineOption.lineStyle;
	            var controlStyle = timelineOption.controlStyle;
	            if (timelineOption.controlPosition === 'none') {
	                return;
	            }
	            var iconSize = controlStyle.itemSize;
	            var iconGap = controlStyle.itemGap;
	            var x;
	            if (timelineOption.controlPosition === 'left') {
	                x = this._location.x;
	                this._location.x += (iconSize + iconGap) * 3;
	            }
	            else {
	                x = this._location.x2 - ((iconSize + iconGap) * 3 - iconGap);
	                this._location.x2 -= (iconSize + iconGap) * 3;
	            }
	            
	            var y = this._location.y;
	            var iconStyle = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase() + 1,
	                style: {
	                    iconType: 'timelineControl',
	                    symbol: 'last',
	                    x: x,
	                    y: y,
	                    width: iconSize,
	                    height: iconSize,
	                    brushType: 'stroke',
	                    color: controlStyle.normal.color,
	                    strokeColor: controlStyle.normal.color,
	                    lineWidth: lineStyle.width
	                },
	                highlightStyle: {
	                    color: controlStyle.emphasis.color,
	                    strokeColor: controlStyle.emphasis.color,
	                    lineWidth: lineStyle.width + 1
	                },
	                clickable: true
	            };
	            
	            this._ctrLastShape = new IconShape(iconStyle);
	            this._ctrLastShape.onclick = function() {
	                self.last();
	            };
	            this.shapeList.push(this._ctrLastShape);
	            
	            x += iconSize + iconGap;
	            this._ctrPlayShape = new IconShape(zrUtil.clone(iconStyle));
	            this._ctrPlayShape.style.brushType = 'fill';
	            this._ctrPlayShape.style.symbol = 'play';
	            this._ctrPlayShape.style.status = this.timelineOption.autoPlay ? 'playing' : 'stop';
	            this._ctrPlayShape.style.x = x;
	            this._ctrPlayShape.onclick = function() {
	                if (self._ctrPlayShape.style.status === 'stop') {
	                    self.play();
	                }
	                else {
	                    self.stop();
	                }
	            };
	            this.shapeList.push(this._ctrPlayShape);
	            
	            x += iconSize + iconGap;
	            this._ctrNextShape = new IconShape(zrUtil.clone(iconStyle));
	            this._ctrNextShape.style.symbol = 'next';
	            this._ctrNextShape.style.x = x;
	            this._ctrNextShape.onclick = function() {
	                self.next();
	            };
	            this.shapeList.push(this._ctrNextShape);
	        },
	        
	        /**
	         * 构建时间轴
	         */
	        _buildChain: function () {
	            var timelineOption = this.timelineOption;
	            var lineStyle = timelineOption.lineStyle;
	            this._timelineShae = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style: {
	                    x: this._location.x,
	                    y: this.subPixelOptimize(this._location.y, lineStyle.width),
	                    width: this._location.x2 - this._location.x,
	                    height: this._location.height,
	                    chainPoint: this._chainPoint,
	                    brushType:'both',
	                    strokeColor: lineStyle.color,
	                    lineWidth: lineStyle.width,
	                    lineType: lineStyle.type
	                },
	                hoverable: false,
	                clickable: true,
	                onclick: this._onclick
	            };
	
	            this._timelineShae = new ChainShape(this._timelineShae);
	            this.shapeList.push(this._timelineShae);
	        },
	
	        /**
	         * 构建拖拽手柄
	         */
	        _buildHandle: function () {
	            var curPoint = this._chainPoint[this.currentIndex];
	            var symbolSize = curPoint.symbolSize + 1;
	            symbolSize = symbolSize < 5 ? 5 : symbolSize;
	            
	            this._handleShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase() + 1,
	                hoverable: false,
	                draggable: true,
	                style: {
	                    iconType: 'diamond',
	                    n: curPoint.n,
	                    x: curPoint.x - symbolSize,
	                    y: this._location.y + this._location.height / 4 - symbolSize,
	                    width: symbolSize * 2,
	                    height: symbolSize * 2,
	                    brushType:'both',
	                    textPosition: 'specific',
	                    textX: curPoint.x,
	                    textY: this._location.y - this._location.height / 4,
	                    textAlign: 'center',
	                    textBaseline: 'middle'
	                },
	                highlightStyle: {},
	                ondrift: this._ondrift,
	                ondragend: this._ondragend
	            };
	            
	            this._handleShape = new IconShape(this._handleShape);
	            this.shapeList.push(this._handleShape);
	        },
	        
	        /**
	         * 同步拖拽图形样式 
	         */
	        _syncHandleShape: function() {
	            if (!this.timelineOption.show) {
	                return;
	            }
	            
	            var timelineOption = this.timelineOption;
	            var cpStyle = timelineOption.checkpointStyle;
	            var curPoint = this._chainPoint[this.currentIndex];
	
	            this._handleShape.style.text = cpStyle.label.show ? curPoint.name : '';
	            this._handleShape.style.textFont = curPoint.textFont;
	            
	            this._handleShape.style.n = curPoint.n;
	            if (cpStyle.symbol === 'auto') {
	                this._handleShape.style.iconType = curPoint.symbol != 'none' 
	                                                   ? curPoint.symbol : 'diamond';
	            }
	            else {
	                this._handleShape.style.iconType = cpStyle.symbol;
	                if (cpStyle.symbol.match('star')) {
	                    this._handleShape.style.n = (cpStyle.symbol.replace('star','') - 0) || 5;
	                    this._handleShape.style.iconType = 'star';
	                }
	            }
	            
	            var symbolSize;
	            if (cpStyle.symbolSize === 'auto') {
	                symbolSize = curPoint.symbolSize + 2;
	                symbolSize = symbolSize < 5 ? 5 : symbolSize;
	            }
	            else {
	                symbolSize = cpStyle.symbolSize - 0;
	            }
	            
	            this._handleShape.style.color = cpStyle.color === 'auto'
	                                            ? (curPoint.color 
	                                               ? curPoint.color 
	                                               : timelineOption.controlStyle.emphasis.color
	                                              )
	                                            : cpStyle.color;
	            this._handleShape.style.textColor = cpStyle.label.textStyle.color === 'auto'
	                                                ? this._handleShape.style.color
	                                                : cpStyle.label.textStyle.color;
	            this._handleShape.highlightStyle.strokeColor = 
	            this._handleShape.style.strokeColor = cpStyle.borderColor === 'auto'
	                                ? (curPoint.borderColor ? curPoint.borderColor : '#fff')
	                                : cpStyle.borderColor;
	            this._handleShape.style.lineWidth = cpStyle.borderWidth === 'auto'
	                                ? (curPoint.borderWidth ? curPoint.borderWidth : 0)
	                                : (cpStyle.borderWidth - 0);
	            this._handleShape.highlightStyle.lineWidth = this._handleShape.style.lineWidth + 1;
	            
	            this.zr.animate(this._handleShape.id, 'style')
	                .when(
	                    500,
	                    {
	                        x: curPoint.x - symbolSize,
	                        textX: curPoint.x,
	                        y: this._location.y + this._location.height / 4 - symbolSize,
	                        width: symbolSize * 2,
	                        height: symbolSize * 2
	                    }
	                )
	                .start('ExponentialOut');
	        },
	
	        _findChainIndex: function(x) {
	            var chainPoint = this._chainPoint;
	            var len = chainPoint.length;
	            if (x <= chainPoint[0].x) {
	                return 0;
	            }
	            else if (x >= chainPoint[len - 1].x) {
	                return len - 1;
	            }
	            for (var i = 0; i < len - 1; i++) {
	                if (x >= chainPoint[i].x && x <= chainPoint[i + 1].x) {
	                    // catch you！
	                    return (Math.abs(x - chainPoint[i].x) < Math.abs(x - chainPoint[i + 1].x))
	                           ? i : (i + 1);
	                }
	            }
	        },
	        
	        __onclick: function(param) {
	            var x = zrEvent.getX(param.event);
	            var newIndex =  this._findChainIndex(x);
	            if (newIndex === this.currentIndex) {
	                return true; // 啥事都没发生
	            }
	            
	            this.currentIndex = newIndex;
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            clearTimeout(this.playTicket);
	            this._onFrame();
	        },
	        
	        /**
	         * 拖拽范围控制
	         */
	        __ondrift: function (shape, dx) {
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            
	            var chainPoint = this._chainPoint;
	            var len = chainPoint.length;
	            var newIndex;
	            if (shape.style.x + dx <= chainPoint[0].x - chainPoint[0].symbolSize) {
	                shape.style.x = chainPoint[0].x - chainPoint[0].symbolSize;
	                newIndex = 0;
	            }
	            else if (shape.style.x + dx >= chainPoint[len - 1].x - chainPoint[len - 1].symbolSize) {
	                shape.style.x = chainPoint[len - 1].x - chainPoint[len - 1].symbolSize;
	                newIndex = len - 1;
	            }
	            else {
	                shape.style.x += dx;
	                newIndex = this._findChainIndex(shape.style.x);
	            }
	            var curPoint = chainPoint[newIndex];
	            var symbolSize = curPoint.symbolSize + 2;
	            shape.style.iconType = curPoint.symbol;
	            shape.style.n = curPoint.n;
	            shape.style.textX = shape.style.x + symbolSize / 2;
	            shape.style.y = this._location.y + this._location.height / 4 - symbolSize;
	            shape.style.width = symbolSize * 2;
	            shape.style.height = symbolSize * 2;
	            shape.style.text = curPoint.name;
	            
	            //console.log(newIndex)
	            if (newIndex === this.currentIndex) {
	                return true; // 啥事都没发生
	            }
	            
	            this.currentIndex = newIndex;
	            if (this.timelineOption.realtime) {
	                clearTimeout(this.playTicket);
	                var self = this;
	                this.playTicket = setTimeout(function() {
	                    self._setCurrentOption();
	                },200);
	            }
	
	            return true;
	        },
	        
	        __ondragend: function () {
	            this.isDragend = true;
	        },
	        
	        /**
	         * 数据项被拖拽出去
	         */
	        ondragend: function (param, status) {
	            if (!this.isDragend || !param.target) {
	                // 没有在当前实例上发生拖拽行为则直接返回
	                return;
	            }
	            !this.timelineOption.realtime && this._setCurrentOption();
	            
	            // 别status = {}赋值啊！！
	            status.dragOut = true;
	            status.dragIn = true;
	            status.needRefresh = false; // 会有消息触发fresh，不用再刷一遍
	            // 处理完拖拽事件后复位
	            this.isDragend = false;
	            this._syncHandleShape();
	            return;
	        },
	        
	        last: function () {
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            
	            this.currentIndex -= 1;
	            if (this.currentIndex < 0) {
	                this.currentIndex = this.timelineOption.data.length - 1;
	            }
	            this._onFrame();
	            
	            return this.currentIndex;
	        },
	        
	        next: function () {
	            this.timelineOption.autoPlay && this.stop(); // 停止自动播放
	            
	            this.currentIndex += 1;
	            if (this.currentIndex >= this.timelineOption.data.length) {
	                this.currentIndex = 0;
	            }
	            this._onFrame();
	            
	            return this.currentIndex;
	        },
	        
	        play: function (targetIndex, autoPlay) {
	            if (this._ctrPlayShape && this._ctrPlayShape.style.status != 'playing') {
	                this._ctrPlayShape.style.status = 'playing';
	                this.zr.modShape(this._ctrPlayShape.id);
	                this.zr.refreshNextFrame();
	            }
	            
	            
	            this.timelineOption.autoPlay = autoPlay != null ? autoPlay : true;
	            
	            if (!this.timelineOption.autoPlay) {
	                clearTimeout(this.playTicket);
	            }
	            
	            this.currentIndex = targetIndex != null ? targetIndex : (this.currentIndex + 1);
	            if (this.currentIndex >= this.timelineOption.data.length) {
	                this.currentIndex = 0;
	            }
	            this._onFrame();
	            
	            return this.currentIndex;
	        },
	        
	        stop: function () {
	            if (this._ctrPlayShape && this._ctrPlayShape.style.status != 'stop') {
	                this._ctrPlayShape.style.status = 'stop';
	                this.zr.modShape(this._ctrPlayShape.id);
	                this.zr.refreshNextFrame();
	            }
	            
	            this.timelineOption.autoPlay = false;
	            
	            clearTimeout(this.playTicket);
	            
	            return this.currentIndex;
	        },
	        
	        /**
	         * 避免dataZoom带来两次refresh，不设refresh接口，resize重复一下buildshape逻辑 
	         */
	        resize: function () {
	            if (this.timelineOption.show) {
	                this.clear();
	                this._buildShape();
	                this._syncHandleShape();
	            }
	        },
	        
	        setTheme: function(needRefresh) {
	            this.timelineOption = this.reformOption(zrUtil.clone(this.option.timeline));
	            // 通用字体设置
	            this.timelineOption.label.textStyle = this.getTextStyle(
	                this.timelineOption.label.textStyle
	            );
	            this.timelineOption.checkpointStyle.label.textStyle = this.getTextStyle(
	                this.timelineOption.checkpointStyle.label.textStyle
	            );
	            if (!this.myChart.canvasSupported) {
	                // 不支持Canvas的强制关闭实时动画
	                this.timelineOption.realtime = false;
	            }
	            
	            if (this.timelineOption.show && needRefresh) {
	                this.clear();
	                this._buildShape();
	                this._syncHandleShape();
	            }
	        },
	        
	        /**
	         * 释放后实例不可用，重载基类方法
	         */
	        onbeforDispose: function () {
	            clearTimeout(this.playTicket);
	        }
	    };
	    
	    function timelineControl(ctx, style) {
	        var lineWidth = 2;//style.lineWidth;
	        var x = style.x + lineWidth;
	        var y = style.y + lineWidth + 2;
	        var width = style.width - lineWidth;
	        var height = style.height - lineWidth;
	        
	        
	        var symbol = style.symbol;
	        if (symbol === 'last') {
	            ctx.moveTo(x + width - 2, y + height / 3);
	            ctx.lineTo(x + width - 2, y);
	            ctx.lineTo(x + 2, y + height / 2);
	            ctx.lineTo(x + width - 2, y + height);
	            ctx.lineTo(x + width - 2, y + height / 3 * 2);
	            ctx.moveTo(x, y);
	            ctx.lineTo(x, y);
	        } 
	        else if (symbol === 'next') {
	            ctx.moveTo(x + 2, y + height / 3);
	            ctx.lineTo(x + 2, y);
	            ctx.lineTo(x + width - 2, y + height / 2);
	            ctx.lineTo(x + 2, y + height);
	            ctx.lineTo(x + 2, y + height / 3 * 2);
	            ctx.moveTo(x, y);
	            ctx.lineTo(x, y);
	        }
	        else if (symbol === 'play') {
	            if (style.status === 'stop') {
	                ctx.moveTo(x + 2, y);
	                ctx.lineTo(x + width - 2, y + height / 2);
	                ctx.lineTo(x + 2, y + height);
	                ctx.lineTo(x + 2, y);
	            }
	            else {
	                var delta = style.brushType === 'both' ? 2 : 3;
	                ctx.rect(x + 2, y, delta, height);
	                ctx.rect(x + width - delta - 2, y, delta, height);
	            }
	        }
	        else if (symbol.match('image')) {
	            var imageLocation = '';
	            imageLocation = symbol.replace(
	                    new RegExp('^image:\\/\\/'), ''
	                );
	            symbol = IconShape.prototype.iconLibrary.image;
	            symbol(ctx, {
	                x: x,
	                y: y,
	                width: width,
	                height: height,
	                image: imageLocation
	            });
	        }
	    }
	    IconShape.prototype.iconLibrary['timelineControl'] = timelineControl;
	    
	    zrUtil.inherits(Timeline, Base);
	    
	    __webpack_require__(229).define('timeline', Timeline);
	    
	    return Timeline;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：时间轴线
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(185);
	    var IconShape = __webpack_require__(198);
	
	    var dashedLineTo = __webpack_require__(206);
	    var zrUtil = __webpack_require__(168);
	    var matrix = __webpack_require__(179);
	
	    function Chain(options) {
	        Base.call(this, options);
	    }
	
	    Chain.prototype =  {
	        type : 'chain',
	
	        /**
	         * 画刷
	         * @param ctx       画布句柄
	         * @param e         形状实体
	         * @param isHighlight   是否为高亮状态
	         * @param updateCallback 需要异步加载资源的shape可以通过这个callback(e)
	         *                       让painter更新视图，base.brush没用，需要的话重载brush
	         */
	        brush : function (ctx, isHighlight) {
	            var style = this.style;
	
	            if (isHighlight) {
	                // 根据style扩展默认高亮样式
	                style = this.getHighlightStyle(
	                    style,
	                    this.highlightStyle || {}
	                );
	            }
	
	            ctx.save();
	            this.setContext(ctx, style);
	
	            // 设置transform
	            this.setTransform(ctx);
	
	            ctx.save();
	            ctx.beginPath();
	            this.buildLinePath(ctx, style);
	            ctx.stroke();
	            ctx.restore();
	            
	            this.brushSymbol(ctx, style);
	
	            ctx.restore();
	            return;
	        },
	
	        /**
	         * 创建线条路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildLinePath : function (ctx, style) {
	            var x = style.x;
	            var y = style.y + 5;
	            var width = style.width;
	            var height = style.height / 2 - 10;
	
	            ctx.moveTo(x, y);
	            ctx.lineTo(x, y + height);
	            ctx.moveTo(x + width, y);
	            ctx.lineTo(x + width, y + height);
	
	            ctx.moveTo(x, y + height / 2);
	            if (!style.lineType || style.lineType == 'solid') {
	                ctx.lineTo(x + width, y + height / 2);
	            }
	            else if (style.lineType == 'dashed' || style.lineType == 'dotted') {
	                var dashLength = (style.lineWidth || 1)
	                             * (style.lineType == 'dashed' ? 5 : 1);
	                dashedLineTo(ctx, x, y + height / 2, x + width, y + height / 2, dashLength);
	            }
	        },
	
	        /**
	         * 标线始末标注
	         */
	        brushSymbol : function (ctx, style) {
	            var y = style.y + style.height / 4;
	            ctx.save();
	
	            var chainPoint = style.chainPoint;
	            var curPoint;
	            for (var idx = 0, l = chainPoint.length; idx < l; idx++) {
	                curPoint = chainPoint[idx];
	                if (curPoint.symbol != 'none') {
	                    ctx.beginPath();
	                    var symbolSize = curPoint.symbolSize;
	                    IconShape.prototype.buildPath(
	                        ctx,
	                        {
	                            iconType : curPoint.symbol,
	                            x : curPoint.x - symbolSize,
	                            y : y - symbolSize,
	                            width : symbolSize * 2,
	                            height : symbolSize * 2,
	                            n : curPoint.n
	                        }
	                    );
	                    ctx.fillStyle = curPoint.isEmpty ? '#fff' : style.strokeColor;
	                    ctx.closePath();
	                    ctx.fill();
	                    ctx.stroke();
	                }
	
	                if (curPoint.showLabel) {
	                    ctx.font = curPoint.textFont;
	                    ctx.fillStyle = curPoint.textColor;
	                    ctx.textAlign = curPoint.textAlign;
	                    ctx.textBaseline = curPoint.textBaseline;
	                    if (curPoint.rotation) {
	                        ctx.save();
	                        this._updateTextTransform(ctx, curPoint.rotation);
	                        ctx.fillText(curPoint.name, curPoint.textX, curPoint.textY);
	                        ctx.restore();
	                    }
	                    else {
	                        ctx.fillText(curPoint.name, curPoint.textX, curPoint.textY);
	                    }
	                }
	            }
	
	            ctx.restore();
	        },
	
	        _updateTextTransform : function (ctx, rotation) {
	            var _transform = matrix.create();
	            matrix.identity(_transform);
	
	            if (rotation[0] !== 0) {
	                var originX = rotation[1] || 0;
	                var originY = rotation[2] || 0;
	                if (originX || originY) {
	                    matrix.translate(
	                        _transform, _transform, [-originX, -originY]
	                    );
	                }
	                matrix.rotate(_transform, _transform, rotation[0]);
	                if (originX || originY) {
	                    matrix.translate(
	                        _transform, _transform, [originX, originY]
	                    );
	                }
	            }
	
	            // 保存这个变换矩阵
	            ctx.transform.apply(ctx, _transform);
	        },
	
	        isCover : function (x, y) {
	            var rect = this.style;
	            if (x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height)
	            ) {
	                // 矩形内
	                return true;
	            }
	            else {
	                return false;
	            }
	        }
	    };
	
	    zrUtil.inherits(Chain, Base);
	
	    return Chain;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(181);
	        var util = __webpack_require__(168);
	        var zrColor = __webpack_require__(187);
	        var RectangleShape = __webpack_require__(188);
	
	        function Bar(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Bar, Base);
	
	        
	        /**
	         * 进度条
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Bar.prototype._start = function (addShapeHandle, refreshHandle) {
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#888'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)',
	                    effectOption : {
	                        x : 0,
	                        y : this.canvasHeight / 2 - 30,
	                        width : this.canvasWidth,
	                        height : 5,
	                        brushType : 'fill',
	                        timeInterval : 100
	                    }
	                }
	            );
	
	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);
	
	            var effectOption = options.effectOption;
	
	            // 初始化动画元素
	            var barShape = new RectangleShape({
	                highlightStyle : util.clone(effectOption)
	            });
	
	            barShape.highlightStyle.color =
	                effectOption.color
	                || zrColor.getLinearGradient(
	                    effectOption.x,
	                    effectOption.y,
	                    effectOption.x + effectOption.width,
	                    effectOption.y + effectOption.height,
	                    [ [ 0, '#ff6400' ], [ 0.5, '#ffe100' ], [ 1, '#b1ff00' ] ]
	                );
	
	            if (options.progress != null) {
	                // 指定进度
	                addShapeHandle(background);
	
	                barShape.highlightStyle.width =
	                    this.adjust(options.progress, [ 0, 1 ])
	                    * options.effectOption.width;
	                    
	                addShapeHandle(barShape);
	                addShapeHandle(textShape);
	
	                refreshHandle();
	                return;
	            }
	            else {
	                // 循环显示
	                barShape.highlightStyle.width = 0;
	                return setInterval(
	                    function () {
	                        addShapeHandle(background);
	
	                        if (barShape.highlightStyle.width < effectOption.width) {
	                            barShape.highlightStyle.width += 8;
	                        }
	                        else {
	                            barShape.highlightStyle.width = 0;
	                        }
	                        addShapeHandle(barShape);
	                        addShapeHandle(textShape);
	                        refreshHandle();
	                    },
	                    effectOption.timeInterval
	                );
	            }
	        };
	
	        return Bar;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(181);
	        var util = __webpack_require__(168);
	        var zrColor = __webpack_require__(187);
	        var CircleShape = __webpack_require__(218);
	
	        function Bubble(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Bubble, Base);
	
	        /**
	         * 泡泡
	         *
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Bubble.prototype._start = function (addShapeHandle, refreshHandle) {
	            
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#888'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)',
	                    effect : {
	                        n : 50,
	                        lineWidth : 2,
	                        brushType : 'stroke',
	                        color : 'random',
	                        timeInterval : 100
	                    }
	                }
	            );
	
	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);
	
	            var effectOption = options.effect;
	            var n = effectOption.n;
	            var brushType = effectOption.brushType;
	            var lineWidth = effectOption.lineWidth;
	
	            var shapeList = [];
	            var canvasWidth = this.canvasWidth;
	            var canvasHeight = this.canvasHeight;
	            
	            // 初始化动画元素
	            for (var i = 0; i < n; i++) {
	                var color = effectOption.color == 'random'
	                    ? zrColor.alpha(zrColor.random(), 0.3)
	                    : effectOption.color;
	
	                shapeList[i] = new CircleShape({
	                    highlightStyle : {
	                        x : Math.ceil(Math.random() * canvasWidth),
	                        y : Math.ceil(Math.random() * canvasHeight),
	                        r : Math.ceil(Math.random() * 40),
	                        brushType : brushType,
	                        color : color,
	                        strokeColor : color,
	                        lineWidth : lineWidth
	                    },
	                    animationY : Math.ceil(Math.random() * 20)
	                });
	            }
	            
	            return setInterval(
	                function () {
	                    addShapeHandle(background);
	                    
	                    for (var i = 0; i < n; i++) {
	                        var style = shapeList[i].highlightStyle;
	
	                        if (style.y - shapeList[i].animationY + style.r <= 0) {
	                            shapeList[i].highlightStyle.y = canvasHeight + style.r;
	                            shapeList[i].highlightStyle.x = Math.ceil(
	                                Math.random() * canvasWidth
	                            );
	                        }
	                        shapeList[i].highlightStyle.y -=
	                            shapeList[i].animationY;
	
	                        addShapeHandle(shapeList[i]);
	                    }
	
	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };
	
	        return Bubble;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(181);
	        var util = __webpack_require__(168);
	        var zrColor = __webpack_require__(187);
	        var LineShape = __webpack_require__(205);
	
	        function DynamicLine(options) {
	            Base.call(this, options);
	        }
	        util.inherits(DynamicLine, Base);
	
	
	        /**
	         * 动态线
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        DynamicLine.prototype._start = function (addShapeHandle, refreshHandle) {
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#fff'
	                    },
	                    backgroundColor : 'rgba(0, 0, 0, 0.8)',
	                    effectOption : {
	                        n : 30,
	                        lineWidth : 1,
	                        color : 'random',
	                        timeInterval : 100
	                    }
	                }
	            );
	
	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);
	
	            var effectOption = options.effectOption;
	            var n = effectOption.n;
	            var lineWidth = effectOption.lineWidth;
	
	            var shapeList = [];
	            var canvasWidth = this.canvasWidth;
	            var canvasHeight = this.canvasHeight;
	            
	            // 初始化动画元素
	            for (var i = 0; i < n; i++) {
	                var xStart = -Math.ceil(Math.random() * 1000);
	                var len = Math.ceil(Math.random() * 400);
	                var pos = Math.ceil(Math.random() * canvasHeight);
	
	                var color = effectOption.color == 'random'
	                    ? zrColor.random()
	                    : effectOption.color;
	                
	                shapeList[i] = new LineShape({
	                    highlightStyle : {
	                        xStart : xStart,
	                        yStart : pos,
	                        xEnd : xStart + len,
	                        yEnd : pos,
	                        strokeColor : color,
	                        lineWidth : lineWidth
	                    },
	                    animationX : Math.ceil(Math.random() * 100),
	                    len : len
	                });
	            }
	            
	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	                    
	                    for (var i = 0; i < n; i++) {
	                        var style = shapeList[i].highlightStyle;
	
	                        if (style.xStart >= canvasWidth) {
	                            
	                            shapeList[i].len = Math.ceil(Math.random() * 400);
	                            style.xStart = -400;
	                            style.xEnd = -400 + shapeList[i].len;
	                            style.yStart = Math.ceil(Math.random() * canvasHeight);
	                            style.yEnd = style.yStart;
	                        }
	
	                        style.xStart += shapeList[i].animationX;
	                        style.xEnd += shapeList[i].animationX;
	
	                        addShapeHandle(shapeList[i]);
	                    }
	
	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };
	
	        return DynamicLine;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(181);
	        var util = __webpack_require__(168);
	        var zrColor = __webpack_require__(187);
	        var RingShape = __webpack_require__(243);
	        var SectorShape = __webpack_require__(234);
	
	        function Ring(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Ring, Base);
	
	
	        /**
	         * 圆环
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Ring.prototype._start = function (addShapeHandle, refreshHandle) {
	            
	            // 特效默认配置
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#07a'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)',
	                    effect : {
	                        x : this.canvasWidth / 2,
	                        y : this.canvasHeight / 2,
	                        r0 : 60,
	                        r : 100,
	                        color : '#bbdcff',
	                        brushType: 'fill',
	                        textPosition : 'inside',
	                        textFont : 'normal 30px verdana',
	                        textColor : 'rgba(30, 144, 255, 0.6)',
	                        timeInterval : 100
	                    }
	                }
	            );
	
	            var effectOption = options.effect;
	
	            var textStyle = options.textStyle;
	            if (textStyle.x == null) {
	                textStyle.x = effectOption.x;
	            }
	            if (textStyle.y == null) {
	                textStyle.y = (effectOption.y + (effectOption.r0 + effectOption.r) / 2 - 5);
	            }
	            
	            var textShape = this.createTextShape(options.textStyle);
	            var background = this.createBackgroundShape(options.backgroundColor);
	
	            var x = effectOption.x;
	            var y = effectOption.y;
	            var r0 = effectOption.r0 + 6;
	            var r = effectOption.r - 6;
	            var color = effectOption.color;
	            var darkColor = zrColor.lift(color, 0.1);
	
	            var shapeRing = new RingShape({
	                highlightStyle : util.clone(effectOption)
	            });
	
	            // 初始化动画元素
	            var shapeList = [];
	            var clolrList = zrColor.getGradientColors(
	                [ '#ff6400', '#ffe100', '#97ff00' ], 25
	            );
	            var preAngle = 15;
	            var endAngle = 240;
	
	            for (var i = 0; i < 16; i++) {
	                shapeList.push(new SectorShape({
	                    highlightStyle  : {
	                        x : x,
	                        y : y,
	                        r0 : r0,
	                        r : r,
	                        startAngle : endAngle - preAngle,
	                        endAngle : endAngle,
	                        brushType: 'fill',
	                        color : darkColor
	                    },
	                    _color : zrColor.getLinearGradient(
	                        x + r0 * Math.cos(endAngle, true),
	                        y - r0 * Math.sin(endAngle, true),
	                        x + r0 * Math.cos(endAngle - preAngle, true),
	                        y - r0 * Math.sin(endAngle - preAngle, true),
	                        [
	                            [ 0, clolrList[i * 2] ],
	                            [ 1, clolrList[i * 2 + 1] ]
	                        ]
	                    )
	                }));
	                endAngle -= preAngle;
	            }
	            endAngle = 360;
	            for (var i = 0; i < 4; i++) {
	                shapeList.push(new SectorShape({
	                    highlightStyle  : {
	                        x : x,
	                        y : y,
	                        r0 : r0,
	                        r : r,
	                        startAngle : endAngle - preAngle,
	                        endAngle : endAngle,
	                        brushType: 'fill',
	                        color : darkColor
	                    },
	                    _color : zrColor.getLinearGradient(
	                        x + r0 * Math.cos(endAngle, true),
	                        y - r0 * Math.sin(endAngle, true),
	                        x + r0 * Math.cos(endAngle - preAngle, true),
	                        y - r0 * Math.sin(endAngle - preAngle, true),
	                        [
	                            [ 0, clolrList[i * 2 + 32] ],
	                            [ 1, clolrList[i * 2 + 33] ]
	                        ]
	                    )
	                }));
	                endAngle -= preAngle;
	            }
	
	            var n = 0;
	            if (options.progress != null) {
	                // 指定进度
	                addShapeHandle(background);
	
	                n = this.adjust(options.progress, [ 0, 1 ]).toFixed(2) * 100 / 5;
	                shapeRing.highlightStyle.text = n * 5 + '%';
	                addShapeHandle(shapeRing);
	
	                for (var i = 0; i < 20; i++) {
	                    shapeList[i].highlightStyle.color = i < n
	                        ? shapeList[i]._color : darkColor;
	                    addShapeHandle(shapeList[i]);
	                }
	
	                addShapeHandle(textShape);
	                refreshHandle();
	                return;
	            }
	
	            // 循环显示
	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	
	                    n += n >= 20 ? -20 : 1;
	
	                    // shapeRing.highlightStyle.text = n * 5 + '%';
	                    addShapeHandle(shapeRing);
	
	                    for (var i = 0; i < 20; i++) {
	                        shapeList[i].highlightStyle.color = i < n
	                            ? shapeList[i]._color : darkColor;
	                        addShapeHandle(shapeList[i]);
	                    }
	
	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };
	
	        return Ring;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * 圆环
	 * @module zrender/shape/Ring
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * @example
	 *     var Ring = require('zrender/shape/Ring');
	 *     var shape = new Ring({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r0: 30,
	 *             r: 50
	 *         }
	 *     });
	 *     zr.addShape(shape);
	 */
	
	/**
	 * @typedef {Object} IRingStyle
	 * @property {number} x 圆心x坐标
	 * @property {number} y 圆心y坐标
	 * @property {number} r0 内圆半径
	 * @property {number} r 外圆半径
	 * @property {string} [color='#000000'] 填充颜色
	 * @property {string} [strokeColor='#000000'] 描边颜色
	 * @property {string} [lineCape='butt'] 线帽样式，可以是 butt, round, square
	 * @property {number} [lineWidth=1] 描边宽度
	 * @property {number} [opacity=1] 绘制透明度
	 * @property {number} [shadowBlur=0] 阴影模糊度，大于0有效
	 * @property {string} [shadowColor='#000000'] 阴影颜色
	 * @property {number} [shadowOffsetX=0] 阴影横向偏移
	 * @property {number} [shadowOffsetY=0] 阴影纵向偏移
	 * @property {string} [text] 图形中的附加文本
	 * @property {string} [textColor='#000000'] 文本颜色
	 * @property {string} [textFont] 附加文本样式，eg:'bold 18px verdana'
	 * @property {string} [textPosition='end'] 附加文本位置, 可以是 inside, left, right, top, bottom
	 * @property {string} [textAlign] 默认根据textPosition自动设置，附加文本水平对齐。
	 *                                可以是start, end, left, right, center
	 * @property {string} [textBaseline] 默认根据textPosition自动设置，附加文本垂直对齐。
	 *                                可以是top, bottom, middle, alphabetic, hanging, ideographic
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(185);
	        
	        /**
	         * @alias module:zrender/shape/Ring
	         * @constructor
	         * @extends module:zrender/shape/Base
	         * @param {Object} options
	         */
	        var Ring = function (options) {
	            Base.call(this, options);
	            /**
	             * 圆环绘制样式
	             * @name module:zrender/shape/Ring#style
	             * @type {module:zrender/shape/Ring~IRingStyle}
	             */
	            /**
	             * 圆环高亮绘制样式
	             * @name module:zrender/shape/Ring#highlightStyle
	             * @type {module:zrender/shape/Ring~IRingStyle}
	             */
	        };
	
	        Ring.prototype = {
	            type: 'ring',
	
	            /**
	             * 创建圆环路径
	             * @param {CanvasRenderingContext2D} ctx
	             * @param {module:zrender/shape/Ring~IRingStyle} style
	             */
	            buildPath : function (ctx, style) {
	                // 非零环绕填充优化
	                ctx.arc(style.x, style.y, style.r, 0, Math.PI * 2, false);
	                ctx.moveTo(style.x + style.r0, style.y);
	                ctx.arc(style.x, style.y, style.r0, 0, Math.PI * 2, true);
	                return;
	            },
	
	            /**
	             * 计算返回圆环包围盒矩阵
	             * @param {module:zrender/shape/Ring~IRingStyle} style
	             * @return {module:zrender/shape/Base~IBoundingRect}
	             */
	            getRect : function (style) {
	                if (style.__rect) {
	                    return style.__rect;
	                }
	                
	                var lineWidth;
	                if (style.brushType == 'stroke' || style.brushType == 'fill') {
	                    lineWidth = style.lineWidth || 1;
	                }
	                else {
	                    lineWidth = 0;
	                }
	                style.__rect = {
	                    x : Math.round(style.x - style.r - lineWidth / 2),
	                    y : Math.round(style.y - style.r - lineWidth / 2),
	                    width : style.r * 2 + lineWidth,
	                    height : style.r * 2 + lineWidth
	                };
	                
	                return style.__rect;
	            }
	        };
	
	        __webpack_require__(168).inherits(Ring, Base);
	        return Ring;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(181);
	        var util = __webpack_require__(168);
	        var zrColor = __webpack_require__(187);
	        var zrArea = __webpack_require__(183);
	        var SectorShape = __webpack_require__(234);
	
	        function Spin(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Spin, Base);
	
	        /**
	         * 旋转
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Spin.prototype._start = function (addShapeHandle, refreshHandle) {
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#fff',
	                        textAlign : 'start'
	                    },
	                    backgroundColor : 'rgba(0, 0, 0, 0.8)'
	                }
	            );
	            var textShape = this.createTextShape(options.textStyle);
	            
	            var textGap = 10;
	            var textWidth = zrArea.getTextWidth(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            var textHeight = zrArea.getTextHeight(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            
	            // 特效默认配置
	            var effectOption =  util.merge(
	                this.options.effect || {},
	                {
	                    r0 : 9,
	                    r : 15,
	                    n : 18,
	                    color : '#fff',
	                    timeInterval : 100
	                }
	            );
	            
	            var location = this.getLocation(
	                this.options.textStyle,
	                textWidth + textGap + effectOption.r * 2,
	                Math.max(effectOption.r * 2, textHeight)
	            );
	            effectOption.x = location.x + effectOption.r;
	            effectOption.y = textShape.highlightStyle.y = location.y + location.height / 2;
	            textShape.highlightStyle.x = effectOption.x + effectOption.r + textGap;
	            
	            var background = this.createBackgroundShape(options.backgroundColor);
	            var n = effectOption.n;
	            var x = effectOption.x;
	            var y = effectOption.y;
	            var r0 = effectOption.r0;
	            var r = effectOption.r;
	            var color = effectOption.color;
	
	            // 初始化动画元素
	            var shapeList = [];
	            var preAngle = Math.round(180 / n);
	            for (var i = 0; i < n; i++) {
	                shapeList[i] = new SectorShape({
	                    highlightStyle  : {
	                        x : x,
	                        y : y,
	                        r0 : r0,
	                        r : r,
	                        startAngle : preAngle * i * 2,
	                        endAngle : preAngle * i * 2 + preAngle,
	                        color : zrColor.alpha(color, (i + 1) / n),
	                        brushType: 'fill'
	                    }
	                });
	            }
	
	            var pos = [ 0, x, y ];
	
	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	                    pos[0] -= 0.3;
	                    for (var i = 0; i < n; i++) {
	                        shapeList[i].rotation = pos;
	                        addShapeHandle(shapeList[i]);
	                    }
	
	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };
	
	        return Spin;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	        var Base = __webpack_require__(181);
	        var util = __webpack_require__(168);
	        var zrArea = __webpack_require__(183);
	        var RingShape = __webpack_require__(243);
	        var DropletShape = __webpack_require__(203);
	        var CircleShape = __webpack_require__(218);
	
	        function Whirling(options) {
	            Base.call(this, options);
	        }
	        util.inherits(Whirling, Base);
	
	        /**
	         * 旋转水滴
	         * 
	         * @param {Object} addShapeHandle
	         * @param {Object} refreshHandle
	         */
	        Whirling.prototype._start = function (addShapeHandle, refreshHandle) {
	            var options = util.merge(
	                this.options,
	                {
	                    textStyle : {
	                        color : '#888',
	                        textAlign : 'start'
	                    },
	                    backgroundColor : 'rgba(250, 250, 250, 0.8)'
	                }
	            );
	            var textShape = this.createTextShape(options.textStyle);
	            
	            var textGap = 10;
	            var textWidth = zrArea.getTextWidth(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            var textHeight = zrArea.getTextHeight(
	                textShape.highlightStyle.text, textShape.highlightStyle.textFont
	            );
	            
	            // 特效默认配置
	            var effectOption = util.merge(
	                this.options.effect || {},
	                {
	                    r : 18,
	                    colorIn : '#fff',
	                    colorOut : '#555',
	                    colorWhirl : '#6cf',
	                    timeInterval : 50
	                }
	            );
	            
	            var location = this.getLocation(
	                this.options.textStyle,
	                textWidth + textGap + effectOption.r * 2,
	                Math.max(effectOption.r * 2, textHeight)
	            );
	            effectOption.x = location.x + effectOption.r;
	            effectOption.y = textShape.highlightStyle.y = location.y + location.height / 2;
	            textShape.highlightStyle.x = effectOption.x + effectOption.r + textGap;
	            
	            var background = this.createBackgroundShape(options.backgroundColor);
	            // 初始化动画元素
	            var droplet = new DropletShape({
	                highlightStyle : {
	                    a : Math.round(effectOption.r / 2),
	                    b : Math.round(effectOption.r - effectOption.r / 6),
	                    brushType : 'fill',
	                    color : effectOption.colorWhirl
	                }
	            });
	            var circleIn = new CircleShape({
	                highlightStyle : {
	                    r : Math.round(effectOption.r / 6),
	                    brushType : 'fill',
	                    color : effectOption.colorIn
	                }
	            });
	            var circleOut = new RingShape({
	                highlightStyle : {
	                    r0 : Math.round(effectOption.r - effectOption.r / 3),
	                    r : effectOption.r,
	                    brushType : 'fill',
	                    color : effectOption.colorOut
	                }
	            });
	
	            var pos = [ 0, effectOption.x, effectOption.y ];
	
	            droplet.highlightStyle.x
	                = circleIn.highlightStyle.x
	                = circleOut.highlightStyle.x
	                = pos[1];
	            droplet.highlightStyle.y
	                = circleIn.highlightStyle.y
	                = circleOut.highlightStyle.y
	                = pos[2];
	
	            return setInterval(
	                function() {
	                    addShapeHandle(background);
	                    addShapeHandle(circleOut);
	                    pos[0] -= 0.3;
	                    droplet.rotation = pos;
	                    addShapeHandle(droplet);
	                    addShapeHandle(circleIn);
	                    addShapeHandle(textShape);
	                    refreshHandle();
	                },
	                effectOption.timeInterval
	            );
	        };
	
	        return Whirling;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
	var theme = {
	    // 默认色板
	    color: [
	        '#2ec7c9','#b6a2de','#5ab1ef','#ffb980','#d87a80',
	        '#8d98b3','#e5cf0d','#97b552','#95706d','#dc69aa',
	        '#07a2a4','#9a7fd1','#588dd5','#f5994e','#c05050',
	        '#59678c','#c9ab00','#7eb00a','#6f5553','#c14089'
	    ],
	
	    // 图表标题
	    title: {
	        textStyle: {
	            fontWeight: 'normal',
	            color: '#008acd'          // 主标题文字颜色
	        }
	    },
	    
	    // 值域
	    dataRange: {
	        itemWidth: 15,
	        color: ['#5ab1ef','#e0ffff']
	    },
	
	    // 工具箱
	    toolbox: {
	        color : ['#1e90ff', '#1e90ff', '#1e90ff', '#1e90ff'],
	        effectiveColor : '#ff4500'
	    },
	
	    // 提示框
	    tooltip: {
	        backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
	        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
	            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
	            lineStyle : {          // 直线指示器样式设置
	                color: '#008acd'
	            },
	            crossStyle: {
	                color: '#008acd'
	            },
	            shadowStyle : {                     // 阴影指示器样式设置
	                color: 'rgba(200,200,200,0.2)'
	            }
	        }
	    },
	
	    // 区域缩放控制器
	    dataZoom: {
	        dataBackgroundColor: '#efefff',            // 数据背景颜色
	        fillerColor: 'rgba(182,162,222,0.2)',   // 填充颜色
	        handleColor: '#008acd'    // 手柄颜色
	    },
	
	    // 网格
	    grid: {
	        borderColor: '#eee'
	    },
	
	    // 类目轴
	    categoryAxis: {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#008acd'
	            }
	        },
	        splitLine: {           // 分隔线
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#eee']
	            }
	        }
	    },
	
	    // 数值型坐标轴默认参数
	    valueAxis: {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#008acd'
	            }
	        },
	        splitArea : {
	            show : true,
	            areaStyle : {
	                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
	            }
	        },
	        splitLine: {           // 分隔线
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#eee']
	            }
	        }
	    },
	
	    polar : {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#ddd'
	            }
	        },
	        splitArea : {
	            show : true,
	            areaStyle : {
	                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
	            }
	        },
	        splitLine : {
	            lineStyle : {
	                color : '#ddd'
	            }
	        }
	    },
	
	    timeline : {
	        lineStyle : {
	            color : '#008acd'
	        },
	        controlStyle : {
	            normal : { color : '#008acd'},
	            emphasis : { color : '#008acd'}
	        },
	        symbol : 'emptyCircle',
	        symbolSize : 3
	    },
	
	    // 柱形图默认参数
	    bar: {
	        itemStyle: {
	            normal: {
	                barBorderRadius: 5
	            },
	            emphasis: {
	                barBorderRadius: 5
	            }
	        }
	    },
	
	    // 折线图默认参数
	    line: {
	        smooth : true,
	        symbol: 'emptyCircle',  // 拐点图形类型
	        symbolSize: 3           // 拐点图形大小
	    },
	    
	    // K线图默认参数
	    k: {
	        itemStyle: {
	            normal: {
	                color: '#d87a80',       // 阳线填充颜色
	                color0: '#2ec7c9',      // 阴线填充颜色
	                lineStyle: {
	                    color: '#d87a80',   // 阳线边框颜色
	                    color0: '#2ec7c9'   // 阴线边框颜色
	                }
	            }
	        }
	    },
	    
	    // 散点图默认参数
	    scatter: {
	        symbol: 'circle',    // 图形类型
	        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	    },
	
	    // 雷达图默认参数
	    radar : {
	        symbol: 'emptyCircle',    // 图形类型
	        symbolSize:3
	        //symbol: null,         // 拐点图形类型
	        //symbolRotate : null,  // 图形旋转控制
	    },
	
	    map: {
	        itemStyle: {
	            normal: {
	                areaStyle: {
	                    color: '#ddd'
	                },
	                label: {
	                    textStyle: {
	                        color: '#d87a80'
	                    }
	                }
	            },
	            emphasis: {                 // 也是选中样式
	                areaStyle: {
	                    color: '#fe994e'
	                }
	            }
	        }
	    },
	    
	    force : {
	        itemStyle: {
	            normal: {
	                linkStyle : {
	                    color : '#1e90ff'
	                }
	            }
	        }
	    },
	
	    chord : {
	        itemStyle : {
	            normal : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            },
	            emphasis : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            }
	        }
	    },
	
	    gauge : {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: [[0.2, '#2ec7c9'],[0.8, '#5ab1ef'],[1, '#d87a80']], 
	                width: 10
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            splitNumber: 10,   // 每份split细分多少段
	            length :15,        // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: 'auto'
	            }
	        },
	        splitLine: {           // 分隔线
	            length :22,         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: 'auto'
	            }
	        },
	        pointer : {
	            width : 5
	        }
	    },
	    
	    textStyle: {
	        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
	    }
	};
	
	    return theme;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
	var theme = {
	    // 默认色板
	    color: [
	        '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
	        '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD',
	        '#D7504B','#C6E579','#F4E001','#F0805A','#26C0C0'
	    ],
	
	    // 图表标题
	    title: {
	        textStyle: {
	            fontWeight: 'normal',
	            color: '#27727B'          // 主标题文字颜色
	        }
	    },
	
	    // 值域
	    dataRange: {
	        x:'right',
	        y:'center',
	        itemWidth: 5,
	        itemHeight:25,
	        color:['#C1232B','#FCCE10']
	    },
	
	    toolbox: {
	        color : [
	            '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
	            '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD'
	        ],
	        effectiveColor : '#ff4500'
	    },
	
	    // 提示框
	    tooltip: {
	        backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
	        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
	            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
	            lineStyle : {          // 直线指示器样式设置
	                color: '#27727B',
	                type: 'dashed'
	            },
	            crossStyle: {
	                color: '#27727B'
	            },
	            shadowStyle : {                     // 阴影指示器样式设置
	                color: 'rgba(200,200,200,0.3)'
	            }
	        }
	    },
	
	    // 区域缩放控制器
	    dataZoom: {
	        dataBackgroundColor: 'rgba(181,195,52,0.3)',            // 数据背景颜色
	        fillerColor: 'rgba(181,195,52,0.2)',   // 填充颜色
	        handleColor: '#27727B'    // 手柄颜色
	    },
	
	    // 网格
	    grid: {
	        borderWidth:0
	    },
	
	    // 类目轴
	    categoryAxis: {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#27727B'
	            }
	        },
	        splitLine: {           // 分隔线
	            show: false
	        }
	    },
	
	    // 数值型坐标轴默认参数
	    valueAxis: {
	        axisLine: {            // 坐标轴线
	            show: false
	        },
	        splitArea : {
	            show: false
	        },
	        splitLine: {           // 分隔线
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#ccc'],
	                type: 'dashed'
	            }
	        }
	    },
	
	    polar : {
	        axisLine: {            // 坐标轴线
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#ddd'
	            }
	        },
	        splitArea : {
	            show : true,
	            areaStyle : {
	                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
	            }
	        },
	        splitLine : {
	            lineStyle : {
	                color : '#ddd'
	            }
	        }
	    },
	
	    timeline : {
	        lineStyle : {
	            color : '#27727B'
	        },
	        controlStyle : {
	            normal : { color : '#27727B'},
	            emphasis : { color : '#27727B'}
	        },
	        symbol : 'emptyCircle',
	        symbolSize : 3
	    },
	
	    // 折线图默认参数
	    line: {
	        itemStyle: {
	            normal: {
	                borderWidth:2,
	                borderColor:'#fff',
	                lineStyle: {
	                    width: 3
	                }
	            },
	            emphasis: {
	                borderWidth:0
	            }
	        },
	        symbol: 'circle',  // 拐点图形类型
	        symbolSize: 3.5           // 拐点图形大小
	    },
	
	    // K线图默认参数
	    k: {
	        itemStyle: {
	            normal: {
	                color: '#C1232B',       // 阳线填充颜色
	                color0: '#B5C334',      // 阴线填充颜色
	                lineStyle: {
	                    width: 1,
	                    color: '#C1232B',   // 阳线边框颜色
	                    color0: '#B5C334'   // 阴线边框颜色
	                }
	            }
	        }
	    },
	
	    // 散点图默认参数
	    scatter: {
	        itemStyle: {
	            normal: {
	                borderWidth:1,
	                borderColor:'rgba(200,200,200,0.5)'
	            },
	            emphasis: {
	                borderWidth:0
	            }
	        },
	        symbol: 'star4',    // 图形类型
	        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	    },
	
	    // 雷达图默认参数
	    radar : {
	        symbol: 'emptyCircle',    // 图形类型
	        symbolSize:3
	        //symbol: null,         // 拐点图形类型
	        //symbolRotate : null,  // 图形旋转控制
	    },
	
	    map: {
	        itemStyle: {
	            normal: {
	                areaStyle: {
	                    color: '#ddd'
	                },
	                label: {
	                    textStyle: {
	                        color: '#C1232B'
	                    }
	                }
	            },
	            emphasis: {                 // 也是选中样式
	                areaStyle: {
	                    color: '#fe994e'
	                },
	                label: {
	                    textStyle: {
	                        color: 'rgb(100,0,0)'
	                    }
	                }
	            }
	        }
	    },
	
	    force : {
	        itemStyle: {
	            normal: {
	                linkStyle : {
	                    color : '#27727B'
	                }
	            }
	        }
	    },
	
	    chord : {
	        itemStyle : {
	            normal : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            },
	            emphasis : {
	                borderWidth: 1,
	                borderColor: 'rgba(128, 128, 128, 0.5)',
	                chordStyle : {
	                    lineStyle : {
	                        color : 'rgba(128, 128, 128, 0.5)'
	                    }
	                }
	            }
	        }
	    },
	
	    gauge : {
	        center:['50%','80%'],
	        radius:'100%',
	        startAngle: 180,
	        endAngle : 0,
	        axisLine: {            // 坐标轴线
	            show: true,        // 默认显示，属性show控制显示与否
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: [[0.2, '#B5C334'],[0.8, '#27727B'],[1, '#C1232B']],
	                width: '40%'
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            splitNumber: 2,   // 每份split细分多少段
	            length: 5,        // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#fff'
	            }
	        },
	        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#fff',
	                fontWeight:'bolder'
	            }
	        },
	        splitLine: {           // 分隔线
	            length: '5%',         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: '#fff'
	            }
	        },
	        pointer : {
	            width : '40%',
	            length: '80%',
	            color: '#fff'
	        },
	        title : {
	          offsetCenter: [0, -20],       // x, y，单位px
	          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            color: 'auto',
	            fontSize: 20
	          }
	        },
	        detail : {
	            offsetCenter: [0, 0],       // x, y，单位px
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: 'auto',
	                fontSize: 40
	            }
	        }
	    },
	
	    textStyle: {
	        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
	    }
	};
	
	    return theme;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by YikaJ on 15/12/9.
	 */
	'use strict';
	
	var _ = __webpack_require__(249);
	__webpack_require__(251);
	
	var dataCount = 15;
	
	module.exports = {
	  title: { text: '温度实时监控' },
	  tooltip: { show: true },
	  legend: { data: ['温度'] },
	  xAxis: [{
	    type: 'category',
	    data: _.range(0, dataCount, 0).map(function () {
	      return "";
	    })
	  }],
	  yAxis: [{ type: 'value' }],
	  series: [{
	    name: '温度监控',
	    type: 'line',
	    data: _.range(0, dataCount, 0)
	  }]
	};

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {
	
	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;
	
	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';
	
	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;
	
	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';
	
	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;
	
	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	
	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;
	
	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';
	
	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';
	
	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';
	
	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	
	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;
	
	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
	
	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);
	
	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;
	
	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;
	
	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;
	
	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;
	
	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;
	
	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
	
	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;
	
	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';
	
	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());
	
	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];
	
	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;
	
	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;
	
	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };
	
	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };
	
	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };
	
	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };
	
	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };
	
	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	
	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	
	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;
	
	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;
	
	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;
	
	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
	
	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;
	
	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;
	
	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }
	
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }
	
	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;
	
	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;
	
	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }
	
	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;
	
	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }
	
	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }
	
	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }
	
	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }
	
	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }
	
	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }
	
	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }
	
	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];
	
	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;
	
	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;
	
	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;
	
	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
	
	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;
	
	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;
	
	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;
	
	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;
	
	    /** Used to generate unique IDs. */
	    var idCounter = 0;
	
	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;
	
	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;
	
	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );
	
	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');
	
	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;
	
	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
	
	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;
	
	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;
	
	    /** Used to lookup unminified function names. */
	    var realNames = {};
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }
	
	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }
	
	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }
	
	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};
	
	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {
	
	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,
	
	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,
	
	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,
	
	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',
	
	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {
	
	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }
	
	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }
	
	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }
	
	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);
	
	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];
	
	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;
	
	        var iterIndex = -1,
	            value = array[index];
	
	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);
	
	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }
	
	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }
	
	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }
	
	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }
	
	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;
	
	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }
	
	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];
	
	      return result ? 0 : -1;
	    }
	
	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);
	
	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }
	
	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;
	
	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;
	
	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;
	
	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);
	
	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }
	
	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;
	
	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;
	
	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }
	
	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }
	
	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;
	
	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }
	
	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }
	
	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }
	
	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);
	
	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }
	
	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);
	
	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});
	
	      var index = -1,
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }
	
	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;
	
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	
	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);
	
	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());
	
	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }
	
	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];
	
	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;
	
	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];
	
	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);
	
	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }
	
	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;
	
	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;
	
	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;
	
	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);
	
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();
	
	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);
	
	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }
	
	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];
	
	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;
	
	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }
	
	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }
	
	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;
	
	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;
	
	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	
	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);
	
	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
	
	      stackA.pop();
	      stackB.pop();
	
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;
	
	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];
	
	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];
	
	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }
	
	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');
	
	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }
	
	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);
	
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;
	
	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }
	
	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];
	
	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;
	
	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);
	
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }
	
	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }
	
	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }
	
	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }
	
	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };
	
	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;
	
	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;
	
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;
	
	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }
	
	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;
	
	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;
	
	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });
	
	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });
	
	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }
	
	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];
	
	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;
	
	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;
	
	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }
	
	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;
	
	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }
	
	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;
	
	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];
	
	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }
	
	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);
	
	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;
	
	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;
	
	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }
	
	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }
	
	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);
	
	      view.set(new Uint8Array(buffer));
	      return result;
	    }
	
	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);
	
	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);
	
	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);
	
	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;
	
	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;
	
	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }
	
	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }
	
	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;
	
	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);
	
	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }
	
	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';
	
	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);
	
	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }
	
	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }
	
	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }
	
	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }
	
	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }
	
	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }
	
	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }
	
	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];
	
	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;
	
	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];
	
	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;
	
	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }
	
	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }
	
	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }
	
	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }
	
	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);
	
	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }
	
	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }
	
	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);
	
	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);
	
	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;
	
	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
	
	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);
	
	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;
	
	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;
	
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }
	
	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);
	
	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);
	
	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }
	
	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }
	
	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;
	
	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
	
	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);
	
	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;
	
	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
	
	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;
	
	        case errorTag:
	          return object.name == other.name && object.message == other.message;
	
	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;
	
	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;
	
	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;
	
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;
	
	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }
	
	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };
	
	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;
	
	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }
	
	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');
	
	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;
	
	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }
	
	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }
	
	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;
	
	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;
	
	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }
	
	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);
	
	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }
	
	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }
	
	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);
	
	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);
	
	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);
	
	        case numberTag:
	        case stringTag:
	          return new Ctor(object);
	
	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }
	
	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }
	
	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }
	
	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }
	
	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }
	
	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }
	
	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }
	
	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }
	
	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;
	
	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);
	
	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;
	
	      return data;
	    }
	
	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }
	
	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);
	
	      var index = -1,
	          length = props.length,
	          result = {};
	
	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }
	
	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);
	
	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }
	
	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;
	
	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);
	
	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());
	
	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;
	
	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));
	
	      var index = -1,
	          result = [];
	
	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }
	
	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }
	
	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }
	
	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));
	
	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }
	
	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }
	
	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();
	
	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);
	
	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }
	
	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }
	
	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }
	
	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }
	
	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }
	
	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];
	
	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];
	
	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });
	
	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];
	
	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;
	
	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];
	
	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);
	
	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });
	
	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;
	
	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }
	
	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }
	
	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }
	
	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();
	
	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }
	
	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });
	
	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;
	
	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }
	
	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }
	
	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });
	
	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;
	
	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }
	
	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);
	
	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};
	
	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;
	
	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }
	
	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }
	
	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }
	
	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }
	
	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }
	
	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });
	
	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;
	
	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }
	
	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	
	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }
	
	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }
	
	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });
	
	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);
	
	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);
	
	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }
	
	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);
	
	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });
	
	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });
	
	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });
	
	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }
	
	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });
	
	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }
	
	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);
	
	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);
	
	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }
	
	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;
	
	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];
	
	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }
	
	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }
	
	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }
	
	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }
	
	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);
	
	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }
	
	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });
	
	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }
	
	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }
	
	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }
	
	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });
	
	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);
	
	      var index = -1,
	          length = methodNames.length;
	
	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });
	
	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });
	
	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);
	
	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);
	
	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	
	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }
	
	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }
	
	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }
	
	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }
	
	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);
	
	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;
	
	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }
	
	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });
	
	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });
	
	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();
	
	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);
	
	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;
	
	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }
	
	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });
	
	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }
	
	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }
	
	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);
	
	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);
	
	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);
	
	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }
	
	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }
	
	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }
	
	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }
	
	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }
	
	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }
	
	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }
	
	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };
	
	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }
	
	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }
	
	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }
	
	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }
	
	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }
	
	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }
	
	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }
	
	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }
	
	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }
	
	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }
	
	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }
	
	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;
	
	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }
	
	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }
	
	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }
	
	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }
	
	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }
	
	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }
	
	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }
	
	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);
	
	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });
	
	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }
	
	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);
	
	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);
	
	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);
	
	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);
	
	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);
	
	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);
	
	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);
	
	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);
	
	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }
	
	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }
	
	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }
	
	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};
	
	      while (++index < length) {
	        var key = props[index],
	            value = object[key];
	
	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };
	
	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;
	
	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;
	
	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);
	
	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();
	
	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });
	
	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);
	
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);
	
	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }
	
	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });
	
	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }
	
	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);
	
	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;
	
	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }
	
	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);
	
	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }
	
	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;
	
	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });
	
	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }
	
	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }
	
	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');
	
	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);
	
	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }
	
	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }
	
	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;
	
	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);
	
	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }
	
	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();
	
	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);
	
	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }
	
	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);
	
	      return result;
	    }
	
	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });
	
	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
	
	      return string.lastIndexOf(target, position) == position;
	    }
	
	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;
	
	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);
	
	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);
	
	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";
	
	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');
	
	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';
	
	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);
	
	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;
	
	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });
	
	      source += "';\n";
	
	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');
	
	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';
	
	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });
	
	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }
	
	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }
	
	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }
	
	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }
	
	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;
	
	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);
	
	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }
	
	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }
	
	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }
	
	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }
	
	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }
	
	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }
	
	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });
	
	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });
	
	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;
	
	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;
	
	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];
	
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);
	
	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }
	
	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }
	
	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }
	
	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }
	
	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }
	
	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);
	
	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }
	
	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);
	
	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
	
	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }
	
	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');
	
	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');
	
	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);
	
	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);
	
	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');
	
	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	
	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;
	
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;
	
	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;
	
	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;
	
	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;
	
	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;
	
	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;
	
	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;
	
	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;
	
	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;
	
	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;
	
	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });
	
	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);
	
	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };
	
	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });
	
	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;
	
	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;
	
	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });
	
	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };
	
	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };
	
	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);
	
	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };
	
	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };
	
	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };
	
	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];
	
	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);
	
	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };
	
	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;
	
	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });
	
	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);
	
	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });
	
	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);
	
	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });
	
	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];
	
	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;
	
	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
	
	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;
	
	    return lodash;
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  // Export lodash.
	  var _ = runInContext();
	
	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;
	
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(250)(module), (function() { return this; }())))

/***/ },
/* 250 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts图表类：折线图
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var ChartBase = __webpack_require__(197);
	    
	    // 图形依赖
	    var PolylineShape = __webpack_require__(213);
	    var IconShape = __webpack_require__(198);
	    var HalfSmoothPolygonShape = __webpack_require__(252);
	    // 组件依赖
	    __webpack_require__(253);
	    __webpack_require__(259);
	    __webpack_require__(260);
	    
	    var ecConfig = __webpack_require__(167);
	    // 折线图默认参数
	    ecConfig.line = {
	        zlevel: 0,                  // 一级层叠
	        z: 2,                       // 二级层叠
	        clickable: true,
	        legendHoverLink: true,
	        // stack: null
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	        // 'nearest', 'min', 'max', 'average'
	        dataFilter: 'nearest',
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                label: {
	                    show: false
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                },
	                lineStyle: {
	                    width: 2,
	                    type: 'solid',
	                    shadowColor: 'rgba(0,0,0,0)', //默认透明
	                    shadowBlur: 0,
	                    shadowOffsetX: 0,
	                    shadowOffsetY: 0
	                }
	            },
	            emphasis: {
	                // color: 各异,
	                label: {
	                    show: false
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                }
	            }
	        },
	        // smooth: false,
	        // symbol: null,         // 拐点图形类型
	        symbolSize: 2,           // 拐点图形大小
	        // symbolRotate: null,   // 拐点图形旋转控制
	        showAllSymbol: false     // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	    };
	
	    var ecData = __webpack_require__(215);
	    var zrUtil = __webpack_require__(168);
	    var zrColor = __webpack_require__(187);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} series 数据
	     * @param {Object} component 组件
	     */
	    function Line(ecTheme, messageCenter, zr, option, myChart){
	        // 图表基类
	        ChartBase.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this.refresh(option);
	    }
	    
	    Line.prototype = {
	        type: ecConfig.CHART_TYPE_LINE,
	        /**
	         * 绘制图形
	         */
	        _buildShape: function () {
	            this.finalPLMap = {}; // 完成的point list(PL)
	            this._buildPosition();
	        },
	
	        /**
	         * 构建类目轴为水平方向的折线图系列
	         */
	        _buildHorizontal: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            // 确定类目轴和数值轴，同一方向随便找一个即可
	            var seriesIndex = locationMap[0][0];
	            var serie = series[seriesIndex];
	            var categoryAxis = this.component.xAxis.getAxis(serie.xAxisIndex || 0);
	            var valueAxis;  // 数值轴各异
	
	            var x;
	            var y;
	            var lastYP; // 正向堆积处理
	            var baseYP;
	            var lastYN; // 负向堆积处理
	            var baseYN;
	            //var this.finalPLMap = {}; // 完成的point list(PL)
	            var curPLMap = {};   // 正在记录的point list(PL)
	            var data;
	            var value;
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                if (categoryAxis.getNameByIndex(i) == null) {
	                    // 系列数据超出类目轴长度
	                    break;
	                }
	                x = categoryAxis.getCoordByIndex(i);
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    // 堆积数据用第一条valueAxis
	                    valueAxis = this.component.yAxis.getAxis(
	                        series[locationMap[j][0]].yAxisIndex || 0
	                    );
	                    baseYP = lastYP = baseYN = lastYN = valueAxis.getCoord(0);
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        curPLMap[seriesIndex] = curPLMap[seriesIndex] || [];
	                        xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                                || {
	                                                    min: Number.POSITIVE_INFINITY,
	                                                    max: Number.NEGATIVE_INFINITY,
	                                                    sum: 0,
	                                                    counter: 0,
	                                                    average: 0
	                                                };
	                        if (value === '-') {
	                            // 空数据则把正在记录的curPLMap添加到finalPLMap中
	                            if (curPLMap[seriesIndex].length > 0) {
	                                this.finalPLMap[seriesIndex] =
	                                    this.finalPLMap[seriesIndex] || [];
	
	                                this.finalPLMap[seriesIndex].push(
	                                    curPLMap[seriesIndex]
	                                );
	
	                                curPLMap[seriesIndex] = [];
	                            }
	                            continue;
	                        }
	                        //y = valueAxis.getCoord(value);
	                        if (value >= 0) {
	                            // 正向堆积
	                            lastYP -= m > 0
	                                      ? valueAxis.getCoordSize(value)
	                                      : (baseYP - valueAxis.getCoord(value));
	                            y = lastYP;
	                        }
	                        else if (value < 0){
	                            // 负向堆积
	                            lastYN += m > 0 
	                                      ? valueAxis.getCoordSize(value)
	                                      : (valueAxis.getCoord(value) - baseYN);
	                            y = lastYN;
	                        }
	                        curPLMap[seriesIndex].push(
	                            [x, y, i, categoryAxis.getNameByIndex(i), x, baseYP]
	                        );
	                        
	                        if (xMarkMap[seriesIndex].min > value) {
	                            xMarkMap[seriesIndex].min = value;
	                            xMarkMap[seriesIndex].minY = y;
	                            xMarkMap[seriesIndex].minX = x;
	                        }
	                        if (xMarkMap[seriesIndex].max < value) {
	                            xMarkMap[seriesIndex].max = value;
	                            xMarkMap[seriesIndex].maxY = y;
	                            xMarkMap[seriesIndex].maxX = x;
	                        }
	                        xMarkMap[seriesIndex].sum += value;
	                        xMarkMap[seriesIndex].counter++;
	                    }
	                }
	                // 补充空数据的拖拽提示
	                lastYP = this.component.grid.getY();
	                var symbolSize;
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        if (value != '-') {
	                            // 只关心空数据
	                            continue;
	                        }
	                        if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                            symbolSize = this.deepQuery(
	                                [data, serie],
	                                'symbolSize'
	                            );
	                            lastYP += symbolSize * 2 + 5;
	                            y = lastYP;
	                            this.shapeList.push(this._getCalculableItem(
	                                seriesIndex, i, categoryAxis.getNameByIndex(i),
	                                x, y, 'horizontal'
	                            ));
	                        }
	                    }
	                }
	            }
	            
	            // 把剩余未完成的curPLMap全部添加到finalPLMap中
	            for (var sId in curPLMap) {
	                if (curPLMap[sId].length > 0) {
	                    this.finalPLMap[sId] = this.finalPLMap[sId] || [];
	                    this.finalPLMap[sId].push(curPLMap[sId]);
	                    curPLMap[sId] = [];
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'y');
	            
	            this._buildBorkenLine(seriesArray, this.finalPLMap, categoryAxis, 'horizontal');
	        },
	
	        /**
	         * 构建类目轴为垂直方向的折线图系列
	         */
	        _buildVertical: function (seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            // 确定类目轴和数值轴，同一方向随便找一个即可
	            var seriesIndex = locationMap[0][0];
	            var serie = series[seriesIndex];
	            var categoryAxis = this.component.yAxis.getAxis(serie.yAxisIndex || 0);
	            var valueAxis;  // 数值轴各异
	
	            var x;
	            var y;
	            var lastXP; // 正向堆积处理
	            var baseXP;
	            var lastXN; // 负向堆积处理
	            var baseXN;
	            //var this.finalPLMap = {}; // 完成的point list(PL)
	            var curPLMap = {};   // 正在记录的point list(PL)
	            var data;
	            var value;
	            for (var i = 0, l = maxDataLength; i < l; i++) {
	                if (categoryAxis.getNameByIndex(i) == null) {
	                    // 系列数据超出类目轴长度
	                    break;
	                }
	                y = categoryAxis.getCoordByIndex(i);
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    // 堆积数据用第一条valueAxis
	                    valueAxis = this.component.xAxis.getAxis(
	                        series[locationMap[j][0]].xAxisIndex || 0
	                    );
	                    baseXP = lastXP = baseXN = lastXN = valueAxis.getCoord(0);
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        curPLMap[seriesIndex] = curPLMap[seriesIndex] || [];
	                        xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                                || {
	                                                    min: Number.POSITIVE_INFINITY,
	                                                    max: Number.NEGATIVE_INFINITY,
	                                                    sum: 0,
	                                                    counter: 0,
	                                                    average: 0
	                                                };
	                        if (value === '-') {
	                            // 空数据则把正在记录的curPLMap添加到finalPLMap中
	                            if (curPLMap[seriesIndex].length > 0) {
	                                this.finalPLMap[seriesIndex] =
	                                    this.finalPLMap[seriesIndex] || [];
	
	                                this.finalPLMap[seriesIndex].push(
	                                    curPLMap[seriesIndex]
	                                );
	
	                                curPLMap[seriesIndex] = [];
	                            }
	                            continue;
	                        }
	                        //x = valueAxis.getCoord(value);
	                        if (value >= 0) {
	                            // 正向堆积
	                            lastXP += m > 0
	                                      ? valueAxis.getCoordSize(value)
	                                      : (valueAxis.getCoord(value) - baseXP);
	                            x = lastXP;
	                        }
	                        else if (value < 0){
	                            // 负向堆积
	                            lastXN -= m > 0
	                                      ? valueAxis.getCoordSize(value)
	                                      : (baseXN - valueAxis.getCoord(value));
	                            x = lastXN;
	                        }
	                        curPLMap[seriesIndex].push(
	                            [x, y, i, categoryAxis.getNameByIndex(i), baseXP, y]
	                        );
	                        
	                        if (xMarkMap[seriesIndex].min > value) {
	                            xMarkMap[seriesIndex].min = value;
	                            xMarkMap[seriesIndex].minX = x;
	                            xMarkMap[seriesIndex].minY = y;
	                        }
	                        if (xMarkMap[seriesIndex].max < value) {
	                            xMarkMap[seriesIndex].max = value;
	                            xMarkMap[seriesIndex].maxX = x;
	                            xMarkMap[seriesIndex].maxY = y;
	                        }
	                        xMarkMap[seriesIndex].sum += value;
	                        xMarkMap[seriesIndex].counter++;
	                    }
	                }
	                // 补充空数据的拖拽提示
	                lastXP = this.component.grid.getXend();
	                var symbolSize;
	                for (var j = 0, k = locationMap.length; j < k; j++) {
	                    for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                        seriesIndex = locationMap[j][m];
	                        serie = series[seriesIndex];
	                        data = serie.data[i];
	                        value = this.getDataFromOption(data, '-');
	                        if (value != '-') {
	                            // 只关心空数据
	                            continue;
	                        }
	                        if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                            symbolSize = this.deepQuery(
	                                [data, serie],
	                                'symbolSize'
	                            );
	                            lastXP -= symbolSize * 2 + 5;
	                            x = lastXP;
	                            this.shapeList.push(this._getCalculableItem(
	                                seriesIndex, i, categoryAxis.getNameByIndex(i),
	                                x, y, 'vertical'
	                            ));
	                        }
	                    }
	                }
	            }
	
	            // 把剩余未完成的curPLMap全部添加到finalPLMap中
	            for (var sId in curPLMap) {
	                if (curPLMap[sId].length > 0) {
	                    this.finalPLMap[sId] = this.finalPLMap[sId] || [];
	                    this.finalPLMap[sId].push(curPLMap[sId]);
	                    curPLMap[sId] = [];
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'x');
	            
	            this._buildBorkenLine(seriesArray, this.finalPLMap, categoryAxis, 'vertical');
	        },
	
	        /**
	         * 构建双数值轴折线图 
	         */
	        _buildOther: function(seriesArray, maxDataLength, locationMap, xMarkMap) {
	            var series = this.series;
	            var curPLMap = {};   // 正在记录的point list(PL)
	            var xAxis;
	            
	            for (var j = 0, k = locationMap.length; j < k; j++) {
	                for (var m = 0, n = locationMap[j].length; m < n; m++) {
	                    var seriesIndex = locationMap[j][m];
	                    var serie = series[seriesIndex];
	                    xAxis = this.component.xAxis.getAxis(serie.xAxisIndex || 0);
	                    var yAxis = this.component.yAxis.getAxis(serie.yAxisIndex || 0);
	                    var baseY = yAxis.getCoord(0);
	                    
	                    curPLMap[seriesIndex] = curPLMap[seriesIndex] || [];
	                    xMarkMap[seriesIndex] = xMarkMap[seriesIndex] 
	                                            || {
	                                                min0: Number.POSITIVE_INFINITY,
	                                                min1: Number.POSITIVE_INFINITY,
	                                                max0: Number.NEGATIVE_INFINITY,
	                                                max1: Number.NEGATIVE_INFINITY,
	                                                sum0: 0,
	                                                sum1: 0,
	                                                counter0: 0,
	                                                counter1: 0,
	                                                average0: 0,
	                                                average1: 0
	                                            };
	                    
	                    for (var i = 0, l = serie.data.length; i < l; i++) {
	                        var data = serie.data[i];
	                        var value = this.getDataFromOption(data, '-');
	                        if (!(value instanceof Array)) {
	                            continue;
	                        }
	                        
	                        var x = xAxis.getCoord(value[0]);
	                        var y = yAxis.getCoord(value[1]);
	                        curPLMap[seriesIndex].push(
	                            // x, y, dataIndex, name, 填充用
	                            [x, y, i, value[0], x, baseY]
	                        );
	                        
	                        if (xMarkMap[seriesIndex].min0 > value[0]) {
	                            xMarkMap[seriesIndex].min0 = value[0];
	                            xMarkMap[seriesIndex].minY0 = y;
	                            xMarkMap[seriesIndex].minX0 = x;
	                        }
	                        if (xMarkMap[seriesIndex].max0 < value[0]) {
	                            xMarkMap[seriesIndex].max0 = value[0];
	                            xMarkMap[seriesIndex].maxY0 = y;
	                            xMarkMap[seriesIndex].maxX0 = x;
	                        }
	                        xMarkMap[seriesIndex].sum0 += value[0];
	                        xMarkMap[seriesIndex].counter0++;
	                        
	                        if (xMarkMap[seriesIndex].min1 > value[1]) {
	                            xMarkMap[seriesIndex].min1 = value[1];
	                            xMarkMap[seriesIndex].minY1 = y;
	                            xMarkMap[seriesIndex].minX1 = x;
	                        }
	                        if (xMarkMap[seriesIndex].max1 < value[1]) {
	                            xMarkMap[seriesIndex].max1 = value[1];
	                            xMarkMap[seriesIndex].maxY1 = y;
	                            xMarkMap[seriesIndex].maxX1 = x;
	                        }
	                        xMarkMap[seriesIndex].sum1 += value[1];
	                        xMarkMap[seriesIndex].counter1++;
	                    }
	                }
	            }
	            
	            // 把剩余未完成的curPLMap全部添加到finalPLMap中
	            for (var sId in curPLMap) {
	                if (curPLMap[sId].length > 0) {
	                    this.finalPLMap[sId] = this.finalPLMap[sId] || [];
	                    this.finalPLMap[sId].push(curPLMap[sId]);
	                    curPLMap[sId] = [];
	                }
	            }
	            
	            this._calculMarkMapXY(xMarkMap, locationMap, 'xy');
	            
	            this._buildBorkenLine(seriesArray, this.finalPLMap, xAxis, 'other');
	        },
	        
	        /**
	         * 生成折线和折线上的拐点
	         */
	        _buildBorkenLine: function (seriesArray, pointList, categoryAxis, curOrient) {
	            var orient = curOrient == 'other' ? 'horizontal' : curOrient;
	            var series = this.series;
	            var data;
	            
	            // 堆积层叠需求，反顺序构建
	            for (var sIdx = seriesArray.length - 1; sIdx >= 0; sIdx--) {
	                var seriesIndex = seriesArray[sIdx];
	                var serie = series[seriesIndex];
	                var seriesPL = pointList[seriesIndex];
	                if (serie.type === this.type && seriesPL != null) {
	                    var bbox = this._getBbox(seriesIndex, orient);
	                    var defaultColor = this._sIndex2ColorMap[seriesIndex];
	                    // 折线相关，多级控制
	                    var lineWidth = this.query(
	                        serie, 'itemStyle.normal.lineStyle.width'
	                    );
	                    var lineType = this.query(
	                        serie, 'itemStyle.normal.lineStyle.type'
	                    );
	                    var lineColor = this.query(
	                        serie, 'itemStyle.normal.lineStyle.color'
	                    );
	                    var normalColor = this.getItemStyleColor(
	                        this.query(serie, 'itemStyle.normal.color'), seriesIndex, -1
	                    );
	
	                    // 填充相关
	                    var isFill = this.query(serie, 'itemStyle.normal.areaStyle') != null;
	                    var fillNormalColor = this.query(
	                        serie, 'itemStyle.normal.areaStyle.color'
	                    );
	
	                    for (var i = 0, l = seriesPL.length; i < l; i++) {
	                        var singlePL = seriesPL[i];
	                        var isLarge = curOrient != 'other' && this._isLarge(orient, singlePL);
	                        if (!isLarge) { // 非大数据模式才显示拐点symbol
	                            for (var j = 0, k = singlePL.length; j < k; j++) {
	                                data = serie.data[singlePL[j][2]];
	                                if (this.deepQuery([data, serie, this.option], 'calculable') // 可计算
	                                    || this.deepQuery([data, serie], 'showAllSymbol')        // 全显示
	                                    || (categoryAxis.type === 'categoryAxis'                 // 主轴非空
	                                        && categoryAxis.isMainAxis(singlePL[j][2])
	                                        && this.deepQuery([data, serie], 'symbol') != 'none'
	                                       )
	                                ) {
	                                    this.shapeList.push(this._getSymbol(
	                                        seriesIndex,
	                                        singlePL[j][2], // dataIndex
	                                        singlePL[j][3], // name
	                                        singlePL[j][0], // x
	                                        singlePL[j][1], // y
	                                        orient
	                                    ));
	                                }
	                            }
	                        }
	                        else {
	                            // 大数据模式截取pointList
	                            singlePL = this._getLargePointList(
	                                orient, singlePL, serie.dataFilter
	                            );
	                        }
	
	                        // 折线图
	                        var polylineShape = new PolylineShape({
	                            zlevel: serie.zlevel,
	                            z: serie.z,
	                            style: {
	                                miterLimit: lineWidth,
	                                pointList: singlePL,
	                                strokeColor: lineColor
	                                             || normalColor 
	                                             || defaultColor,
	                                lineWidth: lineWidth,
	                                lineType: lineType,
	                                smooth: this._getSmooth(serie.smooth),
	                                smoothConstraint: bbox,
	                                shadowColor: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowColor'
	                                ),
	                                shadowBlur: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowBlur'
	                                ),
	                                shadowOffsetX: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowOffsetX'
	                                ),
	                                shadowOffsetY: this.query(
	                                  serie,
	                                  'itemStyle.normal.lineStyle.shadowOffsetY'
	                                )
	                            },
	                            hoverable: false,
	                            _main: true,
	                            _seriesIndex: seriesIndex,
	                            _orient: orient
	                        });
	                        
	                        ecData.pack(
	                            polylineShape,
	                            series[seriesIndex], seriesIndex,
	                            0, i, series[seriesIndex].name
	                        );
	                        
	                        this.shapeList.push(polylineShape);
	                        
	                        if (isFill) {
	                            var halfSmoothPolygonShape = new HalfSmoothPolygonShape({
	                                zlevel: serie.zlevel,
	                                z: serie.z,
	                                style: {
	                                    miterLimit: lineWidth,
	                                    pointList: zrUtil.clone(singlePL).concat([
	                                        [
	                                            singlePL[singlePL.length - 1][4],
	                                            singlePL[singlePL.length - 1][5]
	                                        ],
	                                        [
	                                            singlePL[0][4],
	                                            singlePL[0][5]
	                                        ]
	                                    ]),
	                                    brushType: 'fill',
	                                    smooth: this._getSmooth(serie.smooth),
	                                    smoothConstraint: bbox,
	                                    color: fillNormalColor
	                                           ? fillNormalColor
	                                           : zrColor.alpha(defaultColor,0.5)
	                                },
	                                highlightStyle: {
	                                    brushType: 'fill'
	                                },
	                                hoverable: false,
	                                _main: true,
	                                _seriesIndex: seriesIndex,
	                                _orient: orient
	                            });
	                            ecData.pack(
	                                halfSmoothPolygonShape,
	                                series[seriesIndex], seriesIndex,
	                                0, i, series[seriesIndex].name
	                            );
	                            this.shapeList.push(halfSmoothPolygonShape);
	                        }
	                    }
	                }
	            }
	        },
	        
	        _getBbox: function(seriesIndex, orient) {
	            var bbox = this.component.grid.getBbox();
	            var xMarkMap = this.xMarkMap[seriesIndex];
	            if (xMarkMap.minX0 != null) {
	                return [
	                    [
	                        Math.min(xMarkMap.minX0, xMarkMap.maxX0, xMarkMap.minX1, xMarkMap.maxX1),
	                        Math.min(xMarkMap.minY0, xMarkMap.maxY0, xMarkMap.minY1, xMarkMap.maxY1)
	                    ],
	                    [
	                        Math.max(xMarkMap.minX0, xMarkMap.maxX0, xMarkMap.minX1, xMarkMap.maxX1),
	                        Math.max(xMarkMap.minY0, xMarkMap.maxY0, xMarkMap.minY1, xMarkMap.maxY1)
	                    ]
	                ];
	            }
	            else if (orient === 'horizontal') {
	                bbox[0][1] = Math.min(xMarkMap.minY, xMarkMap.maxY);
	                bbox[1][1] = Math.max(xMarkMap.minY, xMarkMap.maxY);
	            }
	            else {
	                bbox[0][0] = Math.min(xMarkMap.minX, xMarkMap.maxX);
	                bbox[1][0] = Math.max(xMarkMap.minX, xMarkMap.maxX);
	            }
	            return bbox;
	        },
	        
	        _isLarge: function(orient, singlePL) {
	            if (singlePL.length < 2) {
	                return false;
	            }
	            else {
	                return orient === 'horizontal'
	                       ? (Math.abs(singlePL[0][0] - singlePL[1][0]) < 0.5)
	                       : (Math.abs(singlePL[0][1] - singlePL[1][1]) < 0.5);
	            }
	        },
	        
	        /**
	         * 大规模pointList优化 
	         */
	        _getLargePointList: function(orient, singlePL, filter) {
	            var total;
	            if (orient === 'horizontal') {
	                total = this.component.grid.getWidth();
	            }
	            else {
	                total = this.component.grid.getHeight();
	            }
	            
	            var len = singlePL.length;
	            var newList = [];
	
	            if (typeof(filter) != 'function') {
	                switch (filter) {
	                    case 'min':
	                        filter = function (arr) {
	                            return Math.max.apply(null, arr);
	                        };
	                        break;
	                    case 'max':
	                        filter = function (arr) {
	                            return Math.min.apply(null, arr);
	                        };
	                        break;
	                    case 'average':
	                        filter = function (arr) {
	                            var total = 0;
	                            for (var i = 0; i < arr.length; i++) {
	                                total += arr[i];
	                            }
	                            return total / arr.length;
	                        };
	                        break;
	                    default:
	                        filter = function (arr) {
	                            return arr[0];
	                        }
	                }
	            }
	
	            var windowData = [];
	            for (var i = 0; i < total; i++) {
	                var idx0 = Math.floor(len / total * i);
	                var idx1 = Math.min(Math.floor(len / total * (i + 1)), len);
	                if (idx1 <= idx0) {
	                    continue;
	                }
	
	                for (var j = idx0; j < idx1; j++) {
	                    windowData[j - idx0] = orient === 'horizontal'
	                        ? singlePL[j][1] : singlePL[j][0];
	                }
	
	                windowData.length = idx1 - idx0;
	                var filteredVal = filter(windowData);
	                var nearestIdx = -1;
	                var minDist = Infinity;
	                // 寻找值最相似的点，使用其其它属性
	                for (var j = idx0; j < idx1; j++) {
	                    var val = orient === 'horizontal'
	                        ? singlePL[j][1] : singlePL[j][0];
	                    var dist = Math.abs(val - filteredVal);
	                    if (dist < minDist) {
	                        nearestIdx = j;
	                        minDist = dist;
	                    }
	                }
	
	                var newItem = singlePL[nearestIdx].slice();
	                if (orient === 'horizontal') {
	                    newItem[1] = filteredVal;
	                }
	                else {
	                    newItem[0] = filteredVal;
	                }
	                newList.push(newItem);
	            }
	            return newList;
	        },
	
	        _getSmooth: function (isSmooth/*, pointList, orient*/) {
	            if (isSmooth) {
	                /* 不科学啊，发现0.3通用了
	                var delta;
	                if (orient === 'horizontal') {
	                    delta = Math.abs(pointList[0][0] - pointList[1][0]);
	                }
	                else {
	                    delta = Math.abs(pointList[0][1] - pointList[1][1]);
	                }
	                */
	                return 0.3;
	            }
	            else {
	                return 0;
	            }
	        },
	
	        /**
	         * 生成空数据所需的可计算提示图形
	         */
	        _getCalculableItem: function (seriesIndex, dataIndex, name, x, y, orient) {
	            var series = this.series;
	            var color = series[seriesIndex].calculableHolderColor
	                        || this.ecTheme.calculableHolderColor
	                        || ecConfig.calculableHolderColor;
	
	            var itemShape = this._getSymbol(
	                seriesIndex, dataIndex, name,
	                x, y, orient
	            );
	            itemShape.style.color = color;
	            itemShape.style.strokeColor = color;
	            itemShape.rotation = [0,0];
	            itemShape.hoverable = false;
	            itemShape.draggable = false;
	            itemShape.style.text = undefined;
	
	            return itemShape;
	        },
	
	        /**
	         * 生成折线图上的拐点图形
	         */
	        _getSymbol: function (seriesIndex, dataIndex, name, x, y, orient) {
	            var series = this.series;
	            var serie = series[seriesIndex];
	            var data = serie.data[dataIndex];
	            
	            var itemShape = this.getSymbolShape(
	                serie, seriesIndex, data, dataIndex, name, 
	                x, y,
	                this._sIndex2ShapeMap[seriesIndex], 
	                this._sIndex2ColorMap[seriesIndex],
	                '#fff',
	                orient === 'vertical' ? 'horizontal' : 'vertical' // 翻转
	            );
	            itemShape.zlevel = serie.zlevel;
	            itemShape.z = serie.z + 1;
	            
	            if (this.deepQuery([data, serie, this.option], 'calculable')) {
	                this.setCalculable(itemShape);
	                itemShape.draggable = true;
	            }
	            
	            return itemShape;
	        },
	
	        // 位置转换
	        getMarkCoord: function (seriesIndex, mpData) {
	            var serie = this.series[seriesIndex];
	            var xMarkMap = this.xMarkMap[seriesIndex];
	            var xAxis = this.component.xAxis.getAxis(serie.xAxisIndex);
	            var yAxis = this.component.yAxis.getAxis(serie.yAxisIndex);
	            
	            if (mpData.type
	                && (mpData.type === 'max' || mpData.type === 'min' || mpData.type === 'average')
	            ) {
	                // 特殊值内置支持
	                var valueIndex = mpData.valueIndex != null 
	                                 ? mpData.valueIndex 
	                                 : xMarkMap.maxX0 != null 
	                                   ? '1' : '';
	                return [
	                    xMarkMap[mpData.type + 'X' + valueIndex],
	                    xMarkMap[mpData.type + 'Y' + valueIndex],
	                    xMarkMap[mpData.type + 'Line' + valueIndex],
	                    xMarkMap[mpData.type + valueIndex]
	                ];
	            }
	            
	            return [
	                typeof mpData.xAxis != 'string' && xAxis.getCoordByIndex
	                    ? xAxis.getCoordByIndex(mpData.xAxis || 0)
	                    : xAxis.getCoord(mpData.xAxis || 0),
	                
	                typeof mpData.yAxis != 'string' && yAxis.getCoordByIndex
	                    ? yAxis.getCoordByIndex(mpData.yAxis || 0)
	                    : yAxis.getCoord(mpData.yAxis || 0)
	            ];
	        },
	        
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            if (newOption) {
	                this.option = newOption;
	                this.series = newOption.series;
	            }
	            
	            this.backupShapeList();
	            this._buildShape();
	        },
	        
	        ontooltipHover: function (param, tipShape) {
	            var seriesIndex = param.seriesIndex;
	            var dataIndex = param.dataIndex;
	            var seriesPL;
	            var singlePL;
	            var len = seriesIndex.length;
	            while (len--) {
	                seriesPL = this.finalPLMap[seriesIndex[len]];
	                if (seriesPL) {
	                    for (var i = 0, l = seriesPL.length; i < l; i++) {
	                        singlePL = seriesPL[i];
	                        for (var j = 0, k = singlePL.length; j < k; j++) {
	                            if (dataIndex === singlePL[j][2]) {
	                                tipShape.push(this._getSymbol(
	                                    seriesIndex[len],   // seriesIndex
	                                    singlePL[j][2],     // dataIndex
	                                    singlePL[j][3],     // name
	                                    singlePL[j][0],     // x
	                                    singlePL[j][1],     // y
	                                    'horizontal'
	                                ));
	                            }
	                        }
	                    }
	                }
	            }
	        },
	
	        /**
	         * 动态数据增加动画 
	         */
	        addDataAnimation: function (params, done) {
	            var series = this.series;
	            var aniMap = {}; // seriesIndex索引参数
	            for (var i = 0, l = params.length; i < l; i++) {
	                aniMap[params[i][0]] = params[i];
	            }
	            var x;
	            var dx;
	            var y;
	            var dy;
	            var seriesIndex;
	            var pointList;
	            var isHorizontal; // 是否横向布局， isHorizontal;
	
	            var aniCount = 0;
	            function animationDone() {
	                aniCount--;
	                if (aniCount === 0) {
	                    done && done();
	                }
	            }
	            function animationDuring(target) {
	                // 强制更新曲线控制点
	                target.style.controlPointList = null;
	            }
	
	            for (var i = this.shapeList.length - 1; i >= 0; i--) {
	                seriesIndex = this.shapeList[i]._seriesIndex;
	                if (aniMap[seriesIndex] && !aniMap[seriesIndex][3]) {
	                    // 有数据删除才有移动的动画
	                    if (this.shapeList[i]._main && this.shapeList[i].style.pointList.length > 1) {
	                        pointList = this.shapeList[i].style.pointList;
	                        // 主线动画
	                        dx = Math.abs(pointList[0][0] - pointList[1][0]);
	                        dy = Math.abs(pointList[0][1] - pointList[1][1]);
	                        isHorizontal = this.shapeList[i]._orient === 'horizontal';
	                            
	                        if (aniMap[seriesIndex][2]) {
	                            // 队头加入删除末尾
	                            if (this.shapeList[i].type === 'half-smooth-polygon') {
	                                //区域图
	                                var len = pointList.length;
	                                this.shapeList[i].style.pointList[len - 3] = pointList[len - 2];
	                                this.shapeList[i].style.pointList[len - 3][isHorizontal ? 0 : 1]
	                                    = pointList[len - 4][isHorizontal ? 0 : 1];
	                                this.shapeList[i].style.pointList[len - 2] = pointList[len - 1];
	                            }
	                            this.shapeList[i].style.pointList.pop();
	                            isHorizontal ? (x = dx, y = 0) : (x = 0, y = -dy);
	                        }
	                        else {
	                            // 队尾加入删除头部
	                            this.shapeList[i].style.pointList.shift();
	                            if (this.shapeList[i].type === 'half-smooth-polygon') {
	                                //区域图
	                                var targetPoint =this.shapeList[i].style.pointList.pop();
	                                isHorizontal
	                                ? (targetPoint[0] = pointList[0][0])
	                                : (targetPoint[1] = pointList[0][1]);
	                                this.shapeList[i].style.pointList.push(targetPoint);
	                            }
	                            isHorizontal ? (x = -dx, y = 0) : (x = 0, y = dy);
	                        }
	                        this.shapeList[i].style.controlPointList = null;
	                        
	                        this.zr.modShape(this.shapeList[i]);
	                    }
	                    else {
	                        // 拐点动画
	                        if (aniMap[seriesIndex][2] 
	                            && this.shapeList[i]._dataIndex 
	                                === series[seriesIndex].data.length - 1
	                        ) {
	                            // 队头加入删除末尾
	                            this.zr.delShape(this.shapeList[i].id);
	                            continue;
	                        }
	                        else if (!aniMap[seriesIndex][2] 
	                                 && this.shapeList[i]._dataIndex === 0
	                        ) {
	                            // 队尾加入删除头部
	                            this.zr.delShape(this.shapeList[i].id);
	                            continue;
	                        }
	                    }
	                    this.shapeList[i].position = [0, 0];
	
	                    aniCount++;
	                    this.zr.animate(this.shapeList[i].id, '')
	                        .when(
	                            this.query(this.option, 'animationDurationUpdate'),
	                            { position: [ x, y ] }
	                        )
	                        .during(animationDuring)
	                        .done(animationDone)
	                        .start();
	                }
	            }
	
	            // 没有动画
	            if (!aniCount) {
	                done && done();
	            }
	        }
	    };
	
	    function legendLineIcon(ctx, style, refreshNextFrame) {
	        var x = style.x;
	        var y = style.y;
	        var width = style.width;
	        var height = style.height;
	        
	        var dy = height / 2;
	        
	        if (style.symbol.match('empty')) {
	            ctx.fillStyle = '#fff';
	        }
	        style.brushType = 'both';
	        
	        var symbol = style.symbol.replace('empty', '').toLowerCase();
	        if (symbol.match('star')) {
	            dy = (symbol.replace('star','') - 0) || 5;
	            y -= 1;
	            symbol = 'star';
	        } 
	        else if (symbol === 'rectangle' || symbol === 'arrow') {
	            x += (width - height) / 2;
	            width = height;
	        }
	        
	        var imageLocation = '';
	        if (symbol.match('image')) {
	            imageLocation = symbol.replace(
	                    new RegExp('^image:\\/\\/'), ''
	                );
	            symbol = 'image';
	            x += Math.round((width - height) / 2) - 1;
	            width = height = height + 2;
	        }
	        symbol = IconShape.prototype.iconLibrary[symbol];
	        
	        if (symbol) {
	            var x2 = style.x;
	            var y2 = style.y;
	            ctx.moveTo(x2, y2 + dy);
	            ctx.lineTo(x2 + 5, y2 + dy);
	            ctx.moveTo(x2 + style.width - 5, y2 + dy);
	            ctx.lineTo(x2 + style.width, y2 + dy);
	            var self = this;
	            symbol(
	                ctx,
	                {
	                    x: x + 4,
	                    y: y + 4,
	                    width: width - 8,
	                    height: height - 8,
	                    n: dy,
	                    image: imageLocation
	                },
	                function () {
	                    self.modSelf();
	                    refreshNextFrame();
	                }
	            );
	        }
	        else {
	            ctx.moveTo(x, y + dy);
	            ctx.lineTo(x + width, y + dy);
	        }
	    }
	    IconShape.prototype.iconLibrary['legendLineIcon'] = legendLineIcon;
	    
	    zrUtil.inherits(Line, ChartBase);
	    
	    // 图表注册
	    __webpack_require__(226).define('line', Line);
	    
	    return Line;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * zrender
	 *
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * shape类：支持半平滑的polygon，折线面积图使用
	 * 可配图形属性：
	   {
	       // 基础属性
	       shape  : 'halfSmoothPolygon',      // 必须，shape类标识，需要显式指定
	       id     : {string},       // 必须，图形唯一标识，可通过'zrender/tool/guid'方法生成
	       zlevel : {number},       // 默认为0，z层level，决定绘画在哪层canvas中
	       invisible : {boolean},   // 默认为false，是否可见
	
	       // 样式属性，默认状态样式样式属性
	       style  : {
	           pointList     : {Array},   // 必须，多边形各个顶角坐标
	       },
	
	       // 样式属性，高亮样式属性，当不存在highlightStyle时使用基于默认样式扩展显示
	       highlightStyle : {
	           // 同style
	       }
	
	       // 交互属性，详见shape.Base
	
	       // 事件属性，详见shape.Base
	   }
	         例子：
	   {
	       shape  : 'halfSmoothPolygon',
	       id     : '123456',
	       zlevel : 1,
	       style  : {
	           pointList : [[10, 10], [300, 20], [298, 400], [50, 450]]
	           color : '#eee',
	           text : 'Baidu'
	       },
	       myName : 'kener',  // 可自带任何有效自定义属性
	
	       clickable : true,
	       onClick : function (eventPacket) {
	           alert(eventPacket.target.myName);
	       }
	   }
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(185);
	    var smoothBezier = __webpack_require__(211);
	    var zrUtil = __webpack_require__(168);
	    
	    function HalfSmoothPolygon(options) {
	        Base.call(this, options);
	    }
	
	    HalfSmoothPolygon.prototype = {
	        type : 'half-smooth-polygon',
	        /**
	         * 创建多边形路径
	         * @param {Context2D} ctx Canvas 2D上下文
	         * @param {Object} style 样式
	         */
	        buildPath : function (ctx, style) {
	            var pointList = style.pointList;
	            if (pointList.length < 2) {
	                // 少于2个点就不画了~
	                return;
	            }
	            if (style.smooth) {
	                var controlPoints = smoothBezier(
	                    pointList.slice(0, -2), style.smooth, false, style.smoothConstraint
	                );
	
	                ctx.moveTo(pointList[0][0], pointList[0][1]);
	                var cp1;
	                var cp2;
	                var p;
	                var l = pointList.length;
	                for (var i = 0; i < l - 3; i++) {
	                    cp1 = controlPoints[i * 2];
	                    cp2 = controlPoints[i * 2 + 1];
	                    p = pointList[i + 1];
	                    ctx.bezierCurveTo(
	                        cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                    );
	                }
	                ctx.lineTo(pointList[l - 2][0], pointList[l - 2][1]);
	                ctx.lineTo(pointList[l - 1][0], pointList[l - 1][1]);
	                ctx.lineTo(pointList[0][0], pointList[0][1]);
	            } 
	            else {
	                __webpack_require__(209).prototype.buildPath(
	                    ctx, style
	                );
	            }
	            return;
	        }
	    };
	
	    zrUtil.inherits(HalfSmoothPolygon, Base);
	    
	    return HalfSmoothPolygon;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件类： 坐标轴
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 * 直角坐标系中坐标轴数组，数组中每一项代表一条横轴（纵轴）坐标轴。
	 * 标准（1.0）中规定最多同时存在2条横轴和2条纵轴
	 *    单条横轴时可指定安放于grid的底部（默认）或顶部，2条同时存在时则默认第一条安放于底部，第二天安放于顶部
	 *    单条纵轴时可指定安放于grid的左侧（默认）或右侧，2条同时存在时则默认第一条安放于左侧，第二天安放于右侧。
	 * 坐标轴有两种类型，类目型和数值型（区别详见axis）：
	 *    横轴通常为类目型，但条形图时则横轴为数值型，散点图时则横纵均为数值型
	 *    纵轴通常为数值型，但条形图时则纵轴为类目型。
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	
	    var LineShape = __webpack_require__(205);
	
	    var ecConfig = __webpack_require__(167);
	    var ecData = __webpack_require__(215);
	    var zrUtil = __webpack_require__(168);
	    var zrColor = __webpack_require__(187);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表选项
	     *     @param {string=} option.xAxis.type 坐标轴类型，横轴默认为类目型'category'
	     *     @param {string=} option.yAxis.type 坐标轴类型，纵轴默认为类目型'value'
	     * @param {Object} component 组件
	     * @param {string} axisType 横走or纵轴
	     */
	    function Axis(ecTheme, messageCenter, zr, option, myChart, axisType) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this.axisType = axisType;
	        this._axisList = [];
	
	        this.refresh(option);
	    }
	
	    Axis.prototype = {
	        type: ecConfig.COMPONENT_TYPE_AXIS,
	        axisBase: {
	            // 轴线
	            _buildAxisLine: function () {
	                var lineWidth = this.option.axisLine.lineStyle.width;
	                var halfLineWidth = lineWidth / 2;
	                var axShape = {
	                    _axisShape: 'axisLine',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase() + 3,
	                    hoverable: false
	                };
	                var grid = this.grid;
	                switch (this.option.position) {
	                    case 'left' :
	                        axShape.style = {
	                            xStart: grid.getX() - halfLineWidth,
	                            yStart: grid.getYend(),
	                            xEnd: grid.getX() - halfLineWidth,
	                            yEnd: grid.getY(),
	                            lineCap: 'round'
	                        };
	                        break;
	                    case 'right' :
	                        axShape.style = {
	                            xStart: grid.getXend() + halfLineWidth,
	                            yStart: grid.getYend(),
	                            xEnd: grid.getXend() + halfLineWidth,
	                            yEnd: grid.getY(),
	                            lineCap: 'round'
	                        };
	                        break;
	                    case 'bottom' :
	                        axShape.style = {
	                            xStart: grid.getX(),
	                            yStart: grid.getYend() + halfLineWidth,
	                            xEnd: grid.getXend(),
	                            yEnd: grid.getYend() + halfLineWidth,
	                            lineCap: 'round'
	                        };
	                        break;
	                    case 'top' :
	                        axShape.style = {
	                            xStart: grid.getX(),
	                            yStart: grid.getY() - halfLineWidth,
	                            xEnd: grid.getXend(),
	                            yEnd: grid.getY() - halfLineWidth,
	                            lineCap: 'round'
	                        };
	                        break;
	                }
	                var style = axShape.style;
	                if (this.option.name !== '') { // 别帮我代码规范
	                    style.text = this.option.name;
	                    style.textPosition = this.option.nameLocation;
	                    style.textFont = this.getFont(this.option.nameTextStyle);
	                    if (this.option.nameTextStyle.align) {
	                        style.textAlign = this.option.nameTextStyle.align;
	                    }
	                    if (this.option.nameTextStyle.baseline) {
	                        style.textBaseline = this.option.nameTextStyle.baseline;
	                    }
	                    if (this.option.nameTextStyle.color) {
	                        style.textColor = this.option.nameTextStyle.color;
	                    }
	                }
	                style.strokeColor = this.option.axisLine.lineStyle.color;
	
	                style.lineWidth = lineWidth;
	                // 亚像素优化
	                if (this.isHorizontal()) {
	                    // 横向布局，优化y
	                    style.yStart
	                        = style.yEnd
	                        = this.subPixelOptimize(style.yEnd, lineWidth);
	                }
	                else {
	                    // 纵向布局，优化x
	                    style.xStart
	                        = style.xEnd
	                        = this.subPixelOptimize(style.xEnd, lineWidth);
	                }
	
	                style.lineType = this.option.axisLine.lineStyle.type;
	
	                axShape = new LineShape(axShape);
	                this.shapeList.push(axShape);
	            },
	
	            _axisLabelClickable: function(clickable, axShape) {
	                if (clickable) {
	                    ecData.pack(
	                        axShape, undefined, -1, undefined, -1, axShape.style.text
	                    );
	                    axShape.hoverable = true;
	                    axShape.clickable = true;
	                    axShape.highlightStyle = {
	                        color: zrColor.lift(axShape.style.color, 1),
	                        brushType: 'fill'
	                    };
	                    return axShape;
	                }
	                else {
	                    return axShape;
	                }
	            },
	
	            refixAxisShape: function(zeroX, zeroY) {
	                if (!this.option.axisLine.onZero) {
	                    return;
	                }
	                var tickLength;
	                if (this.isHorizontal() && zeroY != null) {
	                    // 横向布局调整纵向y
	                    for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                        if (this.shapeList[i]._axisShape === 'axisLine') {
	                            this.shapeList[i].style.yStart
	                                = this.shapeList[i].style.yEnd
	                                = this.subPixelOptimize(
	                                    zeroY, this.shapeList[i].stylelineWidth
	                                );
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                        else if (this.shapeList[i]._axisShape === 'axisTick') {
	                            tickLength = this.shapeList[i].style.yEnd
	                                         - this.shapeList[i].style.yStart;
	                            this.shapeList[i].style.yStart = zeroY - tickLength;
	                            this.shapeList[i].style.yEnd = zeroY;
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                    }
	                }
	                if (!this.isHorizontal() && zeroX != null) {
	                    // 纵向布局调整横向x
	                    for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                        if (this.shapeList[i]._axisShape === 'axisLine') {
	                            this.shapeList[i].style.xStart
	                                = this.shapeList[i].style.xEnd
	                                = this.subPixelOptimize(
	                                    zeroX, this.shapeList[i].stylelineWidth
	                                );
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                        else if (this.shapeList[i]._axisShape === 'axisTick') {
	                            tickLength = this.shapeList[i].style.xEnd
	                                         - this.shapeList[i].style.xStart;
	                            this.shapeList[i].style.xStart = zeroX;
	                            this.shapeList[i].style.xEnd = zeroX + tickLength;
	                            this.zr.modShape(this.shapeList[i].id);
	                        }
	                    }
	                }
	            },
	
	            getPosition: function () {
	                return this.option.position;
	            },
	
	            isHorizontal: function() {
	                return this.option.position === 'bottom' || this.option.position === 'top';
	            }
	        },
	        /**
	         * 参数修正&默认值赋值，重载基类方法
	         * @param {Object} opt 参数
	         */
	        reformOption: function (opt) {
	            // 不写或传了个空数值默认为数值轴
	            if (!opt || (opt instanceof Array && opt.length === 0)) {
	                opt = [ { type: ecConfig.COMPONENT_TYPE_AXIS_VALUE } ];
	            }
	            else if (!(opt instanceof Array)){
	                opt = [opt];
	            }
	
	            // 最多两条，其他参数忽略
	            if (opt.length > 2) {
	                opt = [opt[0], opt[1]];
	            }
	
	            if (this.axisType === 'xAxis') {
	                // 横轴位置默认配置
	                if (!opt[0].position            // 没配置或配置错
	                    || (opt[0].position != 'bottom' && opt[0].position != 'top')
	                ) {
	                    opt[0].position = 'bottom';
	                }
	                if (opt.length > 1) {
	                    opt[1].position = opt[0].position === 'bottom' ? 'top' : 'bottom';
	                }
	
	                for (var i = 0, l = opt.length; i < l; i++) {
	                    // 坐标轴类型，横轴默认为类目型'category'
	                    opt[i].type = opt[i].type || 'category';
	                    // 标识轴类型&索引
	                    opt[i].xAxisIndex = i;
	                    opt[i].yAxisIndex = -1;
	                }
	            }
	            else {
	                // 纵轴位置默认配置
	                if (!opt[0].position            // 没配置或配置错
	                    || (opt[0].position != 'left'  && opt[0].position != 'right')
	                ) {
	                    opt[0].position = 'left';
	                }
	
	                if (opt.length > 1) {
	                    opt[1].position = opt[0].position === 'left' ? 'right' : 'left';
	                }
	
	                for (var i = 0, l = opt.length; i < l; i++) {
	                    // 坐标轴类型，纵轴默认为数值型'value'
	                    opt[i].type = opt[i].type || 'value';
	                    // 标识轴类型&索引
	                    opt[i].xAxisIndex = -1;
	                    opt[i].yAxisIndex = i;
	                }
	            }
	
	            return opt;
	        },
	
	        /**
	         * 刷新
	         */
	        refresh: function (newOption) {
	            var axisOption;
	            if (newOption) {
	                this.option = newOption;
	                if (this.axisType === 'xAxis') {
	                    this.option.xAxis = this.reformOption(newOption.xAxis);
	                    axisOption = this.option.xAxis;
	                }
	                else {
	                    this.option.yAxis = this.reformOption(newOption.yAxis);
	                    axisOption = this.option.yAxis;
	                }
	                this.series = newOption.series;
	            }
	
	            var CategoryAxis = __webpack_require__(254);
	            var ValueAxis = __webpack_require__(255);
	            var len = Math.max((axisOption && axisOption.length || 0), this._axisList.length);
	            for (var i = 0; i < len; i++) {
	                if (this._axisList[i]   // 已有实例
	                    && newOption        // 非空刷新
	                    && (!axisOption[i] || this._axisList[i].type != axisOption[i].type) // 类型不匹配
	                ) {
	                    this._axisList[i].dispose && this._axisList[i].dispose();
	                    this._axisList[i] = false;
	                }
	
	                if (this._axisList[i]) {
	                    this._axisList[i].refresh && this._axisList[i].refresh(
	                        axisOption ? axisOption[i] : false,
	                        this.series
	                    );
	                }
	                else if (axisOption && axisOption[i]) {
	                    this._axisList[i] = axisOption[i].type === 'category'
	                        ? new CategoryAxis(
	                               this.ecTheme, this.messageCenter, this.zr,
	                               axisOption[i], this.myChart, this.axisBase
	                           )
	                        : new ValueAxis(
	                               this.ecTheme, this.messageCenter, this.zr,
	                               axisOption[i], this.myChart, this.axisBase,
	                               this.series
	                        );
	                }
	            }
	        },
	
	        /**
	         * 根据值换算位置
	         * @param {number} idx 坐标轴索引0~1
	         */
	        getAxis: function (idx) {
	            return this._axisList[idx];
	        },
	
	        getAxisCount: function () {
	            return this._axisList.length;
	        },
	
	        clear: function () {
	            for (var i = 0, l = this._axisList.length; i < l; i++) {
	                this._axisList[i].dispose && this._axisList[i].dispose();
	            }
	            this._axisList = [];
	        }
	    };
	
	    zrUtil.inherits(Axis, Base);
	
	    __webpack_require__(229).define('axis', Axis);
	
	    return Axis;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件： 类目轴
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var TextShape = __webpack_require__(182);
	    var LineShape = __webpack_require__(205);
	    var RectangleShape = __webpack_require__(188);
	    
	    var ecConfig = __webpack_require__(167);
	    // 类目轴
	    ecConfig.categoryAxis =  {
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        show: true,
	        position: 'bottom',    // 位置
	        name: '',              // 坐标轴名字，默认为空
	        nameLocation: 'end',   // 坐标轴名字位置，支持'start' | 'end'
	        nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式
	        boundaryGap: true,     // 类目起始和结束两端空白策略
	        axisLine: {            // 坐标轴线
	            show: true,        // 默认显示，属性show控制显示与否
	            onZero: true,
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#48b',
	                width: 2,
	                type: 'solid'
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            show: true,        // 属性show控制显示与否，默认不显示
	            interval: 'auto',
	            inside: false,    // 控制小标记是否在grid里 
	            // onGap: null,
	            length :5,         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#333',
	                width: 1
	            }
	        },
	        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
	            show: true,
	            interval: 'auto',
	            rotate: 0,
	            margin: 8,
	            // clickable: false,
	            // formatter: null,
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#333'
	            }
	        },
	        splitLine: {           // 分隔线
	            show: true,        // 默认显示，属性show控制显示与否
	            // onGap: null,
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        splitArea: {           // 分隔区域
	            show: false,       // 默认不显示，属性show控制显示与否
	            // onGap: null,
	            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };
	
	    var zrUtil = __webpack_require__(168);
	    var zrArea = __webpack_require__(183);
	    
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 类目轴参数
	     * @param {Grid} component 组件
	     */
	    function CategoryAxis(ecTheme, messageCenter, zr, option, myChart, axisBase) {
	        if (option.data.length < 1) {
	            console.error('option.data.length < 1.');
	            return;
	        }
	        
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	        
	        this.grid = this.component.grid;
	        
	        for (var method in axisBase) {
	            this[method] = axisBase[method];
	        }
	        
	        this.refresh(option);
	    }
	    
	    CategoryAxis.prototype = {
	        type : ecConfig.COMPONENT_TYPE_AXIS_CATEGORY,
	        _getReformedLabel : function (idx) {
	            var data = this.getDataFromOption(this.option.data[idx]);
	            var formatter = this.option.data[idx].formatter 
	                            || this.option.axisLabel.formatter;
	            if (formatter) {
	                if (typeof formatter == 'function') {
	                    data = formatter.call(this.myChart, data);
	                }
	                else if (typeof formatter == 'string') {
	                    data = formatter.replace('{value}', data);
	                }
	            }
	            return data;
	        },
	        
	        /**
	         * 计算标签显示挑选间隔
	         */
	        _getInterval : function () {
	            var interval   = this.option.axisLabel.interval;
	            if (interval == 'auto') {
	                // 麻烦的自适应计算
	                var fontSize = this.option.axisLabel.textStyle.fontSize;
	                var data = this.option.data;
	                var dataLength = this.option.data.length;
	
	                if (this.isHorizontal()) {
	                    // 横向
	                    if (dataLength > 3) {
	                        var gap = this.getGap();
	                        var isEnough = false;
	                        var labelSpace;
	                        var labelSize;
	                        var step = Math.floor(0.5 / gap);
	                        step = step < 1 ? 1 : step;
	                        interval = Math.floor(15 / gap);
	                        while (!isEnough && interval < dataLength) {
	                            interval += step;
	                            isEnough = true;
	                            labelSpace = Math.floor(gap * interval); // 标签左右至少间隔为3px
	                            for (var i = Math.floor((dataLength - 1)/ interval) * interval; 
	                                 i >= 0; i -= interval
	                             ) {
	                                if (this.option.axisLabel.rotate !== 0) {
	                                    // 有旋转
	                                    labelSize = fontSize;
	                                }
	                                else if (data[i].textStyle) {
	                                    labelSize = zrArea.getTextWidth(
	                                        this._getReformedLabel(i),
	                                        this.getFont(
	                                            zrUtil.merge(
	                                                data[i].textStyle,
	                                                this.option.axisLabel.textStyle
	                                           )
	                                        )
	                                    );
	                                }
	                                else {
	                                    /*
	                                    labelSize = zrArea.getTextWidth(
	                                        this._getReformedLabel(i),
	                                        font
	                                    );
	                                    */
	                                    // 不定义data级特殊文本样式，用fontSize优化getTextWidth
	                                    var label = this._getReformedLabel(i) + '';
	                                    var wLen = (label.match(/\w/g) || '').length;
	                                    var oLen = label.length - wLen;
	                                    labelSize = wLen * fontSize * 2 / 3 + oLen * fontSize;
	                                }
	
	                                if (labelSpace < labelSize) {
	                                    // 放不下，中断循环让interval++
	                                    isEnough = false;
	                                    break;
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        // 少于3个则全部显示
	                        interval = 1;
	                    }
	                }
	                else {
	                    // 纵向
	                    if (dataLength > 3) {
	                        var gap = this.getGap();
	                        interval = Math.floor(11 / gap);
	                        // 标签上下至少间隔为3px
	                        while ((gap * interval - 6) < fontSize
	                                && interval < dataLength
	                        ) {
	                            interval++;
	                        }
	                    }
	                    else {
	                        // 少于3个则全部显示
	                        interval = 1;
	                    }
	                }
	            }
	            else {
	                // 用户自定义间隔，支持funtion
	                interval = typeof interval == 'function' ? 1 : (interval - 0 + 1);
	            }
	
	            return interval;
	        },
	        
	        /**
	         * 绘制图形
	         */
	        _buildShape : function () {
	            // 标签显示的挑选间隔
	            this._interval = this._getInterval();
	            if (!this.option.show) {
	                return;
	            }
	            this.option.splitArea.show && this._buildSplitArea();
	            this.option.splitLine.show && this._buildSplitLine();
	            this.option.axisLine.show && this._buildAxisLine();
	            this.option.axisTick.show && this._buildAxisTick();
	            this.option.axisLabel.show && this._buildAxisLabel();
	
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },
	
	        // 小标记
	        _buildAxisTick : function () {
	            var axShape;
	            var data       = this.option.data;
	            var dataLength = this.option.data.length;
	            var tickOption = this.option.axisTick;
	            var length     = tickOption.length;
	            var color      = tickOption.lineStyle.color;
	            var lineWidth  = tickOption.lineStyle.width;
	            var intervalFunction = typeof tickOption.interval == 'function'
	                                   ? tickOption.interval 
	                                   : tickOption.interval == 'auto'
	                                     ? typeof this.option.axisLabel.interval == 'function'
	                                       ? this.option.axisLabel.interval : false
	                                     : false;
	            var interval   = intervalFunction
	                             ? 1
	                             : tickOption.interval == 'auto' 
	                               ? this._interval
	                               : (tickOption.interval - 0 + 1);
	            var onGap      = tickOption.onGap;
	            var optGap     = onGap 
	                             ? (this.getGap() / 2) 
	                             : typeof onGap == 'undefined'
	                                   ? (this.option.boundaryGap ? (this.getGap() / 2) : 0)
	                                   : 0;
	            var startIndex = optGap > 0 ? -interval : 0;                       
	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition = this.option.position == 'bottom'
	                        ? (tickOption.inside 
	                           ? (this.grid.getYend() - length - 1) : (this.grid.getYend() + 1))
	                        : (tickOption.inside 
	                           ? (this.grid.getY() + 1) : (this.grid.getY() - length - 1));
	                var x;
	                for (var i = startIndex; i < dataLength; i += interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则跳过渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    x = this.subPixelOptimize(
	                        this.getCoordByIndex(i) + (i >= 0 ? optGap : 0), lineWidth
	                    );
	                    axShape = {
	                        _axisShape : 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : x,
	                            yStart : yPosition,
	                            xEnd : x,
	                            yEnd : yPosition + length,
	                            strokeColor : color,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition = this.option.position == 'left'
	                    ? (tickOption.inside 
	                       ? (this.grid.getX() + 1) : (this.grid.getX() - length - 1))
	                    : (tickOption.inside 
	                       ? (this.grid.getXend() - length - 1) : (this.grid.getXend() + 1));
	                        
	                var y;
	                for (var i = startIndex; i < dataLength; i += interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则中断渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    y = this.subPixelOptimize(
	                        this.getCoordByIndex(i) - (i >= 0 ? optGap : 0), lineWidth
	                    );
	                    axShape = {
	                        _axisShape : 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : xPosition,
	                            yStart : y,
	                            xEnd : xPosition + length,
	                            yEnd : y,
	                            strokeColor : color,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },
	
	        // 坐标轴文本
	        _buildAxisLabel : function () {
	            var axShape;
	            var data       = this.option.data;
	            var dataLength = this.option.data.length;
	            var labelOption = this.option.axisLabel;
	            var rotate     = labelOption.rotate;
	            var margin     = labelOption.margin;
	            var clickable  = labelOption.clickable;
	            var textStyle  = labelOption.textStyle;
	            var intervalFunction = typeof labelOption.interval == 'function'
	                                   ? labelOption.interval : false;
	            var dataTextStyle;
	
	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition;
	                var baseLine;
	                if (this.option.position == 'bottom') {
	                    yPosition = this.grid.getYend() + margin;
	                    baseLine = 'top';
	                }
	                else {
	                    yPosition = this.grid.getY() - margin;
	                    baseLine = 'bottom';
	                }
	
	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if ((intervalFunction && !intervalFunction(i, data[i])) 
	                        // 回调并且回调返回false则中断渲染
	                        || this._getReformedLabel(i) === '' // 空文本优化
	                    ) {
	                        continue;
	                    }
	                    dataTextStyle = zrUtil.merge(
	                        data[i].textStyle || {},
	                        textStyle
	                    );
	                    axShape = {
	                        // shape : 'text',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() + 3,
	                        hoverable : false,
	                        style : {
	                            x : this.getCoordByIndex(i),
	                            y : yPosition,
	                            color : dataTextStyle.color,
	                            text : this._getReformedLabel(i),
	                            textFont : this.getFont(dataTextStyle),
	                            textAlign : dataTextStyle.align || 'center',
	                            textBaseline : dataTextStyle.baseline || baseLine
	                        }
	                    };
	                    if (rotate) {
	                        axShape.style.textAlign = rotate > 0
	                                                  ? (this.option.position == 'bottom'
	                                                    ? 'right' : 'left')
	                                                  : (this.option.position == 'bottom'
	                                                    ? 'left' : 'right');
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition;
	                var align;
	                if (this.option.position == 'left') {
	                    xPosition = this.grid.getX() - margin;
	                    align = 'right';
	                }
	                else {
	                    xPosition = this.grid.getXend() + margin;
	                    align = 'left';
	                }
	
	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if ((intervalFunction && !intervalFunction(i, data[i])) 
	                        // 回调并且回调返回false则中断渲染
	                        || this._getReformedLabel(i) === '' // 空文本优化
	                    ) {
	                        continue;
	                    }
	                    dataTextStyle = zrUtil.merge(
	                        data[i].textStyle || {},
	                        textStyle
	                    );
	                    axShape = {
	                        // shape : 'text',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() + 3,
	                        hoverable : false,
	                        style : {
	                            x : xPosition,
	                            y : this.getCoordByIndex(i),
	                            color : dataTextStyle.color,
	                            text : this._getReformedLabel(i),
	                            textFont : this.getFont(dataTextStyle),
	                            textAlign : dataTextStyle.align || align,
	                            textBaseline : dataTextStyle.baseline 
	                                           || (i === 0 && this.option.name !== '')
	                                               ? 'bottom'
	                                               : (i == (dataLength - 1) 
	                                                  && this.option.name !== '')
	                                                 ? 'top'
	                                                 : 'middle'
	                        }
	                    };
	                    
	                    if (rotate) {
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	        },
	        
	        _buildSplitLine : function () {
	            var axShape;
	            var data        = this.option.data;
	            var dataLength  = this.option.data.length;
	            var sLineOption = this.option.splitLine;
	            var lineType    = sLineOption.lineStyle.type;
	            var lineWidth   = sLineOption.lineStyle.width;
	            var color       = sLineOption.lineStyle.color;
	            color = color instanceof Array ? color : [color];
	            var colorLength = color.length;
	            
	            // splitLine随axisLable
	            var intervalFunction = typeof this.option.axisLabel.interval == 'function'
	                                   ? this.option.axisLabel.interval : false;
	
	            var onGap      = sLineOption.onGap;
	            var optGap     = onGap 
	                             ? (this.getGap() / 2) 
	                             : typeof onGap == 'undefined'
	                                   ? (this.option.boundaryGap ? (this.getGap() / 2) : 0)
	                                   : 0;
	            dataLength -= (onGap || (typeof onGap == 'undefined' && this.option.boundaryGap)) 
	                          ? 1 : 0;
	            if (this.isHorizontal()) {
	                // 横向
	                var sy = this.grid.getY();
	                var ey = this.grid.getYend();
	                var x;
	
	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则跳过渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    x = this.subPixelOptimize(
	                        this.getCoordByIndex(i) + optGap, lineWidth
	                    );
	                    axShape = {
	                        // shape : 'line',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : x,
	                            yStart : sy,
	                            xEnd : x,
	                            yEnd : ey,
	                            strokeColor : color[(i / this._interval) % colorLength],
	                            lineType : lineType,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	
	            }
	            else {
	                // 纵向
	                var sx = this.grid.getX();
	                var ex = this.grid.getXend();
	                var y;
	
	                for (var i = 0; i < dataLength; i += this._interval) {
	                    if (intervalFunction && !intervalFunction(i, data[i])) {
	                        // 回调并且回调返回false则跳过渲染
	                        continue;
	                    }
	                    // 亚像素优化
	                    y = this.subPixelOptimize(
	                        this.getCoordByIndex(i) - optGap, lineWidth
	                    );
	                    axShape = {
	                        // shape : 'line',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable : false,
	                        style : {
	                            xStart : sx,
	                            yStart : y,
	                            xEnd : ex,
	                            yEnd : y,
	                            strokeColor : color[(i / this._interval) % colorLength],
	                            lineType : lineType,
	                            lineWidth : lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },
	
	        _buildSplitArea : function () {
	            var axShape;
	            var data        = this.option.data;
	            var sAreaOption = this.option.splitArea;
	            var color = sAreaOption.areaStyle.color;
	            if (!(color instanceof Array)) {
	                // 非数组一律认为是单一颜色的字符串，单一颜色则用一个背景，颜色错误不负责啊！！！
	                axShape = {
	                    // shape : 'rectangle',
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable : false,
	                    style : {
	                        x : this.grid.getX(),
	                        y : this.grid.getY(),
	                        width : this.grid.getWidth(),
	                        height : this.grid.getHeight(),
	                        color : color
	                        // type : this.option.splitArea.areaStyle.type,
	                    }
	                };
	                this.shapeList.push(new RectangleShape(axShape));
	            }
	            else {
	                // 多颜色
	                var colorLength = color.length;
	                var dataLength  = this.option.data.length;
	
	                // splitArea随axisLable
	                var intervalFunction = typeof this.option.axisLabel.interval == 'function'
	                                       ? this.option.axisLabel.interval : false;
	        
	                var onGap      = sAreaOption.onGap;
	                var optGap     = onGap 
	                                 ? (this.getGap() / 2) 
	                                 : typeof onGap == 'undefined'
	                                       ? (this.option.boundaryGap ? (this.getGap() / 2) : 0)
	                                       : 0;
	                if (this.isHorizontal()) {
	                    // 横向
	                    var y = this.grid.getY();
	                    var height = this.grid.getHeight();
	                    var lastX = this.grid.getX();
	                    var curX;
	    
	                    for (var i = 0; i <= dataLength; i += this._interval) {
	                        if (intervalFunction && !intervalFunction(i, data[i]) && i < dataLength) {
	                            // 回调并且回调返回false则跳过渲染
	                            continue;
	                        }
	                        curX = i < dataLength
	                               ? (this.getCoordByIndex(i) + optGap)
	                               : this.grid.getXend();
	                        axShape = {
	                            // shape : 'rectangle',
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable : false,
	                            style : {
	                                x : lastX,
	                                y : y,
	                                width : curX - lastX,
	                                height : height,
	                                color : color[(i / this._interval) % colorLength]
	                                // type : this.option.splitArea.areaStyle.type,
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastX = curX;
	                    }
	                }
	                else {
	                    // 纵向
	                    var x = this.grid.getX();
	                    var width = this.grid.getWidth();
	                    var lastYend = this.grid.getYend();
	                    var curY;
	    
	                    for (var i = 0; i <= dataLength; i += this._interval) {
	                        if (intervalFunction && !intervalFunction(i, data[i]) && i < dataLength) {
	                            // 回调并且回调返回false则跳过渲染
	                            continue;
	                        }
	                        curY = i < dataLength
	                               ? (this.getCoordByIndex(i) - optGap)
	                               : this.grid.getY();
	                        axShape = {
	                            // shape : 'rectangle',
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable : false,
	                            style : {
	                                x : x,
	                                y : curY,
	                                width : width,
	                                height : lastYend - curY,
	                                color : color[(i / this._interval) % colorLength]
	                                // type : this.option.splitArea.areaStyle.type
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastYend = curY;
	                    }
	                }
	            }
	        },
	
	        /**
	         * 刷新
	         */
	        refresh : function (newOption) {
	            if (newOption) {
	                this.option = this.reformOption(newOption);
	                // 通用字体设置
	                this.option.axisLabel.textStyle = this.getTextStyle(
	                    this.option.axisLabel.textStyle
	                );
	            }
	            this.clear();
	            this._buildShape();
	        },
	
	        /**
	         * 返回间隔
	         */
	        getGap : function () {
	            var dataLength = this.option.data.length;
	            var total = this.isHorizontal()
	                        ? this.grid.getWidth()
	                        : this.grid.getHeight();
	            if (this.option.boundaryGap) {              // 留空
	                return total / dataLength;
	            }
	            else {                                      // 顶头
	                return total / (dataLength > 1 ? (dataLength - 1) : 1);
	            }
	        },
	
	        // 根据值换算位置
	        getCoord : function (value) {
	            var data = this.option.data;
	            var dataLength = data.length;
	            var gap = this.getGap();
	            var position = this.option.boundaryGap ? (gap / 2) : 0;
	
	            for (var i = 0; i < dataLength; i++) {
	                if (this.getDataFromOption(data[i]) == value) {
	                    if (this.isHorizontal()) {
	                        // 横向
	                        position = this.grid.getX() + position;
	                    }
	                    else {
	                        // 纵向
	                        position = this.grid.getYend() - position;
	                    }
	                    
	                    return position;
	                    // Math.floor可能引起一些偏差，但性能会更好
	                    /* 准确更重要
	                    return (i === 0 || i == dataLength - 1)
	                           ? position
	                           : Math.floor(position);
	                    */
	                }
	                position += gap;
	            }
	        },
	
	        // 根据类目轴数据索引换算位置
	        getCoordByIndex : function (dataIndex) {
	            if (dataIndex < 0) {
	                if (this.isHorizontal()) {
	                    return this.grid.getX();
	                }
	                else {
	                    return this.grid.getYend();
	                }
	            }
	            else if (dataIndex > this.option.data.length - 1) {
	                if (this.isHorizontal()) {
	                    return this.grid.getXend();
	                }
	                else {
	                    return this.grid.getY();
	                }
	            }
	            else {
	                var gap = this.getGap();
	                var position = this.option.boundaryGap ? (gap / 2) : 0;
	                position += dataIndex * gap;
	                
	                if (this.isHorizontal()) {
	                    // 横向
	                    position = this.grid.getX() + position;
	                }
	                else {
	                    // 纵向
	                    position = this.grid.getYend() - position;
	                }
	                
	                return position;
	                /* 准确更重要
	                return (dataIndex === 0 || dataIndex == this.option.data.length - 1)
	                       ? position
	                       : Math.floor(position);
	                */
	            }
	        },
	
	        // 根据类目轴数据索引换算类目轴名称
	        getNameByIndex : function (dataIndex) {
	            return this.getDataFromOption(this.option.data[dataIndex]);
	        },
	        
	        // 根据类目轴名称换算类目轴数据索引
	        getIndexByName : function (name) {
	            var data = this.option.data;
	            var dataLength = data.length;
	
	            for (var i = 0; i < dataLength; i++) {
	                if (this.getDataFromOption(data[i]) == name) {
	                    return i;
	                }
	            }
	            
	            return -1;
	        },
	        
	        // 根据位置换算值
	        getValueFromCoord : function() {
	            return '';
	        },
	
	        /**
	         * 根据类目轴数据索引返回是否为主轴线
	         * @param {number} dataIndex 类目轴数据索引
	         * @return {boolean} 是否为主轴
	         */
	        isMainAxis : function (dataIndex) {
	            return dataIndex % this._interval === 0;
	        }
	    };
	    
	    zrUtil.inherits(CategoryAxis, Base);
	    
	    __webpack_require__(229).define('categoryAxis', CategoryAxis);
	    
	    return CategoryAxis;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件： 数值轴
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	
	    // 图形依赖
	    var TextShape = __webpack_require__(182);
	    var LineShape = __webpack_require__(205);
	    var RectangleShape = __webpack_require__(188);
	
	    var ecConfig = __webpack_require__(167);
	    // 数值型坐标轴默认参数
	    ecConfig.valueAxis = {
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        show: true,
	        position: 'left',      // 位置
	        name: '',              // 坐标轴名字，默认为空
	        nameLocation: 'end',   // 坐标轴名字位置，支持'start' | 'end'
	        nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式
	        boundaryGap: [0, 0],   // 数值起始和结束两端空白策略
	        // min: null,          // 最小值
	        // max: null,          // 最大值
	        // scale: false,       // 脱离0值比例，放大聚焦到最终_min，_max区间
	        // splitNumber: 5,        // 分割段数，默认为5
	        axisLine: {            // 坐标轴线
	            show: true,        // 默认显示，属性show控制显示与否
	            onZero: true,
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#48b',
	                width: 2,
	                type: 'solid'
	            }
	        },
	        axisTick: {            // 坐标轴小标记
	            show: false,       // 属性show控制显示与否，默认不显示
	            inside: false,     // 控制小标记是否在grid里
	            length :5,         // 属性length控制线长
	            lineStyle: {       // 属性lineStyle控制线条样式
	                color: '#333',
	                width: 1
	            }
	        },
	        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
	            show: true,
	            rotate: 0,
	            margin: 8,
	            // clickable: false,
	            // formatter: null,
	            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: '#333'
	            }
	        },
	        splitLine: {           // 分隔线
	            show: true,        // 默认显示，属性show控制显示与否
	            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        splitArea: {           // 分隔区域
	            show: false,       // 默认不显示，属性show控制显示与否
	            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };
	
	    var ecDate = __webpack_require__(256);
	    var zrUtil = __webpack_require__(168);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 类目轴参数
	     * @param {Object} component 组件
	     * @param {Array} series 数据对象
	     */
	    function ValueAxis(ecTheme, messageCenter, zr, option, myChart, axisBase, series) {
	        if (!series || series.length === 0) {
	            console.err('option.series.length == 0.');
	            return;
	        }
	
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this.series = series;
	        this.grid = this.component.grid;
	
	        for (var method in axisBase) {
	            this[method] = axisBase[method];
	        }
	
	        this.refresh(option, series);
	    }
	
	    ValueAxis.prototype = {
	        type: ecConfig.COMPONENT_TYPE_AXIS_VALUE,
	
	        _buildShape: function () {
	            this._hasData = false;
	            this._calculateValue();
	            if (!this._hasData || !this.option.show) {
	                return;
	            }
	
	            this.option.splitArea.show && this._buildSplitArea();
	            this.option.splitLine.show && this._buildSplitLine();
	            this.option.axisLine.show && this._buildAxisLine();
	            this.option.axisTick.show && this._buildAxisTick();
	            this.option.axisLabel.show && this._buildAxisLabel();
	
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	        },
	
	        // 小标记
	        _buildAxisTick: function () {
	            var axShape;
	            var data       = this._valueList;
	            var dataLength = this._valueList.length;
	            var tickOption = this.option.axisTick;
	            var length     = tickOption.length;
	            var color      = tickOption.lineStyle.color;
	            var lineWidth  = tickOption.lineStyle.width;
	
	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition = this.option.position === 'bottom'
	                        ? (tickOption.inside
	                           ? (this.grid.getYend() - length - 1) : (this.grid.getYend()) + 1)
	                        : (tickOption.inside
	                           ? (this.grid.getY() + 1) : (this.grid.getY() - length - 1));
	                var x;
	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    x = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        _axisShape: 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: x,
	                            yStart: yPosition,
	                            xEnd: x,
	                            yEnd: yPosition + length,
	                            strokeColor: color,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition = this.option.position === 'left'
	                    ? (tickOption.inside
	                       ? (this.grid.getX() + 1) : (this.grid.getX() - length - 1))
	                    : (tickOption.inside
	                       ? (this.grid.getXend() - length - 1) : (this.grid.getXend() + 1));
	
	                var y;
	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    y = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        _axisShape: 'axisTick',
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: xPosition,
	                            yStart: y,
	                            xEnd: xPosition + length,
	                            yEnd: y,
	                            strokeColor: color,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },
	
	        // 坐标轴文本
	        _buildAxisLabel: function () {
	            var axShape;
	            var data       = this._valueList;
	            var dataLength = this._valueList.length;
	            var rotate     = this.option.axisLabel.rotate;
	            var margin     = this.option.axisLabel.margin;
	            var clickable  = this.option.axisLabel.clickable;
	            var textStyle  = this.option.axisLabel.textStyle;
	
	            if (this.isHorizontal()) {
	                // 横向
	                var yPosition;
	                var baseLine;
	                if (this.option.position === 'bottom') {
	                    yPosition = this.grid.getYend() + margin;
	                    baseLine = 'top';
	                }
	                else {
	                    yPosition = this.grid.getY() - margin;
	                    baseLine = 'bottom';
	                }
	
	                for (var i = 0; i < dataLength; i++) {
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() +3,
	                        hoverable: false,
	                        style: {
	                            x: this.getCoord(data[i]),
	                            y: yPosition,
	                            color: typeof textStyle.color === 'function'
	                                   ? textStyle.color(data[i]) : textStyle.color,
	                            text: this._valueLabel[i],
	                            textFont: this.getFont(textStyle),
	                            textAlign: textStyle.align || 'center',
	                            textBaseline: textStyle.baseline || baseLine
	                        }
	                    };
	                    if (rotate) {
	                        axShape.style.textAlign = rotate > 0
	                                                  ? (this.option.position === 'bottom'
	                                                    ? 'right' : 'left')
	                                                  : (this.option.position === 'bottom'
	                                                    ? 'left' : 'right');
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	            else {
	                // 纵向
	                var xPosition;
	                var align;
	                if (this.option.position === 'left') {
	                    xPosition = this.grid.getX() - margin;
	                    align = 'right';
	                }
	                else {
	                    xPosition = this.grid.getXend() + margin;
	                    align = 'left';
	                }
	
	                for (var i = 0; i < dataLength; i++) {
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase() + 3,
	                        hoverable: false,
	                        style: {
	                            x: xPosition,
	                            y: this.getCoord(data[i]),
	                            color: typeof textStyle.color === 'function'
	                                   ? textStyle.color(data[i]) : textStyle.color,
	                            text: this._valueLabel[i],
	                            textFont: this.getFont(textStyle),
	                            textAlign: textStyle.align || align,
	                            textBaseline: textStyle.baseline
	                                          || (
	                                              (i === 0 && this.option.name !== '')
	                                              ? 'bottom'
	                                                : (i === dataLength - 1 && this.option.name !== '') ? 'top' : 'middle'
	                                          )
	                        }
	                    };
	
	                    if (rotate) {
	                        axShape.rotation = [
	                            rotate * Math.PI / 180,
	                            axShape.style.x,
	                            axShape.style.y
	                        ];
	                    }
	                    this.shapeList.push(new TextShape(
	                        this._axisLabelClickable(clickable, axShape)
	                    ));
	                }
	            }
	        },
	
	        _buildSplitLine: function () {
	            var axShape;
	            var data        = this._valueList;
	            var dataLength  = this._valueList.length;
	            var sLineOption = this.option.splitLine;
	            var lineType    = sLineOption.lineStyle.type;
	            var lineWidth   = sLineOption.lineStyle.width;
	            var color       = sLineOption.lineStyle.color;
	            color = color instanceof Array ? color : [color];
	            var colorLength = color.length;
	
	            if (this.isHorizontal()) {
	                // 横向
	                var sy = this.grid.getY();
	                var ey = this.grid.getYend();
	                var x;
	
	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    x = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: x,
	                            yStart: sy,
	                            xEnd: x,
	                            yEnd: ey,
	                            strokeColor: color[i % colorLength],
	                            lineType: lineType,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	
	            }
	            else {
	                // 纵向
	                var sx = this.grid.getX();
	                var ex = this.grid.getXend();
	                var y;
	
	                for (var i = 0; i < dataLength; i++) {
	                    // 亚像素优化
	                    y = this.subPixelOptimize(this.getCoord(data[i]), lineWidth);
	                    axShape = {
	                        zlevel: this.getZlevelBase(),
	                        z: this.getZBase(),
	                        hoverable: false,
	                        style: {
	                            xStart: sx,
	                            yStart: y,
	                            xEnd: ex,
	                            yEnd: y,
	                            strokeColor: color[i % colorLength],
	                            lineType: lineType,
	                            lineWidth: lineWidth
	                        }
	                    };
	                    this.shapeList.push(new LineShape(axShape));
	                }
	            }
	        },
	
	        _buildSplitArea: function () {
	            var axShape;
	            var color = this.option.splitArea.areaStyle.color;
	
	            if (!(color instanceof Array)) {
	                // 非数组一律认为是单一颜色的字符串，单一颜色则用一个背景，颜色错误不负责啊！！！
	                axShape = {
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable: false,
	                    style: {
	                        x: this.grid.getX(),
	                        y: this.grid.getY(),
	                        width: this.grid.getWidth(),
	                        height: this.grid.getHeight(),
	                        color: color
	                        // type: this.option.splitArea.areaStyle.type,
	                    }
	                };
	                this.shapeList.push(new RectangleShape(axShape));
	            }
	            else {
	                // 多颜色
	                var colorLength = color.length;
	                var data        = this._valueList;
	                var dataLength  = this._valueList.length;
	
	                if (this.isHorizontal()) {
	                    // 横向
	                    var y = this.grid.getY();
	                    var height = this.grid.getHeight();
	                    var lastX = this.grid.getX();
	                    var curX;
	
	                    for (var i = 0; i <= dataLength; i++) {
	                        curX = i < dataLength
	                               ? this.getCoord(data[i])
	                               : this.grid.getXend();
	                        axShape = {
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable: false,
	                            style: {
	                                x: lastX,
	                                y: y,
	                                width: curX - lastX,
	                                height: height,
	                                color: color[i % colorLength]
	                                // type: this.option.splitArea.areaStyle.type,
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastX = curX;
	                    }
	                }
	                else {
	                    // 纵向
	                    var x = this.grid.getX();
	                    var width = this.grid.getWidth();
	                    var lastYend = this.grid.getYend();
	                    var curY;
	
	                    for (var i = 0; i <= dataLength; i++) {
	                        curY = i < dataLength
	                               ? this.getCoord(data[i])
	                               : this.grid.getY();
	                        axShape = {
	                            zlevel: this.getZlevelBase(),
	                            z: this.getZBase(),
	                            hoverable: false,
	                            style: {
	                                x: x,
	                                y: curY,
	                                width: width,
	                                height: lastYend - curY,
	                                color: color[i % colorLength]
	                                // type: this.option.splitArea.areaStyle.type
	                            }
	                        };
	                        this.shapeList.push(new RectangleShape(axShape));
	                        lastYend = curY;
	                    }
	                }
	            }
	        },
	
	        /**
	         * 极值计算
	         */
	        _calculateValue: function () {
	            if (isNaN(this.option.min - 0) || isNaN(this.option.max - 0)) {
	                // 有一个没指定都得算
	                // 数据整形
	                var data = {};          // 整形后数据抽取
	                var xIdx;
	                var yIdx;
	                var legend = this.component.legend;
	                for (var i = 0, l = this.series.length; i < l; i++) {
	                    if (this.series[i].type != ecConfig.CHART_TYPE_LINE
	                        && this.series[i].type != ecConfig.CHART_TYPE_BAR
	                        && this.series[i].type != ecConfig.CHART_TYPE_SCATTER
	                        && this.series[i].type != ecConfig.CHART_TYPE_K
	                        && this.series[i].type != ecConfig.CHART_TYPE_EVENTRIVER
	                    ) {
	                        // 非坐标轴支持的不算极值
	                        continue;
	                    }
	                    // 请允许我写开，跟上面一个不是一样东西
	                    if (legend && !legend.isSelected(this.series[i].name)){
	                        continue;
	                    }
	
	                    // 不指定默认为第一轴线
	                    xIdx = this.series[i].xAxisIndex || 0;
	                    yIdx = this.series[i].yAxisIndex || 0;
	                    if ((this.option.xAxisIndex != xIdx)
	                        && (this.option.yAxisIndex != yIdx)
	                    ) {
	                        // 不是自己的数据不计算极值
	                        continue;
	                    }
	
	                    this._calculSum(data, i);
	                }
	
	                // 找极值
	                var oriData;            // 原始数据
	                for (var i in data){
	                    oriData = data[i];
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        if (!isNaN(oriData[j])){
	                            this._hasData = true;
	                            this._min = oriData[j];
	                            this._max = oriData[j];
	                            break;
	                        }
	                    }
	                    if (this._hasData) {
	                        break;
	                    }
	                }
	                for (var i in data){
	                    oriData = data[i];
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        if (!isNaN(oriData[j])){
	                            this._min = Math.min(this._min, oriData[j]);
	                            this._max = Math.max(this._max, oriData[j]);
	                        }
	                    }
	                }
	
	                // console.log(this._min,this._max,'vvvvv111111',this.option.type)
	                // log情况暂时禁用boundaryGap。
	                var boundaryGap = this.option.type !== 'log' ? this.option.boundaryGap : [0, 0];
	                var gap = Math.abs(this._max - this._min);
	                this._min = isNaN(this.option.min - 0)
	                       ? (this._min - Math.abs(gap * boundaryGap[0]))
	                       : (this.option.min - 0);    // 指定min忽略boundaryGay[0]
	
	                this._max = isNaN(this.option.max - 0)
	                       ? (this._max + Math.abs(gap * boundaryGap[1]))
	                       : (this.option.max - 0);    // 指定max忽略boundaryGay[1]
	                if (this._min === this._max) {
	                    if (this._max === 0) {
	                        // 修复全0数据
	                        this._max = 1;
	                    }
	                    // 修复最大值==最小值时数据整形
	                    else if (this._max > 0) {
	                        this._min = this._max / this.option.splitNumber != null ? this.option.splitNumber : 5;
	                    }
	                    else { // this._max < 0
	                        this._max = this._max / this.option.splitNumber != null ? this.option.splitNumber : 5;
	                    }
	                }
	
	                if (this.option.type === 'time') {
	                    this._reformTimeValue();
	                }
	                else if (this.option.type === 'log') {
	                    this._reformLogValue();
	                }
	                else {
	                    this._reformValue(this.option.scale);
	                }
	            }
	            else {
	                this._hasData = true;
	                // 用户指定min max就不多管闲事了
	                this._min = this.option.min - 0;    // 指定min忽略boundaryGay[0]
	                this._max = this.option.max - 0;    // 指定max忽略boundaryGay[1]
	
	                if (this.option.type === 'time') {
	                    this._reformTimeValue();
	                }
	                else if (this.option.type === 'log') {
	                    this._reformLogValue();
	                }
	                else {
	                    this._customerValue();
	                }
	            }
	        },
	
	        /**
	         * 内部使用，计算某系列下的堆叠和
	         */
	        _calculSum: function (data, i) {
	            var key = this.series[i].name || 'kener';
	            var value;
	            var oriData;
	            if (!this.series[i].stack) {
	                data[key] = data[key] || [];
	                if (this.series[i].type != ecConfig.CHART_TYPE_EVENTRIVER) {
	                    oriData = this.series[i].data;
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        value = this.getDataFromOption(oriData[j]);
	                        if (this.series[i].type === ecConfig.CHART_TYPE_K) {
	                            data[key].push(value[0]);
	                            data[key].push(value[1]);
	                            data[key].push(value[2]);
	                            data[key].push(value[3]);
	                        }
	                        else if (value instanceof Array) {
	                            // scatter 、 不等距 line bar
	                            if (this.option.xAxisIndex != -1) {
	                                data[key].push(
	                                    this.option.type != 'time'
	                                    ? value[0] : ecDate.getNewDate(value[0])
	                                );
	                            }
	                            if (this.option.yAxisIndex != -1) {
	                                data[key].push(
	                                    this.option.type != 'time'
	                                    ? value[1] : ecDate.getNewDate(value[1])
	                                );
	                            }
	                        }
	                        else {
	                            data[key].push(value);
	                        }
	                    }
	                }
	                else {
	                    // eventRiver
	                    oriData = this.series[i].data;
	                    for (var j = 0, k = oriData.length; j < k; j++) {
	                        var evolution = oriData[j].evolution;
	                        for (var m = 0, n = evolution.length; m < n; m++) {
	                            data[key].push(ecDate.getNewDate(evolution[m].time));
	                        }
	                    }
	                }
	            }
	            else {
	                // 堆积数据，需要区分正负向堆积
	                var keyP = '__Magic_Key_Positive__' + this.series[i].stack;
	                var keyN = '__Magic_Key_Negative__' + this.series[i].stack;
	                data[keyP] = data[keyP] || [];
	                data[keyN] = data[keyN] || [];
	                data[key] = data[key] || [];  // scale下还需要记录每一个量
	                oriData = this.series[i].data;
	                for (var j = 0, k = oriData.length; j < k; j++) {
	                    value = this.getDataFromOption(oriData[j]);
	                    if (value === '-') {
	                        continue;
	                    }
	                    value = value - 0;
	                    if (value >= 0) {
	                        if (data[keyP][j] != null) {
	                            data[keyP][j] += value;
	                        }
	                        else {
	                            data[keyP][j] = value;
	                        }
	                    }
	                    else {
	                        if (data[keyN][j] != null) {
	                            data[keyN][j] += value;
	                        }
	                        else {
	                            data[keyN][j] = value;
	                        }
	                    }
	                    if (this.option.scale) {
	                        data[key].push(value);
	                    }
	                }
	            }
	        },
	
	        /**
	         * 找到原始数据的极值后根据选项整形最终 this._min / this._max / this._valueList
	         * 如果你不知道这个“整形”的用义，请不要试图去理解和修改这个方法！找我也没用，我相信我已经记不起来！
	         * 如果你有更简洁的数学推导欢迎重写，后果自负~
	         *
	         * by kener.linfeng@gmail.com 2013-1-8
	         * --------
	         * 感谢谢世威(https://github.com/i6ma)，终于有人改这个方法了
	         * by Kener 2014-11-6
	         */
	        _reformValue: function (scale) {
	            var smartSteps = __webpack_require__(257);
	            var splitNumber = this.option.splitNumber;
	
	            // 非scale下双正，修正最小值为0
	            if (!scale && this._min >= 0 && this._max >= 0) {
	                this._min = 0;
	            }
	            // 非scale下双负，修正最大值为0
	            if (!scale && this._min <= 0 && this._max <= 0) {
	                this._max = 0;
	            }
	
	            var stepOpt = smartSteps(this._min, this._max, splitNumber);
	            splitNumber = splitNumber != null ? splitNumber : stepOpt.secs;
	            //this.option.splitNumber = splitNumber;
	            this._min = stepOpt.min;
	            this._max = stepOpt.max;
	            this._valueList = stepOpt.pnts;
	            this._reformLabelData();
	        },
	
	        /**
	         * 格式化时间值
	         */
	        _reformTimeValue : function() {
	            var splitNumber = this.option.splitNumber != null ? this.option.splitNumber : 5;
	
	            // 最优解
	            var curValue = ecDate.getAutoFormatter(this._min, this._max, splitNumber);
	            // 目标
	            var formatter = curValue.formatter;
	            var gapValue = curValue.gapValue;
	
	            this._valueList = [ecDate.getNewDate(this._min)];
	            var startGap;
	            switch (formatter) {
	                case 'week' :
	                    startGap = ecDate.nextMonday(this._min);
	                    break;
	                case 'month' :
	                    startGap = ecDate.nextNthOnMonth(this._min, 1);
	                    break;
	                case 'quarter' :
	                    startGap = ecDate.nextNthOnQuarterYear(this._min, 1);
	                    break;
	                case 'half-year' :
	                    startGap = ecDate.nextNthOnHalfYear(this._min, 1);
	                    break;
	                case 'year' :
	                    startGap = ecDate.nextNthOnYear(this._min, 1);
	                    break;
	                default :
	                    // 大于2小时需要考虑时区不能直接取整
	                    if (gapValue <= 3600000 * 2) {
	                        startGap = (Math.floor(this._min / gapValue) + 1) * gapValue;
	                    }
	                    else {
	                        startGap = ecDate.getNewDate(this._min - (-gapValue));
	                        startGap.setHours(Math.round(startGap.getHours() / 6) * 6);
	                        startGap.setMinutes(0);
	                        startGap.setSeconds(0);
	                    }
	                    break;
	            }
	
	            if (startGap - this._min < gapValue / 2) {
	                startGap -= -gapValue;
	            }
	
	            // console.log(startGap,gapValue,this._min, this._max,formatter)
	            curValue = ecDate.getNewDate(startGap);
	            splitNumber *= 1.5;
	            while (splitNumber-- >= 0) {
	                if (formatter == 'month'
	                    || formatter == 'quarter'
	                    || formatter == 'half-year'
	                    || formatter == 'year'
	                ) {
	                    curValue.setDate(1);
	                }
	                if (this._max - curValue < gapValue / 2) {
	                    break;
	                }
	                this._valueList.push(curValue);
	                curValue = ecDate.getNewDate(curValue - (-gapValue));
	            }
	            this._valueList.push(ecDate.getNewDate(this._max));
	
	            this._reformLabelData((function (formatterStr) {
	                return function (value) {
	                    return ecDate.format(formatterStr, value);
	                };
	            })(formatter));
	        },
	
	        _customerValue: function () {
	            var accMath = __webpack_require__(219);
	            var splitNumber = this.option.splitNumber != null ? this.option.splitNumber : 5;
	            var splitGap = (this._max - this._min) / splitNumber;
	
	            this._valueList = [];
	            for (var i = 0; i <= splitNumber; i++) {
	                this._valueList.push(accMath.accAdd(this._min, accMath.accMul(splitGap, i)));
	            }
	            this._reformLabelData();
	        },
	
	        _reformLogValue: function() {
	            // log数轴本质就是缩放，相当于默认this.option.scale === true，所以不修正_min和_max到0。
	            var thisOption = this.option;
	            var result = __webpack_require__(258)({
	                dataMin: this._min,
	                dataMax: this._max,
	                logPositive: thisOption.logPositive,
	                logLabelBase: thisOption.logLabelBase,
	                splitNumber: thisOption.splitNumber
	            });
	
	            this._min = result.dataMin;
	            this._max = result.dataMax;
	            this._valueList = result.tickList;
	            // {value2Coord: {Function}, coord2Value: {Function}}
	            this._dataMappingMethods = result.dataMappingMethods;
	
	            this._reformLabelData(result.labelFormatter);
	        },
	
	        _reformLabelData: function (innerFormatter) {
	            this._valueLabel = [];
	            var formatter = this.option.axisLabel.formatter;
	            if (formatter) {
	                for (var i = 0, l = this._valueList.length; i < l; i++) {
	                    if (typeof formatter === 'function') {
	                        this._valueLabel.push(
	                            innerFormatter
	                                ? formatter.call(this.myChart, this._valueList[i], innerFormatter)
	                                : formatter.call(this.myChart, this._valueList[i])
	                        );
	                    }
	                    else if (typeof formatter === 'string') {
	                        this._valueLabel.push(
	                            innerFormatter
	                                ? ecDate.format(formatter, this._valueList[i])
	                                : formatter.replace('{value}',this._valueList[i])
	                        );
	                    }
	                }
	            }
	            else {
	                for (var i = 0, l = this._valueList.length; i < l; i++) {
	                    this._valueLabel.push(
	                        innerFormatter
	                            ? innerFormatter(this._valueList[i])
	                            : this.numAddCommas(this._valueList[i]) // 每三位默认加,格式化
	                    );
	                }
	            }
	        },
	
	        getExtremum: function () {
	            this._calculateValue();
	            var dataMappingMethods = this._dataMappingMethods;
	            return {
	                min: this._min,
	                max: this._max,
	                dataMappingMethods: dataMappingMethods
	                    ? zrUtil.merge({}, dataMappingMethods) : null
	            };
	        },
	
	        /**
	         * 刷新
	         */
	        refresh: function (newOption, newSeries) {
	            if (newOption) {
	                this.option = this.reformOption(newOption);
	                // 通用字体设置
	                this.option.axisLabel.textStyle = zrUtil.merge(
	                    this.option.axisLabel.textStyle || {},
	                    this.ecTheme.textStyle
	                );
	                this.series = newSeries;
	            }
	            if (this.zr) {   // 数值轴的另外一个功能只是用来计算极值
	                this.clear();
	                this._buildShape();
	            }
	        },
	
	        // 根据值换算位置
	        getCoord: function (value) {
	            if (this._dataMappingMethods) {
	                value = this._dataMappingMethods.value2Coord(value);
	            }
	
	            value = value < this._min ? this._min : value;
	            value = value > this._max ? this._max : value;
	
	            var result;
	            if (!this.isHorizontal()) {
	                // 纵向
	                result = this.grid.getYend()
	                         - (value - this._min)
	                           / (this._max - this._min)
	                           * this.grid.getHeight();
	            }
	            else {
	                // 横向
	                result = this.grid.getX()
	                         + (value - this._min)
	                           / (this._max - this._min)
	                           * this.grid.getWidth();
	            }
	
	            return result;
	            // Math.floor可能引起一些偏差，但性能会更好
	            /* 准确更重要
	            return (value === this._min || value === this._max)
	                   ? result
	                   : Math.floor(result);
	            */
	        },
	
	        // 根据值换算绝对大小
	        getCoordSize: function (value) {
	            if (!this.isHorizontal()) {
	                // 纵向
	                return Math.abs(value / (this._max - this._min) * this.grid.getHeight());
	            }
	            else {
	                // 横向
	                return Math.abs(value / (this._max - this._min) * this.grid.getWidth());
	            }
	        },
	
	        // 根据位置换算值
	        getValueFromCoord: function(coord) {
	            var result;
	
	            if (!this.isHorizontal()) {
	                // 纵向
	                coord = coord < this.grid.getY() ? this.grid.getY() : coord;
	                coord = coord > this.grid.getYend() ? this.grid.getYend() : coord;
	                result = this._max
	                         - (coord - this.grid.getY())
	                           / this.grid.getHeight()
	                           * (this._max - this._min);
	            }
	            else {
	                // 横向
	                coord = coord < this.grid.getX() ? this.grid.getX() : coord;
	                coord = coord > this.grid.getXend() ? this.grid.getXend() : coord;
	                result = this._min
	                         + (coord - this.grid.getX())
	                           / this.grid.getWidth()
	                           * (this._max - this._min);
	            }
	
	            if (this._dataMappingMethods) {
	                result = this._dataMappingMethods.coord2Value(result);
	            }
	
	            return result.toFixed(2) - 0;
	        },
	
	        isMaindAxis : function (value) {
	            for (var i = 0, l = this._valueList.length; i < l; i++) {
	                if (this._valueList[i] === value) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    };
	
	    zrUtil.inherits(ValueAxis, Base);
	
	    __webpack_require__(229).define('valueAxis', ValueAxis);
	
	    return ValueAxis;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts日期运算格式化相关
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    var _timeGap = [
	        {formatter: 'hh : mm : ss', value: 1000},               // 1s
	        {formatter: 'hh : mm : ss', value: 1000 * 5},           // 5s
	        {formatter: 'hh : mm : ss', value: 1000 * 10},          // 10s
	        {formatter: 'hh : mm : ss', value: 1000 * 15},          // 15s
	        {formatter: 'hh : mm : ss', value: 1000 * 30},          // 30s
	        {formatter: 'hh : mm\nMM - dd', value: 60000},          // 1m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 5},      // 5m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 10},     // 10m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 15},     // 15m
	        {formatter: 'hh : mm\nMM - dd', value: 60000 * 30},     // 30m
	        {formatter: 'hh : mm\nMM - dd', value: 3600000},        // 1h
	        {formatter: 'hh : mm\nMM - dd', value: 3600000 * 2},    // 2h
	        {formatter: 'hh : mm\nMM - dd', value: 3600000 * 6},    // 6h
	        {formatter: 'hh : mm\nMM - dd', value: 3600000 * 12},   // 12h
	        {formatter: 'MM - dd\nyyyy', value: 3600000 * 24},      // 1d
	        {formatter: 'week', value: 3600000 * 24 * 7},           // 7d
	        {formatter: 'month', value: 3600000 * 24 * 31},         // 1M
	        {formatter: 'quarter', value: 3600000 * 24 * 380 / 4},  // 3M
	        {formatter: 'half-year', value: 3600000 * 24 * 380 / 2},// 6M
	        {formatter: 'year', value: 3600000 * 24 * 380}          // 1Y
	    ];
	    
	    /**
	     * 获取最佳formatter
	     * @params {number} min 最小值
	     * @params {number} max 最大值
	     * @params {=number} splitNumber 分隔段数
	     */
	    function getAutoFormatter(min, max, splitNumber) {
	        splitNumber = splitNumber > 1 ? splitNumber : 2;
	        // 最优解
	        var curValue;
	        var totalGap;
	        // 目标
	        var formatter;
	        var gapValue;
	        for (var i = 0, l = _timeGap.length; i < l; i++) {
	            curValue = _timeGap[i].value;
	            totalGap = Math.ceil(max / curValue) * curValue 
	                       - Math.floor(min / curValue) * curValue;
	            if (Math.round(totalGap / curValue) <= splitNumber * 1.2) {
	                formatter =  _timeGap[i].formatter;
	                gapValue = _timeGap[i].value;
	                // console.log(formatter, gapValue,i);
	                break;
	            }
	        }
	        
	        if (formatter == null) {
	            formatter = 'year';
	            curValue = 3600000 * 24 * 367;
	            totalGap = Math.ceil(max / curValue) * curValue 
	                       - Math.floor(min / curValue) * curValue;
	            gapValue = Math.round(totalGap / (splitNumber - 1) / curValue) * curValue;
	        }
	        
	        return {
	            formatter: formatter,
	            gapValue: gapValue
	        };
	    }
	    
	    /**
	     * 一位数字补0 
	     */
	    function s2d (v) {
	        return v < 10 ? ('0' + v) : v;
	    }
	    
	    /**
	     * 百分比计算
	     */
	    function format(formatter, value) {
	        if (formatter == 'week' 
	            || formatter == 'month' 
	            || formatter == 'quarter' 
	            || formatter == 'half-year'
	            || formatter == 'year'
	        ) {
	            formatter = 'MM - dd\nyyyy';
	        }
	            
	        var date = getNewDate(value);
	        var y = date.getFullYear();
	        var M = date.getMonth() + 1;
	        var d = date.getDate();
	        var h = date.getHours();
	        var m = date.getMinutes();
	        var s = date.getSeconds();
	        
	        formatter = formatter.replace('MM', s2d(M));
	        formatter = formatter.toLowerCase();
	        formatter = formatter.replace('yyyy', y);
	        formatter = formatter.replace('yy', y % 100);
	        formatter = formatter.replace('dd', s2d(d));
	        formatter = formatter.replace('d', d);
	        formatter = formatter.replace('hh', s2d(h));
	        formatter = formatter.replace('h', h);
	        formatter = formatter.replace('mm', s2d(m));
	        formatter = formatter.replace('m', m);
	        formatter = formatter.replace('ss', s2d(s));
	        formatter = formatter.replace('s', s);
	
	        return formatter;
	    }
	    
	    function nextMonday(value) {
	        value = getNewDate(value);
	        value.setDate(value.getDate() + 8 - value.getDay());
	        return value;
	    }
	    
	    function nextNthPerNmonth(value, nth, nmon) {
	        value = getNewDate(value);
	        value.setMonth(Math.ceil((value.getMonth() + 1) / nmon) * nmon);
	        value.setDate(nth);
	        return value;
	    }
	    
	    function nextNthOnMonth(value, nth) {
	        return nextNthPerNmonth(value, nth, 1);
	    }
	    
	    function nextNthOnQuarterYear(value, nth) {
	        return nextNthPerNmonth(value, nth, 3);
	    }
	    
	    function nextNthOnHalfYear(value, nth) {
	        return nextNthPerNmonth(value, nth, 6);
	    }
	    
	    function nextNthOnYear(value, nth) {
	        return nextNthPerNmonth(value, nth, 12);
	    }
	    
	    function getNewDate(value) {
	        return value instanceof Date
	               ? value
	               : new Date(typeof value == 'string' ? value.replace(/-/g, '/') : value);
	    }
	    
	    return {
	        getAutoFormatter: getAutoFormatter,
	        getNewDate: getNewDate,
	        format: format,
	        nextMonday: nextMonday,
	        nextNthPerNmonth: nextNthPerNmonth,
	        nextNthOnMonth: nextNthOnMonth,
	        nextNthOnQuarterYear: nextNthOnQuarterYear,
	        nextNthOnHalfYear: nextNthOnHalfYear,
	        nextNthOnYear : nextNthOnYear
	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;
	/**
	 * echarts 值轴分段刻度计算方法
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author xieshiwei (谢世威, i6ma@i6ma.com)
	 *
	 */
	
	
	/**
	 * 最值、跨度、步长取近似值
	 * 注意：不适用于高精度需求，或者很多位有效数字的情况！！！
	 * @function    smartSteps
	 * @param       {Number}    min             最小值
	 * @param       {Number}    max             最大值
	 * @param       {Number}    [section]       段数只能是 [0, 99] 的整数，段数为 0 或者不指定段数时，将自动调整段数
	 * @param       {Object}    [opts]          其它扩展参数
	 * @param       {Array}     opts.steps      自定义步长备选值，如 [10, 12, 15, 20, 25, 30, 40, 50, 60, 80] ，但必须 => [10, 99]
	 * @return      {Object}    {min: 新最小值, max: 新最大值, secs: 分段数, step: 每段长, fix: 小数保留位数, pnts: [分段结果]}
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	
	
	
	var mySteps     = [10, 20, 25, 50];
	var mySections  = [4, 5, 6];
	
	var custOpts;
	var custSteps;
	var custSecs;
	var minLocked;
	var maxLocked;
	
	var MT          = Math;
	var MATH_ROUND  = MT.round;
	var MATH_FLOOR  = MT.floor;
	var MATH_CEIL   = MT.ceil;
	var MATH_ABS    = MT.abs;
	
	
	function MATH_LOG(n) {return MT.log(MATH_ABS(n)) / MT.LN10;}
	function MATH_POW(n) {return MT.pow(10, n);}
	function MATH_ISINT(n) {return n === MATH_FLOOR(n);}
	
	
	function smartSteps(min, max, section, opts) {
	    // 拿公共变量来接收 opts.steps 这个参数，就不用带着参数层层传递了，注意在函数的最终出口处释放这个值
	    custOpts    = opts || {};
	    custSteps   = custOpts.steps || mySteps;
	    custSecs    = custOpts.secs || mySections;
	    section     = MATH_ROUND(+section || 0) % 99;           // 段数限定在 [0, 99] ，0 则自适应
	    min         = +min || 0;
	    max         = +max || 0;
	    minLocked   = maxLocked = 0;
	    if ('min' in custOpts) {
	        min     = +custOpts.min || 0;
	        minLocked = 1;
	    }
	    if ('max' in custOpts) {
	        max     = +custOpts.max || 0;
	        maxLocked = 1;
	    }
	    if (min > max) {max = [min, min = max][0];}             // 最值交换
	    var span    = max - min;
	    if (minLocked && maxLocked) {
	        return bothLocked(min, max, section);               // 两个最值同时被锁定，注意差值为 0 的情况
	    }
	    if (span < (section || 5)) {                            // 跨度值小于要分的段数，步长将会小于 1
	        if (MATH_ISINT(min) && MATH_ISINT(max)) {           // 步长小于 1 同时两个最值都是整数，特别处理
	            return forInteger(min, max, section);           // 也要考虑差值为 0 的情况
	        }
	        else if (span === 0) {                              // 非整数且跨度为 0 的情况
	            return forSpan0(min, max, section);
	        }
	    }
	    return coreCalc(min, max, section);                     // 非特殊情况的计算，须确保 min < max
	}
	
	
	
	/**
	 * 构造返回值，处理小数精度等问题
	 * @param   {Number}    newMin      最小值
	 * @param   {Number}    newMax      最大值
	 * @param   {Number}    section     分段数
	 * @param   {Number}    [expon]     计算量级
	 * @return  {Object}                同 smartSteps
	 */
	function makeResult(newMin, newMax, section, expon) {
	    expon       = expon || 0;                               // 这是中间计算量级，受步长增长、特别是最值锁定的影响，可能会小于基准量级，因为整数部分被过度放大
	    var expStep = expNum((newMax - newMin) / section, -1);
	    var expMin  = expNum(newMin, -1, 1);                    // 锁定的最值有效数位可能很多，需要全精度保留
	    var expMax  = expNum(newMax, -1);
	    var minExp  = MT.min(expStep.e, expMin.e, expMax.e);    // 这个值实际上就是各值整数部分尾部多余的 0 的个数
	    if (expMin.c === 0) {                                   // 0 可以有任意多个尾0
	        minExp  = MT.min(expStep.e, expMax.e);
	    } else if (expMax.c === 0) {
	        minExp  = MT.min(expStep.e, expMin.e);
	    }
	    expFixTo(expStep, {c: 0, e: minExp});
	    expFixTo(expMin, expStep, 1);
	    expFixTo(expMax, expStep);
	    expon      += minExp;                                   // 最终的基准量级，在这个量级下，各值刚好能表示成整数
	    newMin      = expMin.c;
	    newMax      = expMax.c;
	    var step    = (newMax - newMin) / section;
	    var zoom    = MATH_POW(expon);
	    var fixTo   = 0;
	    var points  = [];
	    for (var i  = section + 1; i--;) {                      // 因为点数比段数多 1
	        points[i] = (newMin + step * i) * zoom;             // 如果不涉及小数问题，这里就直接使用数值型
	    }
	    if (expon   < 0) {
	        fixTo   = decimals(zoom);                           // 前面已经去掉了各值尾部多余的 0 ，所以 zoom 的小数位就是最终的 fix 位数
	        step    = +(step * zoom).toFixed(fixTo);            // toFixed 处理长尾小数问题，如：0.2 * 0.1 = 0.020000000000000004
	        newMin  = +(newMin * zoom).toFixed(fixTo);
	        newMax  = +(newMax * zoom).toFixed(fixTo);
	        for (var i = points.length; i--;) {
	            points[i] = points[i].toFixed(fixTo);           // 为保证小数点对齐，统一转为字符型
	            +points[i] === 0 && (points[i] = '0');          // 0.000 不好看
	        }
	    }
	    else {
	        newMin *= zoom;
	        newMax *= zoom;
	        step   *= zoom;
	    }
	    custSecs    = 0;
	    custSteps   = 0;
	    custOpts    = 0;
	    // 这些公共变量可能持用了对用户参数的引用，这里是函数的最终出口，释放引用
	
	    return {
	        min:    newMin,                 // 新最小值
	        max:    newMax,                 // 新最大值
	        secs:   section,                // 分段数
	        step:   step,                   // 每段长
	        fix:    fixTo,                  // 小数保留位数，0 则为整数
	        exp:    expon,                  // 基准量级，并非原值所在的量级，而是说在这个量级下，各值能表示成整数
	        pnts:   points                  // 分段结果，整数都是数值型，小数时为了对齐小数点，都是字符型，但其中 0 不带小数点，即没有 "0.000"
	    };
	}
	
	
	
	/**
	 * 量级计数法 表示数值，不适用于很大或者很小的数，0 更不行
	 * @param       {Number}    num             原数
	 * @param       {Number}    [digit = 2]     精度位数，必须 => [1, 9]
	 * @param       {Boolean}   [byFloor = 0]   默认为 0 表示近似值不小于原值，置 1 表示近似值不大于原值
	 * @return      {Object}    {c: c, e: e}    c e 都是整数，c * 10 ^ e 即为原值的近似数
	 * @description             返回值应该更详细一点：{c: c, e: e, d: d, n: n} ，其中 d 是 c 的位数，n = c * 10 ^ e ，不过目前好像不太有用
	 */
	function expNum(num, digit, byFloor) {
	    digit       = MATH_ROUND(digit % 10) || 2;
	    if (digit   < 0) {                                      // 全精度位数
	        if (MATH_ISINT(num)) {                              // 整数的全精度位数，要去掉尾 0 ，但 0 也是整数，要专门留一位精度
	            digit = ('' + MATH_ABS(num)).replace(/0+$/, '').length || 1;
	        }
	        else {                                              // 小数的全精度位数，要去掉首 0
	            num = num.toFixed(15).replace(/0+$/, '');       // toFixed 处理长尾小数
	            digit = num.replace('.', '').replace(/^[-0]+/, '').length;
	            num = +num;                                     // '' + 0.0000001 会得到 '1e-7'
	        }
	    }
	    var expon   = MATH_FLOOR(MATH_LOG(num)) - digit + 1;
	    var cNum    = +(num * MATH_POW(-expon)).toFixed(15) || 0;   // toFixed 处理长尾小数问题
	    cNum        = byFloor ? MATH_FLOOR(cNum) : MATH_CEIL(cNum); // 向上取整可能发生进位，使精度位数增加 1
	    !cNum && (expon = 0);
	    if (('' + MATH_ABS(cNum)).length > digit) {                 // 整数位数判断，字符串法比对数法快近一倍
	        expon  += 1;
	        cNum   /= 10;
	    }
	    return {
	        c: cNum,
	        e: expon
	    };
	}
	
	
	/**
	 * 将前者的指数对齐到后者，如果前者量级较小，就是强制加大指数，值误差可能严重放大，甚至值变为 0
	 */
	function expFixTo(expnum1, expnum2, byFloor) {
	    var deltaExp    = expnum2.e - expnum1.e;
	    if (deltaExp) {
	        expnum1.e  += deltaExp;                             // 指数减小时，只需将整数部分相应放大
	        expnum1.c  *= MATH_POW(-deltaExp);                  // 指数增加时，整数部分将缩小，就涉及 floor ceil 取整和变 0 问题
	        expnum1.c   = byFloor ? MATH_FLOOR(expnum1.c) : MATH_CEIL(expnum1.c);
	    }
	}
	
	
	/**
	 * 将两个量级数的指数对齐到较小者
	 */
	function expFixMin(expnum1, expnum2, byFloor) {
	    if (expnum1.e < expnum2.e) {
	        expFixTo(expnum2, expnum1, byFloor);
	    }
	    else {
	        expFixTo(expnum1, expnum2, byFloor);
	    }
	}
	
	
	/**
	 * 基于量级计数法，对原值的整数部分取近似，不适用于负数和 0
	 * @param       {Number}    num             原值
	 * @param       {Array}     [rounds]        在取近似时，提供预置选项，近似到 rounds 中的某项
	 * @return      {Object}    expNum          2 位精度的量级计数法对象，不小于原值
	 */
	function getCeil(num, rounds) {
	    rounds      = rounds || mySteps;
	    num         = expNum(num);                              // 2 位精度量级计数法
	    var cNum    = num.c;
	    var i       = 0;
	    while (cNum > rounds[i]) {                              // 在预置的近似数中，找到不小于目标 cNum 的项
	        i++;
	    }
	    if (!rounds[i]) {                                       // 如果没找到合适的预置项，一定是目标值大于全部的预置项
	        cNum   /= 10;                                       // 将目标值缩小 10 倍，重找一次定能命中
	        num.e  += 1;
	        i       = 0;
	        while (cNum > rounds[i]) {
	            i++;
	        }
	    }
	    num.c       = rounds[i];
	    return num;
	}
	
	
	
	
	/**
	 * 基于量级计数法的计算，必须 min < max
	 */
	function coreCalc(min, max, section) {
	    var step;
	    var secs    = section || +custSecs.slice(-1);
	    var expStep = getCeil((max - min) / secs, custSteps);   // 这是可能的最小步长，以它的量级作为后续计算的基准量级，以保证整数计算特性
	    var expSpan = expNum(max - min);                        // 2 位精度的最值跨度，过高的精度意味着有效数位更多
	    var expMin  = expNum(min, -1, 1);                       // 最小值向下近似，以涵盖原最小值
	    var expMax  = expNum(max, -1);     // 最大值向上近似，参数 -1 表示保留全精度，因为要注意 min = 10000001, max = 10000002 等情况
	    expFixTo(expSpan, expStep);                             // 指数对齐
	    expFixTo(expMin, expStep, 1);                           // 经过指数对齐，原最大值、最小值都有可能变为 0
	    expFixTo(expMax, expStep);
	    if (!section) {
	        secs    = look4sections(expMin, expMax);
	    }
	    else {
	        step    = look4step(expMin, expMax, secs);
	    }
	
	    // 如果原最值都是整数，尽量让输出值也保持整数，但原最值跨 0 的则不调整
	    if (MATH_ISINT(min) && MATH_ISINT(max) && min * max >= 0) {
	        if (max - min < secs) {                             // 再次出现跨度小于段数
	            return forInteger(min, max, secs);
	        }
	        secs = tryForInt(min, max, section, expMin, expMax, secs);
	    }
	    var arrMM   = cross0(min, max, expMin.c, expMax.c);
	    expMin.c    = arrMM[0];
	    expMax.c    = arrMM[1];
	    if (minLocked || maxLocked) {
	        singleLocked(min, max, expMin, expMax);
	    }
	    return makeResult(expMin.c, expMax.c, secs, expMax.e);
	}
	
	
	
	/**
	 * 在预置的可选段数中，找出一个合适的值，让跨度误差尽量小
	 */
	function look4sections(expMin, expMax) {
	    var section;
	    var tmpStep, tmpMin, tmpMax;
	    var reference   = [];
	    for (var i      = custSecs.length; i--;) {              // 逐步减小段数，步长就会渐大
	        section     = custSecs[i];
	        tmpStep     = getCeil((expMax.c - expMin.c) / section, custSteps);
	        tmpStep     = tmpStep.c * MATH_POW(tmpStep.e);      // 步长都用常规整数参与计算
	        tmpMin      = MATH_FLOOR(expMin.c / tmpStep) * tmpStep;
	        tmpMax      = MATH_CEIL(expMax.c / tmpStep) * tmpStep;
	        reference[i] = {
	            min:    tmpMin,
	            max:    tmpMax,
	            step:   tmpStep,
	            span:   tmpMax - tmpMin                         // 步长的误差被 段数 成倍放大，可能会给跨度造成更大的误差，使最后的段数大于预置的最大值
	        };
	    }
	    reference.sort(function (a, b) {
	        var delta = a.span - b.span;                        // 分段调整之后的跨度，一定不小于原跨度，所以越小越好
	        if (delta === 0) {
	            delta = a.step - b.step;                        // 跨度相同时，步长小者胜出
	        }
	        return delta;
	    });
	    reference   = reference[0];
	    section     = reference.span / reference.step;
	    expMin.c    = reference.min;
	    expMax.c    = reference.max;
	    return section < 3 ? section * 2 : section;             // 如果最终步长比最小步长大得多，段数就可能变得很小
	}
	
	
	/**
	 * 指定段数，在预置的可选步长中，找出一个合适的值，让 步长 * 段数 积刚好涵盖原最大值与最小值
	 */
	function look4step(expMin, expMax, secs) {
	    var span;
	    var tmpMax;
	    var tmpMin      = expMax.c;
	    var tmpStep     = (expMax.c - expMin.c) / secs - 1;
	    while (tmpMin   > expMin.c) {
	        tmpStep     = getCeil(tmpStep + 1, custSteps);
	        tmpStep     = tmpStep.c * MATH_POW(tmpStep.e);
	        span        = tmpStep * secs;
	        tmpMax      = MATH_CEIL(expMax.c / tmpStep) * tmpStep;
	        tmpMin      = tmpMax - span;                        // 优先保证 max 端的误差最小，试看原 min 值能否被覆盖到
	    }
	    var deltaMin    = expMin.c - tmpMin;                    // 上面的计算可能会让 min 端的误差更大，下面尝试均衡误差
	    var deltaMax    = tmpMax - expMax.c;
	    var deltaDelta  = deltaMin - deltaMax;
	    if (deltaDelta  > tmpStep * 1.1) {                      // 当 min 端的误差比 max 端大很多时，考虑将 tmpMin tmpMax 同时上移
	        deltaDelta  = MATH_ROUND(deltaDelta / tmpStep / 2) * tmpStep;
	        tmpMin     += deltaDelta;
	        tmpMax     += deltaDelta;
	    }
	    expMin.c   = tmpMin;
	    expMax.c   = tmpMax;
	    return tmpStep;
	}
	
	
	/**
	 * 原最值都是整数时，尝试让输出也保持整数
	 */
	function tryForInt(min, max, section, expMin, expMax, secs) {
	    var span = expMax.c - expMin.c;
	    var step = span / secs * MATH_POW(expMax.e);
	    if (!MATH_ISINT(step)) {                                // 原最值都是整数，但计算步长可能出现小数，如 2.5
	        step = MATH_FLOOR(step);                            // 步长总是要尽量小，以减小跨度误差，所以 2.5 可能被调整为 2 或者 3
	        span = step * secs;
	        if (span < max - min) {
	            step += 1;
	            span = step * secs;
	            if (!section && (step * (secs - 1) >= (max - min))) {
	                secs -= 1;
	                span = step * secs;
	            }
	        }
	        if (span >= max - min) {
	            var delta   = span - (max - min);               // 误差均衡
	            expMin.c    = MATH_ROUND(min - delta / 2);
	            expMax.c    = MATH_ROUND(max + delta / 2);
	            expMin.e    = 0;
	            expMax.e    = 0;
	        }
	    }
	    return secs;
	}
	
	
	
	
	/**
	 * 整数情况下，跨度小于段数的处理
	 */
	function forInteger(min, max, section) {
	    section     = section || 5;
	    if (minLocked) {
	        max     = min + section;                            // min max 没有写错，因为 min locked 所以 max 在 min 上浮动
	    }
	    else if (maxLocked) {
	        min     = max - section;
	    }
	    else {
	        var delta   = section - (max - min);                // 没有端点锁定时，向上下延展跨度
	        var newMin  = MATH_ROUND(min - delta / 2);
	        var newMax  = MATH_ROUND(max + delta / 2);
	        var arrMM   = cross0(min, max, newMin, newMax);     // 避免跨 0
	        min         = arrMM[0];
	        max         = arrMM[1];
	    }
	    return makeResult(min, max, section);
	}
	
	
	/**
	 * 非整数情况下，跨度为 0 的处理
	 */
	function forSpan0(min, max, section) {
	    section     = section || 5;
	    // delta 一定不为 0 ，因为 min === max === 0 的情况会进入 forInteger 分支
	    var delta   = MT.min(MATH_ABS(max / section), section) / 2.1;
	    if (minLocked) {
	        max     = min + delta;                              // min max 没有写错，因为 min locked 所以 max 在 min 上浮动
	    }
	    else if (maxLocked) {
	        min     = max - delta;
	    }
	    else {                                                  // 以最值为中心，上下各延展一小段
	        min     = min - delta;
	        max     = max + delta;
	    }
	    return coreCalc(min, max, section);
	}
	
	
	/**
	 * 当原始最值都在 0 的同侧时，让输出也保持在 0 的同侧
	 */
	function cross0(min, max, newMin, newMax) {
	    if (min >= 0 && newMin < 0) {
	        newMax -= newMin;
	        newMin  = 0;
	    }
	    else if (max <= 0 && newMax > 0) {
	        newMin -= newMax;
	        newMax  = 0;
	    }
	    return [newMin, newMax];
	}
	
	
	/**
	 * 取一个数的小数位数
	 * @param   {Number}    num         原数值
	 * @return  {Number}    decimals    整数则返回 0 ，小数则返回小数点后的位数
	 */
	function decimals(num) {
	    num = (+num).toFixed(15).split('.');                    // String(0.0000001) 会得到 '1e-7'
	    return num.pop().replace(/0+$/, '').length;
	}
	
	
	
	
	
	
	/**
	 * 单个最值锁定处理，只是在原计算的基础上，锁定一个，平移另一个
	 */
	function singleLocked(min, max, emin, emax) {
	    if (minLocked) {
	        var expMin  = expNum(min, 4, 1);                    // 4 位精度向下近似
	        if (emin.e  - expMin.e > 6) {                       // 如果锁定值的量级远小于基准量级，认为锁定失败，强置为 0
	            expMin  = {c: 0, e: emin.e};
	        }
	        expFixMin(emin, expMin);                            // 将指数与量级较小者对齐
	        expFixMin(emax, expMin);
	        emax.c     += expMin.c - emin.c;                    // 最大值平移
	        emin.c      = expMin.c;                             // 最小值锁定
	    }
	    else if (maxLocked) {
	        var expMax  = expNum(max, 4);                       // 4 位精度向上近似
	        if (emax.e  - expMax.e > 6) {                       // 如果锁定值的量级远小于基准量级，认为锁定失败，强置为 0
	            expMax  = {c: 0, e: emax.e};
	        }
	        expFixMin(emin, expMax);                            // 将指数与量级较小者对齐
	        expFixMin(emax, expMax);
	        emin.c     += expMax.c - emax.c;                    // 最小值平移
	        emax.c      = expMax.c;                             // 最大值锁定
	    }
	}
	
	
	/**
	 * 最小值和最大值同时被锁定的情况在这里，其它地方只考虑单边最值锁定
	 * @param   {Number}    min         锁定的最小值
	 * @param   {Number}    max         锁定的最大值
	 * @param   {Number}    [section]   段数
	 * @return  {Object}                同 smartSteps
	 */
	function bothLocked(min, max, section) {
	    var trySecs     = section ? [section] : custSecs;
	    var span        = max - min;
	    if (span       === 0) {                                 // 最大最小值都锁定到同一个值上，认为锁定失败
	        max         = expNum(max, 3);                       // 3 位精度向上近似
	        section     = trySecs[0];
	        max.c       = MATH_ROUND(max.c + section / 2);
	        return makeResult(max.c - section, max.c, section, max.e);
	    }
	    if (MATH_ABS(max / span) < 1e-6) {                      // 如果锁定值远小于跨度，也认为锁定失败，强置为 0
	        max         = 0;
	    }
	    if (MATH_ABS(min / span) < 1e-6) {
	        min         = 0;
	    }
	    var step, deltaSpan, score;
	    var scoreS      = [[5, 10], [10, 2], [50, 10], [100, 2]];
	    var reference   = [];
	    var debugLog    = [];
	    var expSpan     = expNum((max - min), 3);               // 3 位精度向上近似
	    var expMin      = expNum(min, -1, 1);
	    var expMax      = expNum(max, -1);
	    expFixTo(expMin, expSpan, 1);
	    expFixTo(expMax, expSpan);
	    span            = expMax.c - expMin.c;
	    expSpan.c       = span;
	    
	    for (var i      = trySecs.length; i--;) {
	        section     = trySecs[i];
	        step        = MATH_CEIL(span / section);
	        deltaSpan   = step * section - span;
	        score       = (deltaSpan + 3) * 3;                  // 误差越大得分越高
	        score      += (section - trySecs[0] + 2) * 2;       // 分段越多得分越高
	        if (section % 5 === 0) {                            // 段数为 5 可以减分
	            score  -= 10;
	        }
	        for (var j  = scoreS.length; j--;) {                // 好的步长是最重要的减分项
	            if (step % scoreS[j][0] === 0) {
	                score /= scoreS[j][1];
	            }
	        }
	        debugLog[i] = [section, step, deltaSpan, score].join();
	        reference[i] = {
	            secs:   section,
	            step:   step,
	            delta:  deltaSpan,
	            score:  score
	        };
	    }
	    //console.log(debugLog);
	    reference.sort(function (a, b) {return a.score - b.score;});
	    reference   = reference[0];
	    expMin.c    = MATH_ROUND(expMin.c - reference.delta / 2);
	    expMax.c    = MATH_ROUND(expMax.c + reference.delta / 2);
	    return makeResult(expMin.c, expMax.c, reference.secs, expSpan.e);
	}
	
	
	
	
	return smartSteps;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	
	


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Echarts, logarithmic axis reform
	 *
	 * @author sushuang (sushuang@baidu.com),
	 *         Ievgenii (@Ievgeny, ievgeny@zoomdata.com)
	 */
	
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {
	
	    // Reference
	    var number = __webpack_require__(222);
	    var Mt = Math;
	    var mathLog = Mt.log;
	    var mathPow = Mt.pow;
	    var mathAbs = Mt.abs;
	    var mathCeil = Mt.ceil;
	    var mathFloor = Mt.floor;
	
	    // Constant
	    var LOG_BASE = Mt.E; // It is not necessary to specify log base,
	                         // because log(logBase, x) = ln(x) / ln(logBase),
	                         // thus final result (axis tick location) is only determined by ln(x).
	    var LN10 = Mt.LN10;
	    var LN2 = Mt.LN2;
	    var LN2D10 = LN2 / LN10;
	    var EPSILON = 1e-9;
	    var DEFAULT_SPLIT_NUMBER = 5;
	    var MIN_BASE_10_SPLIT_NUMBER = 2;
	    var SUPERSCRIPTS = {
	        '0': '⁰',
	        '1': '¹',
	        '2': '²',
	        '3': '³',
	        '4': '⁴',
	        '5': '⁵',
	        '6': '⁶',
	        '7': '⁷',
	        '8': '⁸',
	        '9': '⁹',
	        '-': '⁻'
	    };
	
	    // Static variable
	    var logPositive;
	    var logLabelBase;
	    var logLabelMode; // enumeration:
	                      // 'plain' (i.e. axis labels are shown like 10000)
	                      // 'exponent' (i.e. axis labels are shown like 10²)
	    var lnBase;
	    var custOpts;
	    var splitNumber;
	    var logMappingOffset;
	    var absMin;
	    var absMax;
	    var tickList;
	
	    /**
	     * Test cases:
	     * [2, 4, 8, 16, 32, 64, 128]
	     * [0.01, 0.1, 10, 100, 1000] logLabelBase: 3
	     * [0.01, 0.1, 10, 100, 1000] logLabelBase: -12
	     * [-2, -4, -8, -16, -32, -64, -128] logLabelBase: 3
	     * [2, 4, 8, 16, '-', 64, 128]
	     * [2, 4, 8, 16, 32, 64]
	     * [2, 4, 8, 16, 32]
	     * [0.00000256, 0.0016, 0.04, 0.2]
	     * [0.1, 1, 10, 100, 1000, 10000, 100000, 1000000] splitNumber: 3
	     * [1331, 3434, 500, 1, 1212, 4]
	     * [0.14, 2, 45, 1001, 200, 0.33, 10001]
	     * [0.00001, 0.00005]
	     * [0.00001, 0.00005] boundaryGap: [0.2, 0.4]
	     * [0.001, 2, -45, 1001, 200, 0.33, 10000]
	     * [0.00000001, 0.00000012]
	     * [0.000000000000001]
	     * [0.00000001, 0.00000001]
	     * [3, 3]
	     * [12, -3, 47, 19]
	     * [12, -3, 47, 19] logPositive: false
	     * [-2, -4, -8, -16, -32, -64, -128]
	     * [-2, -4, -8, -16, -32, -64]
	     * [2, 4, 8, 16, 32] boundaryGap: [0.2, 0.4]
	     * []
	     * [0]
	     * [10, 10, 10]
	     * [0.00003, 0.00003, 0.00003]
	     * [0.00001, 0.00001, 0.00001]
	     * [-0.00001, -0.00001, -0.00001]
	     * ['-', '-']
	     * ['-', 10]
	     * logarithmic axis in scatter (try dataZoom)
	     * logarithmic axis width dataZoom component (try xAxis and yAxis)
	     */
	
	    /**
	     * Main function. Return data object with values for axis building.
	     *
	     * @public
	     * @param {Object} [opts] Configurable options
	     * @param {number} opts.dataMin data Minimum
	     * @param {number} opts.dataMax data Maximum
	     * @param {number=} opts.logPositive Logarithmic sign. If not specified, it will be auto-detected.
	     * @param {number=} opts.logLabelBase Logaithmic base in axis label.
	     *                                    If not specified, it will be set to 10 (and use 2 for detail)
	     * @param {number=} opts.splitNumber Number of sections perfered.
	     * @return {Object} {
	     *                      dataMin: New min,
	     *                      dataMax: New max,
	     *                      tickList: [Array of tick data]
	     *                      logPositive: Type of data sign
	     *                      dataMappingMethods: [Set of logarithmic methods]
	     *                  }
	     */
	    function smartLogSteps(opts) {
	        clearStaticVariables();
	        custOpts = opts || {};
	
	        reformSetting();
	        makeTicksList();
	
	        return [
	            makeResult(),
	            clearStaticVariables()
	        ][0];
	    }
	
	    /**
	     * All of static variables must be clear here.
	     */
	    function clearStaticVariables() {
	        logPositive = custOpts = logMappingOffset = lnBase =
	        absMin = absMax = splitNumber = tickList = logLabelBase = logLabelMode = null;
	    }
	
	    /**
	     * Determine sign (logPositive, negative) of data set, if not specified.
	     * Reform min and max of data.
	     */
	    function reformSetting() {
	        // Settings of log label base
	        logLabelBase = custOpts.logLabelBase;
	        if (logLabelBase == null) {
	            logLabelMode = 'plain';
	            logLabelBase = 10;
	            lnBase = LN10;
	        }
	        else {
	            logLabelBase = +logLabelBase;
	            if (logLabelBase < 1) { // log base less than 1 is not supported.
	                logLabelBase = 10;
	            }
	            logLabelMode = 'exponent';
	            lnBase = mathLog(logLabelBase);
	        }
	
	        // Settings of split number
	        splitNumber = custOpts.splitNumber;
	        splitNumber == null && (splitNumber = DEFAULT_SPLIT_NUMBER);
	
	        // Setting of data min and max
	        var dataMin = parseFloat(custOpts.dataMin);
	        var dataMax = parseFloat(custOpts.dataMax);
	
	        if (!isFinite(dataMin) && !isFinite(dataMax)) {
	            dataMin = dataMax = 1;
	        }
	        else if (!isFinite(dataMin)) {
	            dataMin = dataMax;
	        }
	        else if (!isFinite(dataMax)) {
	            dataMax = dataMin;
	        }
	        else if (dataMin > dataMax) {
	            dataMax = [dataMin, dataMin = dataMax][0]; // Exchange min, max.
	        }
	
	        // Settings of log positive
	        logPositive = custOpts.logPositive;
	        // If not specified, determine sign by data.
	        if (logPositive == null) {
	            // LogPositive is false when dataMax <= 0 && dataMin < 0.
	            // LogPositive is true when dataMin >= 0.
	            // LogPositive is true when dataMax >= 0 && dataMin < 0 (singular points may exists)
	            logPositive = dataMax > 0 || dataMin === 0;
	        }
	
	        // Settings of absMin and absMax, which must be greater than 0.
	        absMin = logPositive ? dataMin : -dataMax;
	        absMax = logPositive ? dataMax : -dataMin;
	        // FIXME
	        // If there is any data item less then zero, it is suppose to be igonred and min should be re-calculated.
	        // But it is difficult to do that in current code stucture.
	        // So refactor of xxAxis.js is desired.
	        absMin < EPSILON && (absMin = EPSILON);
	        absMax < EPSILON && (absMax = EPSILON);
	    }
	
	    /**
	     * Make tick list.
	     */
	    function makeTicksList() {
	        tickList = [];
	
	        // Estimate max exponent and min exponent
	        var maxDataLog = fixAccurate(mathLog(absMax) / lnBase);
	        var minDataLog = fixAccurate(mathLog(absMin) / lnBase);
	        var maxExpon = mathCeil(maxDataLog);
	        var minExpon = mathFloor(minDataLog);
	        var spanExpon = maxExpon - minExpon;
	        var spanDataLog = maxDataLog - minDataLog;
	
	        if (logLabelMode === 'exponent') {
	            baseAnalysis();
	        }
	        else { // logLabelMode === 'plain', we will self-adapter
	            !(
	                spanExpon <= MIN_BASE_10_SPLIT_NUMBER
	                && splitNumber > MIN_BASE_10_SPLIT_NUMBER
	            )
	                ? baseAnalysis() : detailAnalysis();
	        }
	
	        // In this situation, only draw base-10 ticks.
	        // Base-10 ticks: 10^h (i.e. 0.01, 0.1, 1, 10, 100, ...)
	        function baseAnalysis() {
	            if (spanExpon < splitNumber) {
	                splitNumber = spanExpon;
	            }
	            // Suppose:
	            //      spanExpon > splitNumber
	            //      stepExpon := floor(spanExpon / splitNumber)
	            //      splitNumberFloat := spanExpon / stepExpon
	            // There are tow expressions which are identically-true:
	            //      splitNumberFloat - splitNumber <= 1
	            //      stepExpon * ceil(splitNumberFloat) - spanExpon <= stepExpon
	            // So we can calculate as follows:
	            var stepExpon = mathFloor(fixAccurate(spanExpon / splitNumber));
	
	            // Put the plot in the middle of the min, max.
	            var splitNumberAdjust = mathCeil(fixAccurate(spanExpon / stepExpon));
	            var spanExponAdjust = stepExpon * splitNumberAdjust;
	            var halfDiff = (spanExponAdjust - spanDataLog) / 2;
	            var minExponAdjust = mathFloor(fixAccurate(minDataLog - halfDiff));
	
	            if (aroundZero(minExponAdjust - minDataLog)) {
	                minExponAdjust -= 1;
	            }
	
	            // Build logMapping offset
	            logMappingOffset = -minExponAdjust * lnBase;
	
	            // Build tickList
	            for (var n = minExponAdjust; n - stepExpon <= maxDataLog; n += stepExpon) {
	                tickList.push(mathPow(logLabelBase, n));
	            }
	        }
	
	        // In this situation, base-2|10 ticks are used to make detailed split.
	        // Base-2|10 ticks: 10^h * 2^k (i.e. 0.1, 0.2, 0.4, 1, 2, 4, 10, 20, 40),
	        // where k in [0, 1, 2].
	        // Because LN2 * 3 < LN10 and LN2 * 4 > LN10, k should be less than 3.
	        // And when k === 3, the tick is too close to that of k === 0, which looks weird.
	        // So we do not use 3.
	        function detailAnalysis() {
	            // Find max exponent and min exponent.
	            // Calculate base on 3-hexadecimal (0, 1, 2, 10, 11, 12, 20).
	            var minDecimal = toDecimalFrom4Hex(minExpon, 0);
	            var endDecimal = minDecimal + 2;
	            while (
	                minDecimal < endDecimal
	                && toH(minDecimal + 1) + toK(minDecimal + 1) * LN2D10 < minDataLog
	            ) {
	                minDecimal++;
	            }
	            var maxDecimal = toDecimalFrom4Hex(maxExpon, 0);
	            var endDecimal = maxDecimal - 2; // maxDecimal is greater than 4
	            while (
	                maxDecimal > endDecimal
	                && toH(maxDecimal - 1) + toK(maxDecimal - 1) * LN2D10 > maxDataLog
	            ) {
	                maxDecimal--;
	            }
	
	            // Build logMapping offset
	            logMappingOffset = -(toH(minDecimal) * LN10 + toK(minDecimal) * LN2);
	
	            // Build logMapping tickList
	            for (var i = minDecimal; i <= maxDecimal; i++) {
	                var h = toH(i);
	                var k = toK(i);
	                tickList.push(mathPow(10, h) * mathPow(2, k));
	            }
	        }
	
	        // Convert to decimal number from 4-hexadecimal number,
	        // where h, k means: if there is a 4-hexadecimal numer 23, then h is 2, k is 3.
	        // h can be any integer (notice: h can be greater than 10 or less than 0),
	        // and k belongs to [0, 1, 2, 3].
	        function toDecimalFrom4Hex(h, k) {
	            return h * 3 + k;
	        }
	
	        function toK(decimal) {
	            return decimal - toH(decimal) * 3; // Can not calculate by '%'
	        }
	
	        function toH(decimal) {
	            return mathFloor(fixAccurate(decimal / 3));
	        }
	    }
	
	    /**
	     * Make result
	     */
	    function makeResult() {
	        var resultTickList = [];
	        for (var i = 0, len = tickList.length; i < len; i++) {
	            resultTickList[i] = (logPositive ? 1 : -1) * tickList[i];
	        }
	        !logPositive && resultTickList.reverse();
	
	        var dataMappingMethods = makeDataMappingMethods();
	        var value2Coord = dataMappingMethods.value2Coord;
	
	        var newDataMin = value2Coord(resultTickList[0]);
	        var newDataMax = value2Coord(resultTickList[resultTickList.length - 1]);
	
	        if (newDataMin === newDataMax) {
	            newDataMin -= 1;
	            newDataMax += 1;
	        }
	
	        return {
	            dataMin: newDataMin,
	            dataMax: newDataMax,
	            tickList: resultTickList,
	            logPositive: logPositive,
	            labelFormatter: makeLabelFormatter(),
	            dataMappingMethods: dataMappingMethods
	        };
	    }
	
	    /**
	     * Make axis label formatter.
	     */
	    function makeLabelFormatter() {
	        if (logLabelMode === 'exponent') { // For label style like 3⁴.
	            // Static variables should be fixed in the scope of the methods.
	            var myLogLabelBase = logLabelBase;
	            var myLnBase = lnBase;
	
	            return function (value) {
	                if (!isFinite(parseFloat(value))) {
	                    return '';
	                }
	                var sign = '';
	                if (value < 0) {
	                    value = -value;
	                    sign = '-';
	                }
	                return sign + myLogLabelBase + makeSuperscriptExponent(mathLog(value) / myLnBase);
	            };
	        }
	        else {
	            return function (value) { // Normal style like 0.001, 10,000,0
	                if (!isFinite(parseFloat(value))) {
	                    return '';
	                }
	                return number.addCommas(formatNumber(value));
	            };
	        }
	    }
	
	    /**
	     * Make calculate methods.
	     */
	    function makeDataMappingMethods() {
	        // Static variables should be fixed in the scope of the methods.
	        var myLogPositive = logPositive;
	        var myLogMappingOffset = logMappingOffset;
	
	        return {
	            value2Coord: function (x) {
	                if (x == null || isNaN(x) || !isFinite(x)) {
	                    return x;
	                }
	                x = parseFloat(x); // to number
	                if (!isFinite(x)) {
	                    x = EPSILON;
	                }
	                else if (myLogPositive && x < EPSILON) {
	                    // FIXME
	                    // It is suppose to be ignore, but not be set to EPSILON. See comments above.
	                    x = EPSILON;
	                }
	                else if (!myLogPositive && x > -EPSILON) {
	                    x = -EPSILON;
	                }
	                x = mathAbs(x);
	                return (myLogPositive ? 1 : -1) * (mathLog(x) + myLogMappingOffset);
	            },
	            coord2Value: function (x) {
	                if (x == null || isNaN(x) || !isFinite(x)) {
	                    return x;
	                }
	                x = parseFloat(x); // to number
	                if (!isFinite(x)) {
	                    x = EPSILON;
	                }
	                return myLogPositive
	                    ? mathPow(LOG_BASE, x - myLogMappingOffset)
	                    : -mathPow(LOG_BASE, -x + myLogMappingOffset);
	            }
	        };
	    }
	
	    /**
	     * For example, Math.log(1000) / Math.LN10 get the result of 2.9999999999999996, rather than 3.
	     * This method trys to fix it.
	     * (accMath.div can not fix this problem yet.)
	     */
	    function fixAccurate(result) {
	        return +Number(+result).toFixed(14);
	    }
	
	    /**
	     * Avoid show float number like '1e-9', '-1e-10', ...
	     * @return {string}
	     */
	    function formatNumber(num) {
	        return Number(num).toFixed(15).replace(/\.?0*$/, '');
	    }
	
	    /**
	     * Make superscript exponent
	     */
	    function makeSuperscriptExponent(exponent) {
	        exponent = formatNumber(Math.round(exponent)); // Do not support float superscript.
	                                                       // (because I can not find superscript style of '.')
	        var result = [];
	        for (var i = 0, len = exponent.length; i < len; i++) {
	            var cha = exponent.charAt(i);
	            result.push(SUPERSCRIPTS[cha] || '');
	        }
	        return result.join('');
	    }
	
	    /**
	     * Decide whether near zero
	     */
	    function aroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	
	    return smartLogSteps;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件： 网格
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	    
	    // 图形依赖
	    var RectangleShape = __webpack_require__(188);
	    
	    var ecConfig = __webpack_require__(167);
	    // 网格
	    ecConfig.grid = {
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        x: 80,
	        y: 60,
	        x2: 80,
	        y2: 60,
	        // width: {totalWidth} - x - x2,
	        // height: {totalHeight} - y - y2,
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderWidth: 1,
	        borderColor: '#ccc'
	    };
	
	    var zrUtil = __webpack_require__(168);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表选项
	     *      @param {number=} option.grid.x 直角坐标系内绘图网格起始横坐标，数值单位px
	     *      @param {number=} option.grid.y 直角坐标系内绘图网格起始纵坐标，数值单位px
	     *      @param {number=} option.grid.width 直角坐标系内绘图网格宽度，数值单位px
	     *      @param {number=} option.grid.height 直角坐标系内绘图网格高度，数值单位px
	     */
	    function Grid(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        this.refresh(option);
	    }
	    
	    Grid.prototype = {
	        type: ecConfig.COMPONENT_TYPE_GRID,
	
	        getX: function () {
	            return this._x;
	        },
	
	        getY: function () {
	            return this._y;
	        },
	
	        getWidth: function () {
	            return this._width;
	        },
	
	        getHeight: function () {
	            return this._height;
	        },
	
	        getXend: function () {
	            return this._x + this._width;
	        },
	
	        getYend: function () {
	            return this._y + this._height;
	        },
	
	        getArea: function () {
	            return {
	                x: this._x,
	                y: this._y,
	                width: this._width,
	                height: this._height
	            };
	        },
	        
	        getBbox: function() {
	            return [
	                [ this._x, this._y ],
	                [ this.getXend(), this.getYend() ]
	            ];
	        },
	        
	        /**
	         * 实在找不到合适的地方做了，各种粗暴的写法~ -_-
	         */
	        refixAxisShape: function(component) {
	            var zeroX;
	            var zeroY;
	            var axisList = component.xAxis._axisList.concat(
	                component.yAxis ? component.yAxis._axisList : []
	            );
	            var len = axisList.length;
	            var axis;
	            while (len--) {
	                axis = axisList[len];
	                if (axis.type == ecConfig.COMPONENT_TYPE_AXIS_VALUE 
	                    && axis._min < 0  
	                    && axis._max >= 0
	                ) {
	                    axis.isHorizontal()
	                    ? (zeroX = axis.getCoord(0))
	                    : (zeroY = axis.getCoord(0));
	                }
	            }
	            if (typeof zeroX != 'undefined' || typeof zeroY != 'undefined') {
	                len = axisList.length;
	                while (len--) {
	                    axisList[len].refixAxisShape(zeroX, zeroY);
	                }
	            }
	        },
	        
	        refresh: function (newOption) {
	            if (newOption
	                || this._zrWidth != this.zr.getWidth() 
	                || this._zrHeight != this.zr.getHeight()
	            ) {
	                this.clear();
	                this.option = newOption || this.option;
	                this.option.grid = this.reformOption(this.option.grid);
	    
	                var gridOption = this.option.grid;
	                this._zrWidth = this.zr.getWidth();
	                this._zrHeight = this.zr.getHeight();
	                this._x = this.parsePercent(gridOption.x, this._zrWidth);
	                this._y = this.parsePercent(gridOption.y, this._zrHeight);
	                var x2 = this.parsePercent(gridOption.x2, this._zrWidth);
	                var y2 = this.parsePercent(gridOption.y2, this._zrHeight);
	                
	    
	                if (typeof gridOption.width == 'undefined') {
	                    this._width = this._zrWidth - this._x - x2;
	                }
	                else {
	                    this._width = this.parsePercent(gridOption.width, this._zrWidth);
	                }
	                this._width = this._width <= 0 ? 10 : this._width;
	    
	                if (typeof gridOption.height == 'undefined') {
	                    this._height = this._zrHeight - this._y - y2;
	                }
	                else {
	                    this._height = this.parsePercent(gridOption.height, this._zrHeight);
	                }
	                this._height = this._height <= 0 ? 10 : this._height;
	                
	                this._x = this.subPixelOptimize(this._x, gridOption.borderWidth);
	                this._y = this.subPixelOptimize(this._y, gridOption.borderWidth);
	    
	                this.shapeList.push(new RectangleShape({
	                    zlevel: this.getZlevelBase(),
	                    z: this.getZBase(),
	                    hoverable: false,
	                    style: {
	                        x: this._x,
	                        y: this._y,
	                        width: this._width,
	                        height: this._height,
	                        brushType: gridOption.borderWidth > 0 ? 'both' : 'fill',
	                        color: gridOption.backgroundColor,
	                        strokeColor: gridOption.borderColor,
	                        lineWidth: gridOption.borderWidth
	                        // type: this.option.splitArea.areaStyle.type,
	                    }
	                }));
	                this.zr.addShape(this.shapeList[0]);
	            }
	        }
	    };
	    
	    zrUtil.inherits(Grid, Base);
	    
	    __webpack_require__(229).define('grid', Grid);
	    
	    return Grid;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * echarts组件：数据区域缩放
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	    var Base = __webpack_require__(220);
	
	    // 图形依赖
	    var RectangleShape = __webpack_require__(188);
	    var PolygonShape = __webpack_require__(209);
	    var IconShape = __webpack_require__(198);
	
	    var ecConfig = __webpack_require__(167);
	    // 区域缩放控制器
	    ecConfig.dataZoom = {
	        zlevel: 0,                  // 一级层叠
	        z: 4,                       // 二级层叠
	        show: false,
	        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：
	                                   // 'horizontal' ¦ 'vertical'
	        // x: {number},            // 水平安放位置，默认为根据grid参数适配，可选为：
	                                   // {number}（x坐标，单位px）
	        // y: {number},            // 垂直安放位置，默认为根据grid参数适配，可选为：
	                                   // {number}（y坐标，单位px）
	        // width: {number},        // 指定宽度，横向布局时默认为根据grid参数适配
	        // height: {number},       // 指定高度，纵向布局时默认为根据grid参数适配
	        backgroundColor: 'rgba(0,0,0,0)',       // 背景颜色
	        dataBackgroundColor: '#eee',            // 数据背景颜色
	        fillerColor: 'rgba(144,197,237,0.2)',   // 填充颜色
	        handleColor: 'rgba(70,130,180,0.8)',    // 手柄颜色
	        handleSize: 8,
	        showDetail: true,
	        // xAxisIndex: [],         // 默认控制所有横向类目
	        // yAxisIndex: [],         // 默认控制所有横向类目
	        // start: 0,               // 默认为0
	        // end: 100,               // 默认为全部 100%
	        realtime: true
	        // zoomLock: false         // 是否锁定选择区域大小
	    };
	
	    var ecDate = __webpack_require__(256);
	    var zrUtil = __webpack_require__(168);
	
	    /**
	     * 构造函数
	     * @param {Object} messageCenter echart消息中心
	     * @param {ZRender} zr zrender实例
	     * @param {Object} option 图表参数
	     * @param {Object} component 组件
	     */
	    function DataZoom(ecTheme, messageCenter, zr, option, myChart) {
	        Base.call(this, ecTheme, messageCenter, zr, option, myChart);
	
	        var self = this;
	        self._ondrift = function (dx, dy) {
	            return self.__ondrift(this, dx, dy);
	        };
	        self._ondragend = function () {
	            return self.__ondragend();
	        };
	
	        this._fillerSize = 30;       // 控件大小，水平布局为高，纵向布局为宽
	        // this._fillerShae;            // 填充
	        // this._startShape;            // 起始手柄
	        // this._endShape;              // 结束手柄
	        // this._startFrameShape;       // 起始特效边框
	        // this._endFrameShape;         // 结束特效边框
	        // this._syncTicket;
	        this._isSilence = false;
	        this._zoom = {};
	        // this._originalData;
	
	        this.option.dataZoom = this.reformOption(this.option.dataZoom);
	        this.zoomOption = this.option.dataZoom;
	        this._handleSize = this.zoomOption.handleSize;
	        if (!this.myChart.canvasSupported) {
	            // 不支持Canvas的强制关闭实时动画
	            this.zoomOption.realtime = false;
	        }
	
	        // 位置参数，通过计算所得x, y, width, height
	        this._location = this._getLocation();
	        // 缩放参数
	        this._zoom =  this._getZoom();
	        this._backupData();
	
	        if (this.option.dataZoom.show) {
	            this._buildShape();
	        }
	        this._syncData();
	    }
	
	    DataZoom.prototype = {
	        type : ecConfig.COMPONENT_TYPE_DATAZOOM,
	        _buildShape : function () {
	            this._buildBackground();
	            this._buildFiller();
	            this._buildHandle();
	            this._buildFrame();
	
	            for (var i = 0, l = this.shapeList.length; i < l; i++) {
	                this.zr.addShape(this.shapeList[i]);
	            }
	            this._syncFrameShape();
	        },
	
	        /**
	         * 根据选项计算实体的位置坐标
	         */
	        _getLocation : function () {
	            var x;
	            var y;
	            var width;
	            var height;
	            var grid = this.component.grid;
	
	            // 不指定则根据grid适配
	            if (this.zoomOption.orient == 'horizontal') {
	                // 水平布局
	                width = this.zoomOption.width || grid.getWidth();
	                height = this.zoomOption.height || this._fillerSize;
	                x = this.zoomOption.x != null ? this.zoomOption.x : grid.getX();
	                y = this.zoomOption.y != null ? this.zoomOption.y : (this.zr.getHeight() - height - 2);
	            }
	            else {
	                // 垂直布局
	                width = this.zoomOption.width || this._fillerSize;
	                height = this.zoomOption.height || grid.getHeight();
	                x = this.zoomOption.x != null ? this.zoomOption.x : 2;
	                y = this.zoomOption.y != null ? this.zoomOption.y : grid.getY();
	            }
	
	            return {
	                x : x,
	                y : y,
	                width : width,
	                height : height
	            };
	        },
	
	        /**
	         * 计算缩放参数
	         * 修正单坐标轴只传对象为数组。
	         */
	        _getZoom : function () {
	            var series = this.option.series;
	            var xAxis = this.option.xAxis;
	            if (xAxis && !(xAxis instanceof Array)) {
	                xAxis = [xAxis];
	                this.option.xAxis = xAxis;
	            }
	            var yAxis = this.option.yAxis;
	            if (yAxis && !(yAxis instanceof Array)) {
	                yAxis = [yAxis];
	                this.option.yAxis = yAxis;
	            }
	
	            var zoomSeriesIndex = [];
	            var xAxisIndex;
	            var yAxisIndex;
	
	            var zOptIdx = this.zoomOption.xAxisIndex;
	            if (xAxis && zOptIdx == null) {
	                xAxisIndex = [];
	                for (var i = 0, l = xAxis.length; i < l; i++) {
	                    // 横纵默认为类目轴
	                    if (xAxis[i].type == 'category' || xAxis[i].type == null) {
	                        xAxisIndex.push(i);
	                    }
	                }
	            }
	            else {
	                if (zOptIdx instanceof Array) {
	                    xAxisIndex = zOptIdx;
	                }
	                else if (zOptIdx != null) {
	                    xAxisIndex = [zOptIdx];
	                }
	                else {
	                    xAxisIndex = [];
	                }
	            }
	
	            zOptIdx = this.zoomOption.yAxisIndex;
	            if (yAxis && zOptIdx == null) {
	                yAxisIndex = [];
	                for (var i = 0, l = yAxis.length; i < l; i++) {
	                    if (yAxis[i].type == 'category') {
	                        yAxisIndex.push(i);
	                    }
	                }
	            }
	            else {
	                if (zOptIdx instanceof Array) {
	                    yAxisIndex = zOptIdx;
	                }
	                else if (zOptIdx != null) {
	                    yAxisIndex = [zOptIdx];
	                }
	                else {
	                    yAxisIndex = [];
	                }
	            }
	
	            // 找到缩放控制的所有series
	            var serie;
	            for (var i = 0, l = series.length; i < l; i++) {
	                serie = series[i];
	                if (serie.type != ecConfig.CHART_TYPE_LINE
	                    && serie.type != ecConfig.CHART_TYPE_BAR
	                    && serie.type != ecConfig.CHART_TYPE_SCATTER
	                    && serie.type != ecConfig.CHART_TYPE_K
	                ) {
	                    continue;
	                }
	                for (var j = 0, k = xAxisIndex.length; j < k; j++) {
	                    if (xAxisIndex[j] == (serie.xAxisIndex || 0)) {
	                        zoomSeriesIndex.push(i);
	                        break;
	                    }
	                }
	                for (var j = 0, k = yAxisIndex.length; j < k; j++) {
	                    if (yAxisIndex[j] == (serie.yAxisIndex || 0)) {
	                        zoomSeriesIndex.push(i);
	                        break;
	                    }
	                }
	                // 不指定接管坐标轴，则散点图、双数值轴折线图柱形图都被纳入接管范围
	                if (this.zoomOption.xAxisIndex == null
	                    && this.zoomOption.yAxisIndex == null
	                    && serie.data
	                    && this.getDataFromOption(serie.data[0]) instanceof Array
	                    && (serie.type == ecConfig.CHART_TYPE_SCATTER
	                        || serie.type == ecConfig.CHART_TYPE_LINE
	                        || serie.type == ecConfig.CHART_TYPE_BAR)
	                ) {
	                    zoomSeriesIndex.push(i);
	                }
	            }
	
	            var start = this._zoom.start != null
	                        ? this._zoom.start
	                        : (this.zoomOption.start != null ? this.zoomOption.start : 0);
	            var end = this._zoom.end != null
	                      ? this._zoom.end
	                      : (this.zoomOption.end != null ? this.zoomOption.end : 100);
	
	            if (start > end) {
	                // 大小颠倒自动翻转
	                start = start + end;
	                end = start - end;
	                start = start - end;
	            }
	            var size = Math.round(
	                (end - start) / 100
	                * (
	                    this.zoomOption.orient == 'horizontal'
	                    ? this._location.width : this._location.height
	                )
	            );
	            return {
	                start : start,
	                end : end,
	                start2 : 0,
	                end2 : 100,
	                size : size,
	                xAxisIndex : xAxisIndex,
	                yAxisIndex : yAxisIndex,
	                seriesIndex : zoomSeriesIndex,
	                scatterMap : this._zoom.scatterMap || {}
	            };
	        },
	
	        _backupData : function () {
	            this._originalData = {
	                xAxis : {},
	                yAxis : {},
	                series : {}
	            };
	            var xAxis = this.option.xAxis;
	            var xAxisIndex = this._zoom.xAxisIndex;
	            for (var i = 0, l = xAxisIndex.length; i < l; i++) {
	                this._originalData.xAxis[xAxisIndex[i]] = xAxis[xAxisIndex[i]].data;
	            }
	
	            var yAxis = this.option.yAxis;
	            var yAxisIndex = this._zoom.yAxisIndex;
	            for (var i = 0, l = yAxisIndex.length; i < l; i++) {
	                this._originalData.yAxis[yAxisIndex[i]] = yAxis[yAxisIndex[i]].data;
	            }
	
	            var series = this.option.series;
	            var seriesIndex = this._zoom.seriesIndex;
	            var serie;
	            for (var i = 0, l = seriesIndex.length; i < l; i++) {
	                serie = series[seriesIndex[i]];
	                this._originalData.series[seriesIndex[i]] = serie.data;
	                if (serie.data
	                    && this.getDataFromOption(serie.data[0]) instanceof Array
	                    && (serie.type == ecConfig.CHART_TYPE_SCATTER
	                        || serie.type == ecConfig.CHART_TYPE_LINE
	                        || serie.type == ecConfig.CHART_TYPE_BAR)
	                ) {
	                    this._backupScale();
	                    this._calculScatterMap(seriesIndex[i]);
	                }
	            }
	        },
	
	        // 不止是scatter，双数值轴也使用此方法
	        _calculScatterMap : function (seriesIndex) {
	            this._zoom.scatterMap = this._zoom.scatterMap || {};
	            this._zoom.scatterMap[seriesIndex] = this._zoom.scatterMap[seriesIndex] || {};
	            var componentLibrary = __webpack_require__(229);
	            // x轴极值
	            var Axis = componentLibrary.get('axis');
	            var axisOption = zrUtil.clone(this.option.xAxis);
	            if (axisOption[0].type == 'category') {
	                axisOption[0].type = 'value';
	            }
	            // axisOption[0].scale = true;
	            // axisOption[0].boundary = [0, 0];
	            if (axisOption[1] && axisOption[1].type == 'category') {
	                axisOption[1].type = 'value';
	            }
	
	            var vAxis = new Axis(
	                this.ecTheme,
	                null,   // messageCenter
	                false,  // this.zr
	                {
	                    xAxis: axisOption,
	                    series : this.option.series
	                },
	                this,
	                'xAxis'
	            );
	            var axisIndex = this.option.series[seriesIndex].xAxisIndex || 0;
	            this._zoom.scatterMap[seriesIndex].x = vAxis.getAxis(axisIndex).getExtremum();
	            vAxis.dispose();
	
	            // y轴极值
	            axisOption = zrUtil.clone(this.option.yAxis);
	            if (axisOption[0].type == 'category') {
	                axisOption[0].type = 'value';
	            }
	            // axisOption[0].scale = true;
	            // axisOption[1].boundary = [0, 0];
	            if (axisOption[1] && axisOption[1].type == 'category') {
	                axisOption[1].type = 'value';
	            }
	            vAxis = new Axis(
	                this.ecTheme,
	                null,   // messageCenter
	                false,  // this.zr
	                {
	                    yAxis: axisOption,
	                    series : this.option.series
	                },
	                this,
	                'yAxis'
	            );
	            axisIndex = this.option.series[seriesIndex].yAxisIndex || 0;
	            this._zoom.scatterMap[seriesIndex].y = vAxis.getAxis(axisIndex).getExtremum();
	            vAxis.dispose();
	            // console.log(this._zoom.scatterMap);
	        },
	
	        _buildBackground : function () {
	            var width = this._location.width;
	            var height = this._location.height;
	
	            // 背景
	            this.shapeList.push(new RectangleShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style : {
	                    x : this._location.x,
	                    y : this._location.y,
	                    width : width,
	                    height : height,
	                    color : this.zoomOption.backgroundColor
	                }
	            }));
	
	            // 数据阴影
	            var maxLength = 0;
	            var xAxis = this._originalData.xAxis;
	            var xAxisIndex = this._zoom.xAxisIndex;
	            for (var i = 0, l = xAxisIndex.length; i < l; i++) {
	                maxLength = Math.max(
	                    maxLength, xAxis[xAxisIndex[i]].length
	                );
	            }
	            var yAxis = this._originalData.yAxis;
	            var yAxisIndex = this._zoom.yAxisIndex;
	            for (var i = 0, l = yAxisIndex.length; i < l; i++) {
	                maxLength = Math.max(
	                    maxLength, yAxis[yAxisIndex[i]].length
	                );
	            }
	
	            var seriesIndex = this._zoom.seriesIndex[0];
	            var data = this._originalData.series[seriesIndex];
	            var maxValue = Number.MIN_VALUE;
	            var minValue = Number.MAX_VALUE;
	            var value;
	            for (var i = 0, l = data.length; i < l; i++) {
	                value = this.getDataFromOption(data[i], 0);
	                if (this.option.series[seriesIndex].type == ecConfig.CHART_TYPE_K) {
	                    value = value[1];   // 收盘价
	                }
	                if (isNaN(value)) {
	                    value = 0;
	                }
	                maxValue = Math.max(maxValue, value);
	                minValue = Math.min(minValue, value);
	            }
	            var valueRange = maxValue - minValue;
	
	            var pointList = [];
	            var x = width / (maxLength - (maxLength > 1 ? 1 : 0));
	            var y = height / (maxLength - (maxLength > 1 ? 1 : 0));
	            var step = 1;
	            if (this.zoomOption.orient == 'horizontal' && x < 1) {
	                step = Math.floor(maxLength * 3 / width);
	            }
	            else if (this.zoomOption.orient == 'vertical' && y < 1){
	                step = Math.floor(maxLength * 3 / height);
	            }
	
	            for (var i = 0, l = maxLength; i < l; i += step) {
	                value = this.getDataFromOption(data[i], 0);
	                if (this.option.series[seriesIndex].type == ecConfig.CHART_TYPE_K) {
	                    value = value[1];   // 收盘价
	                }
	                if (isNaN(value)) {
	                    value = 0;
	                }
	                if (this.zoomOption.orient == 'horizontal') {
	                    pointList.push([
	                        this._location.x + x * i,
	                        this._location.y + height - 1 - Math.round(
	                            (value - minValue) / valueRange * (height - 10)
	                        )
	                    ]);
	                }
	                else {
	                    pointList.push([
	                        this._location.x + 1 + Math.round(
	                            (value - minValue) / valueRange * (width - 10)
	                        ),
	                        this._location.y + y * (l - i - 1)
	                    ]);
	                }
	            }
	            if (this.zoomOption.orient == 'horizontal') {
	                pointList.push([
	                    this._location.x + width,
	                    this._location.y + height
	                ]);
	                pointList.push([
	                    this._location.x, this._location.y + height
	                ]);
	            }
	            else {
	                pointList.push([
	                    this._location.x, this._location.y
	                ]);
	                pointList.push([
	                    this._location.x, this._location.y + height
	                ]);
	            }
	
	            this.shapeList.push(new PolygonShape({
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                style : {
	                    pointList : pointList,
	                    color : this.zoomOption.dataBackgroundColor
	                },
	                hoverable : false
	            }));
	        },
	
	        /**
	         * 构建填充物
	         */
	        _buildFiller : function () {
	            this._fillerShae = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                draggable : true,
	                ondrift : this._ondrift,
	                ondragend : this._ondragend,
	                _type : 'filler'
	            };
	
	            if (this.zoomOption.orient == 'horizontal') {
	                // 横向
	                this._fillerShae.style = {
	                    x : this._location.x
	                        + Math.round(this._zoom.start / 100 * this._location.width)
	                        + this._handleSize,
	                    y : this._location.y,
	                    width : this._zoom.size - this._handleSize * 2,
	                    height : this._location.height,
	                    color : this.zoomOption.fillerColor,
	                    // strokeColor : '#fff', // this.zoomOption.handleColor,
	                    // lineWidth: 2,
	                    text : ':::',
	                    textPosition : 'inside'
	                };
	            }
	            else {
	                // 纵向
	                this._fillerShae.style ={
	                    x : this._location.x,
	                    y : this._location.y
	                        + Math.round(this._zoom.start / 100 * this._location.height)
	                        + this._handleSize,
	                    width :  this._location.width,
	                    height : this._zoom.size - this._handleSize * 2,
	                    color : this.zoomOption.fillerColor,
	                    // strokeColor : '#fff', // this.zoomOption.handleColor,
	                    // lineWidth: 2,
	                    text : '::',
	                    textPosition : 'inside'
	                };
	            }
	
	            this._fillerShae.highlightStyle = {
	                brushType: 'fill',
	                color : 'rgba(0,0,0,0)'
	                /*
	                color : require('zrenderjs/tool/color').alpha(
	                            this._fillerShae.style.color, 0
	                        )
	                */
	            };
	            this._fillerShae = new RectangleShape(this._fillerShae);
	            this.shapeList.push(this._fillerShae);
	        },
	
	        /**
	         * 构建拖拽手柄
	         */
	        _buildHandle : function () {
	            var detail = this.zoomOption.showDetail ? this._getDetail() : {start: '',end: ''};
	            this._startShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                draggable : true,
	                style : {
	                    iconType: 'rectangle',
	                    x: this._location.x,
	                    y: this._location.y,
	                    width: this._handleSize,
	                    height: this._handleSize,
	                    color: this.zoomOption.handleColor,
	                    text: '=',
	                    textPosition: 'inside'
	                },
	                highlightStyle: {
	                    text: detail.start,
	                    brushType: 'fill',
	                    textPosition: 'left'
	                },
	                ondrift: this._ondrift,
	                ondragend: this._ondragend
	            };
	
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startShape.style.height = this._location.height;
	                this._endShape = zrUtil.clone(this._startShape);
	
	                this._startShape.style.x = this._fillerShae.style.x - this._handleSize,
	                this._endShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width;
	                this._endShape.highlightStyle.text = detail.end;
	                this._endShape.highlightStyle.textPosition = 'right';
	            }
	            else {
	                this._startShape.style.width = this._location.width;
	                this._endShape = zrUtil.clone(this._startShape);
	
	                this._startShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height;
	                this._startShape.highlightStyle.textPosition = 'bottom';
	
	                this._endShape.style.y = this._fillerShae.style.y - this._handleSize;
	                this._endShape.highlightStyle.text = detail.end;
	                this._endShape.highlightStyle.textPosition = 'top';
	            }
	            this._startShape = new IconShape(this._startShape);
	            this._endShape = new IconShape(this._endShape);
	            this.shapeList.push(this._startShape);
	            this.shapeList.push(this._endShape);
	        },
	
	        /**
	         * 构建特效边框
	         */
	        _buildFrame : function () {
	            // 特效框线，亚像素优化
	            var x = this.subPixelOptimize(this._location.x, 1);
	            var y = this.subPixelOptimize(this._location.y, 1);
	            this._startFrameShape = {
	                zlevel: this.getZlevelBase(),
	                z: this.getZBase(),
	                hoverable :false,
	                style : {
	                    x : x,
	                    y : y,
	                    width : this._location.width - (x > this._location.x ? 1 : 0),
	                    height : this._location.height - (y > this._location.y ? 1 : 0),
	                    lineWidth: 1,
	                    brushType: 'stroke',
	                    strokeColor : this.zoomOption.handleColor
	                }
	            };
	            this._endFrameShape = zrUtil.clone(this._startFrameShape);
	
	            this._startFrameShape = new RectangleShape(this._startFrameShape);
	            this._endFrameShape = new RectangleShape(this._endFrameShape);
	            this.shapeList.push(this._startFrameShape);
	            this.shapeList.push(this._endFrameShape);
	            return;
	        },
	
	        _syncHandleShape : function () {
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startShape.style.x = this._fillerShae.style.x - this._handleSize;
	                this._endShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width;
	
	                this._zoom.start = (
	                    this._startShape.style.x - this._location.x
	                ) / this._location.width * 100;
	                this._zoom.end = (
	                    this._endShape.style.x + this._handleSize - this._location.x
	                ) / this._location.width * 100;
	            }
	            else {
	                this._startShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height;
	                this._endShape.style.y = this._fillerShae.style.y - this._handleSize;
	
	                this._zoom.start = (
	                    this._location.y + this._location.height
	                    - this._startShape.style.y
	                ) / this._location.height * 100;
	                this._zoom.end = (
	                    this._location.y + this._location.height
	                    - this._endShape.style.y - this._handleSize
	                ) / this._location.height * 100;
	            }
	            this.zr.modShape(this._startShape.id);
	            this.zr.modShape(this._endShape.id);
	
	            // 同步边框
	            this._syncFrameShape();
	
	            this.zr.refreshNextFrame();
	        },
	
	        _syncFillerShape : function () {
	            var a;
	            var b;
	            if (this.zoomOption.orient == 'horizontal') {
	                a = this._startShape.style.x;
	                b = this._endShape.style.x;
	                this._fillerShae.style.x = Math.min(a, b) + this._handleSize;
	                this._fillerShae.style.width = Math.abs(a - b) - this._handleSize;
	                this._zoom.start = (
	                    Math.min(a, b) - this._location.x
	                ) / this._location.width * 100;
	                this._zoom.end = (
	                    Math.max(a, b) + this._handleSize - this._location.x
	                ) / this._location.width * 100;
	            }
	            else {
	                a = this._startShape.style.y;
	                b = this._endShape.style.y;
	                this._fillerShae.style.y = Math.min(a, b) + this._handleSize;
	                this._fillerShae.style.height = Math.abs(a - b) - this._handleSize;
	                this._zoom.start = (
	                    this._location.y + this._location.height - Math.max(a, b)
	                ) / this._location.height * 100;
	                this._zoom.end = (
	                    this._location.y + this._location.height - Math.min(a, b) - this._handleSize
	                ) / this._location.height * 100;
	            }
	
	            this.zr.modShape(this._fillerShae.id);
	
	            // 同步边框
	            this._syncFrameShape();
	
	            this.zr.refreshNextFrame();
	        },
	
	        _syncFrameShape : function () {
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startFrameShape.style.width =
	                    this._fillerShae.style.x - this._location.x;
	                this._endFrameShape.style.x =
	                    this._fillerShae.style.x + this._fillerShae.style.width;
	                this._endFrameShape.style.width =
	                    this._location.x + this._location.width - this._endFrameShape.style.x;
	            }
	            else {
	                this._startFrameShape.style.y =
	                    this._fillerShae.style.y + this._fillerShae.style.height;
	                this._startFrameShape.style.height =
	                    this._location.y + this._location.height - this._startFrameShape.style.y;
	                this._endFrameShape.style.height =
	                    this._fillerShae.style.y - this._location.y;
	            }
	
	            this.zr.modShape(this._startFrameShape.id);
	            this.zr.modShape(this._endFrameShape.id);
	        },
	
	        _syncShape : function () {
	            if (!this.zoomOption.show) {
	                // 没有伸缩控件
	                return;
	            }
	            if (this.zoomOption.orient == 'horizontal') {
	                this._startShape.style.x = this._location.x
	                                           + this._zoom.start / 100 * this._location.width;
	                this._endShape.style.x   = this._location.x
	                                           + this._zoom.end / 100 * this._location.width
	                                           - this._handleSize;
	
	                this._fillerShae.style.x     = this._startShape.style.x + this._handleSize;
	                this._fillerShae.style.width = this._endShape.style.x
	                                               - this._startShape.style.x
	                                               - this._handleSize;
	            }
	            else {
	                this._startShape.style.y = this._location.y + this._location.height
	                                           - this._zoom.start / 100 * this._location.height;
	                this._endShape.style.y   = this._location.y + this._location.height
	                                           - this._zoom.end / 100 * this._location.height
	                                           - this._handleSize;
	
	                this._fillerShae.style.y      = this._endShape.style.y + this._handleSize;
	                this._fillerShae.style.height = this._startShape.style.y
	                                                - this._endShape.style.y
	                                                - this._handleSize;
	            }
	
	            this.zr.modShape(this._startShape.id);
	            this.zr.modShape(this._endShape.id);
	            this.zr.modShape(this._fillerShae.id);
	            // 同步边框
	            this._syncFrameShape();
	            this.zr.refresh();
	        },
	
	         _syncData : function (dispatchNow) {
	            var target;
	            var start;
	            var end;
	            var length;
	            var data;
	
	            for (var key in this._originalData) {
	                target = this._originalData[key];
	                for (var idx in target) {
	                    data = target[idx];
	                    if (data == null) {
	                        continue;
	                    }
	                    length = data.length;
	                    start = Math.floor(this._zoom.start / 100 * length);
	                    end = Math.ceil(this._zoom.end / 100 * length);
	
	                    if (!(this.getDataFromOption(data[0]) instanceof Array)
	                        || this.option[key][idx].type == ecConfig.CHART_TYPE_K
	                    ) {
	                        this.option[key][idx].data = data.slice(start, end);
	                    }
	                    else {
	                        // 散点图，双数值轴折线图柱形图特殊处理
	                        // axis.data[0]不会是Array，所以axis的情况不会走进这个分支
	                        this._setScale();
	                        this.option[key][idx].data = this._synScatterData(idx, data);
	                    }
	                }
	            }
	
	            if (!this._isSilence && (this.zoomOption.realtime || dispatchNow)) {
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.DATA_ZOOM,
	                    null,
	                    {zoom: this._zoom},
	                    this.myChart
	                );
	            }
	
	            //this.zoomOption.start = this._zoom.start;
	            //this.zoomOption.end = this._zoom.end;
	        },
	
	        _synScatterData : function (seriesIndex, data) {
	            if (this._zoom.start === 0
	                && this._zoom.end == 100
	                && this._zoom.start2 === 0
	                && this._zoom.end2 == 100
	            ) {
	                return data;
	            }
	            var newData = [];
	            var scale = this._zoom.scatterMap[seriesIndex];
	            var total;
	            var xStart;
	            var xEnd;
	            var yStart;
	            var yEnd;
	
	            if (this.zoomOption.orient == 'horizontal') {
	                total = scale.x.max - scale.x.min;
	                xStart = this._zoom.start / 100 * total + scale.x.min;
	                xEnd = this._zoom.end / 100 * total + scale.x.min;
	
	                total = scale.y.max - scale.y.min;
	                yStart = this._zoom.start2 / 100 * total + scale.y.min;
	                yEnd = this._zoom.end2 / 100 * total + scale.y.min;
	            }
	            else {
	                total = scale.x.max - scale.x.min;
	                xStart = this._zoom.start2 / 100 * total + scale.x.min;
	                xEnd = this._zoom.end2 / 100 * total + scale.x.min;
	
	                total = scale.y.max - scale.y.min;
	                yStart = this._zoom.start / 100 * total + scale.y.min;
	                yEnd = this._zoom.end / 100 * total + scale.y.min;
	            }
	
	            var dataMappingMethods;
	            if (dataMappingMethods = scale.x.dataMappingMethods) {
	                xStart = dataMappingMethods.coord2Value(xStart);
	                xEnd = dataMappingMethods.coord2Value(xEnd);
	            }
	            if (dataMappingMethods = scale.y.dataMappingMethods) {
	                yStart = dataMappingMethods.coord2Value(yStart);
	                yEnd = dataMappingMethods.coord2Value(yEnd);
	            }
	
	            // console.log(xStart,xEnd,yStart,yEnd);
	
	            var value;
	            for (var i = 0, l = data.length; i < l; i++) {
	                value = data[i].value || data[i];
	                if (value[0] >= xStart
	                    && value[0] <= xEnd
	                    && value[1] >= yStart
	                    && value[1] <= yEnd
	                ) {
	                    newData.push(data[i]);
	                }
	            }
	
	            return newData;
	        },
	
	        /**
	         * 发生缩放后修改axis的scale
	         */
	        _setScale: function() {
	            var needScale = this._zoom.start !== 0
	                            || this._zoom.end !== 100
	                            || this._zoom.start2 !== 0
	                            || this._zoom.end2 !== 100;
	            var axis = {
	                xAxis : this.option.xAxis,
	                yAxis : this.option.yAxis
	            };
	            for (var key in axis) {
	                for (var i = 0, l = axis[key].length; i < l; i++) {
	                    axis[key][i].scale = needScale || axis[key][i]._scale;
	                }
	            }
	        },
	
	        /**
	         * 备份可能存在的scale设置
	         */
	        _backupScale: function() {
	            var axis = {
	                xAxis : this.option.xAxis,
	                yAxis : this.option.yAxis
	            };
	            for (var key in axis) {
	                for (var i = 0, l = axis[key].length; i < l; i++) {
	                    axis[key][i]._scale = axis[key][i].scale;
	                }
	            }
	        },
	
	        /**
	         * 获取当前定位
	         */
	        _getDetail : function () {
	            var key = ['xAxis', 'yAxis'];
	            for (var i = 0, l = key.length; i < l; i++) {
	                var target = this._originalData[key[i]];
	                for (var idx in target) {
	                    var data = target[idx];
	                    if (data == null) {
	                        continue;
	                    }
	                    var length = data.length;
	                    var start = Math.floor(this._zoom.start / 100 * length);
	                    var end = Math.ceil(this._zoom.end / 100 * length);
	                    end -= end > 0 ? 1 : 0;
	                    return {
	                        start : this.getDataFromOption(data[start]),
	                        end : this.getDataFromOption(data[end])
	                    };
	                }
	            }
	
	            key = this.zoomOption.orient == 'horizontal' ? 'xAxis' : 'yAxis';
	            var seriesIndex = this._zoom.seriesIndex[0];
	            var axisIndex = this.option.series[seriesIndex][key + 'Index'] || 0;
	            var axisType = this.option[key][axisIndex].type;
	            var min = this._zoom.scatterMap[seriesIndex][key.charAt(0)].min;
	            var max = this._zoom.scatterMap[seriesIndex][key.charAt(0)].max;
	            var gap = max - min;
	
	            if (axisType == 'value') {
	                return {
	                    start : min + gap * this._zoom.start / 100,
	                    end : min + gap * this._zoom.end / 100
	                };
	            }
	            else if (axisType == 'time') {
	                // 最优解
	                max = min + gap * this._zoom.end / 100;
	                min = min + gap * this._zoom.start / 100;
	                var formatter = ecDate.getAutoFormatter(min, max).formatter;
	                return {
	                    start : ecDate.format(formatter, min),
	                    end : ecDate.format(formatter, max)
	                };
	            }
	
	            return {
	                start : '',
	                end : ''
	            };
	        },
	
	        /**
	         * 拖拽范围控制
	         */
	        __ondrift : function (shape, dx, dy) {
	            if (this.zoomOption.zoomLock) {
	                // zoomLock时把handle转成filler的拖拽
	                shape = this._fillerShae;
	            }
	
	            var detailSize = shape._type == 'filler' ? this._handleSize : 0;
	            if (this.zoomOption.orient == 'horizontal') {
	                if (shape.style.x + dx - detailSize <= this._location.x) {
	                    shape.style.x = this._location.x + detailSize;
	                }
	                else if (shape.style.x + dx + shape.style.width + detailSize
	                         >= this._location.x + this._location.width
	                ) {
	                    shape.style.x = this._location.x + this._location.width
	                                - shape.style.width - detailSize;
	                }
	                else {
	                    shape.style.x += dx;
	                }
	            }
	            else {
	                if (shape.style.y + dy - detailSize <= this._location.y) {
	                    shape.style.y = this._location.y + detailSize;
	                }
	                else if (shape.style.y + dy + shape.style.height + detailSize
	                         >= this._location.y + this._location.height
	                ) {
	                    shape.style.y = this._location.y + this._location.height
	                                - shape.style.height - detailSize;
	                }
	                else {
	                    shape.style.y += dy;
	                }
	            }
	
	            if (shape._type == 'filler') {
	                this._syncHandleShape();
	            }
	            else {
	                this._syncFillerShape();
	            }
	
	            if (this.zoomOption.realtime) {
	                this._syncData();
	            }
	
	            if (this.zoomOption.showDetail) {
	                var detail = this._getDetail();
	                this._startShape.style.text = this._startShape.highlightStyle.text = detail.start;
	                this._endShape.style.text = this._endShape.highlightStyle.text = detail.end;
	                this._startShape.style.textPosition = this._startShape.highlightStyle.textPosition;
	                this._endShape.style.textPosition = this._endShape.highlightStyle.textPosition;
	            }
	            return true;
	        },
	
	        __ondragend : function () {
	            if (this.zoomOption.showDetail) {
	                this._startShape.style.text = this._endShape.style.text = '=';
	                this._startShape.style.textPosition = this._endShape.style.textPosition = 'inside';
	                this.zr.modShape(this._startShape.id);
	                this.zr.modShape(this._endShape.id);
	                this.zr.refreshNextFrame();
	            }
	            this.isDragend = true;
	        },
	
	        /**
	         * 数据项被拖拽出去
	         */
	        ondragend : function (param, status) {
	            if (!this.isDragend || !param.target) {
	                // 没有在当前实例上发生拖拽行为则直接返回
	                return;
	            }
	
	            !this.zoomOption.realtime && this._syncData();
	
	            // 别status = {}赋值啊！！
	            status.dragOut = true;
	            status.dragIn = true;
	            if (!this._isSilence && !this.zoomOption.realtime) {
	                this.messageCenter.dispatch(
	                    ecConfig.EVENT.DATA_ZOOM,
	                    null,
	                    {zoom: this._zoom},
	                    this.myChart
	                );
	            }
	            status.needRefresh = false; // 会有消息触发fresh，不用再刷一遍
	            // 处理完拖拽事件后复位
	            this.isDragend = false;
	
	            return;
	        },
	
	        ondataZoom : function (param, status) {
	            status.needRefresh = true;
	            return;
	        },
	
	        absoluteZoom : function (param) {
	            this._zoom.start = param.start;
	            this._zoom.end = param.end;
	            this._zoom.start2 = param.start2;
	            this._zoom.end2 = param.end2;
	            this._syncShape();
	            this._syncData(true);
	            return;
	        },
	
	        rectZoom : function (param) {
	            if (!param) {
	                // 重置拖拽
	                //this.zoomOption.start =
	                //this.zoomOption.start2 =
	                this._zoom.start = this._zoom.start2 = 0;
	
	                //this.zoomOption.end =
	                //this.zoomOption.end2 =
	                this._zoom.end = this._zoom.end2 = 100;
	
	                this._syncShape();
	                this._syncData(true);
	                return this._zoom;
	            }
	            var gridArea = this.component.grid.getArea();
	            var rect = {
	                x : param.x,
	                y : param.y,
	                width : param.width,
	                height : param.height
	            };
	            // 修正方向框选
	            if (rect.width < 0) {
	                rect.x += rect.width;
	                rect.width = -rect.width;
	            }
	            if (rect.height < 0) {
	                rect.y += rect.height;
	                rect.height = -rect.height;
	            }
	            // console.log(rect,this._zoom);
	
	            // 剔除无效缩放
	            if (rect.x > gridArea.x + gridArea.width || rect.y > gridArea.y + gridArea.height) {
	                return false; // 无效缩放
	            }
	
	            // 修正框选超出
	            if (rect.x < gridArea.x) {
	                rect.x = gridArea.x;
	            }
	            if (rect.x + rect.width > gridArea.x + gridArea.width) {
	                rect.width = gridArea.x + gridArea.width - rect.x;
	            }
	            if (rect.y + rect.height > gridArea.y + gridArea.height) {
	                rect.height = gridArea.y + gridArea.height - rect.y;
	            }
	
	            var total;
	            var sdx = (rect.x - gridArea.x) / gridArea.width;
	            var edx = 1 - (rect.x + rect.width - gridArea.x) / gridArea.width;
	            var sdy = 1 - (rect.y + rect.height - gridArea.y) / gridArea.height;
	            var edy = (rect.y - gridArea.y) / gridArea.height;
	            // console.log('this',sdy,edy,this._zoom.start,this._zoom.end)
	            if (this.zoomOption.orient == 'horizontal') {
	                total = this._zoom.end - this._zoom.start;
	                this._zoom.start += total * sdx;
	                this._zoom.end -= total * edx;
	
	                total = this._zoom.end2 - this._zoom.start2;
	                this._zoom.start2 += total * sdy;
	                this._zoom.end2 -= total * edy;
	            }
	            else {
	                total = this._zoom.end - this._zoom.start;
	                this._zoom.start += total * sdy;
	                this._zoom.end -= total * edy;
	
	                total = this._zoom.end2 - this._zoom.start2;
	                this._zoom.start2 += total * sdx;
	                this._zoom.end2 -= total * edx;
	            }
	            //console.log(this._zoom.start,this._zoom.end,this._zoom.start2,this._zoom.end2)
	            //this.zoomOption.start = this._zoom.start;
	            //this.zoomOption.end = this._zoom.end;
	            //this.zoomOption.start2 = this._zoom.start2;
	            //this.zoomOption.end2 = this._zoom.end2;
	            //console.log(rect,gridArea,this._zoom,total)
	            this._syncShape();
	            this._syncData(true);
	            return this._zoom;
	        },
	
	        syncBackupData : function (curOption) {
	            var start;
	            var target = this._originalData['series'];
	            var curSeries = curOption.series;
	            var curData;
	            for (var i = 0, l = curSeries.length; i < l; i++) {
	                curData = curSeries[i].data || curSeries[i].eventList;
	                if (target[i]) {
	                    // dataZoom接管的
	                    start = Math.floor(this._zoom.start / 100 * target[i].length);
	                }
	                else {
	                    // 非dataZoom接管
	                    start = 0;
	                }
	                for (var j = 0, k = curData.length; j < k; j++) {
	                    //optionBackup.series[i].data[j + start] = curData[j];
	                    if (target[i]) {
	                        // 同步内部备份
	                        target[i][j + start] = curData[j];
	                    }
	                }
	            }
	        },
	
	        syncOption : function(magicOption) {
	            this.silence(true);
	            this.option = magicOption;
	            this.option.dataZoom = this.reformOption(this.option.dataZoom);
	            this.zoomOption = this.option.dataZoom;
	            if (!this.myChart.canvasSupported) {
	                // 不支持Canvas的强制关闭实时动画
	                this.zoomOption.realtime = false;
	            }
	
	            this.clear();
	            // 位置参数，通过计算所得x, y, width, height
	            this._location = this._getLocation();
	            // 缩放参数
	            this._zoom =  this._getZoom();
	
	            this._backupData();
	            if (this.option.dataZoom && this.option.dataZoom.show) {
	                this._buildShape();
	            }
	            this._syncData();
	
	            this.silence(false);
	        },
	
	        silence : function (s) {
	            this._isSilence = s;
	        },
	
	        getRealDataIndex : function (sIdx, dIdx) {
	            if (!this._originalData || (this._zoom.start === 0 && this._zoom.end == 100)) {
	                return dIdx;
	            }
	            var sreies = this._originalData.series;
	            if (sreies[sIdx]) {
	                return Math.floor(this._zoom.start / 100 * sreies[sIdx].length) + dIdx;
	            }
	            return -1;
	        },
	
	        /**
	         * 避免dataZoom带来两次refresh，不设refresh接口，resize重复一下buildshape逻辑
	         */
	        resize : function () {
	            this.clear();
	
	            // 位置参数，通过计算所得x, y, width, height
	            this._location = this._getLocation();
	            // 缩放参数
	            this._zoom =  this._getZoom();
	
	            if (this.option.dataZoom.show) {
	                this._buildShape();
	            }
	        }
	    };
	
	    zrUtil.inherits(DataZoom, Base);
	
	    __webpack_require__(229).define('dataZoom', DataZoom);
	
	    return DataZoom;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(262);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(264)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./app.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./app.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(263)();
	// imports
	
	
	// module
	exports.push([module.id, ".leftMenu {\n  width: 20%;\n  height: 100%;\n  background: #f2f0f1; }\n  .leftMenu .left_header {\n    height: 70px;\n    width: 100%;\n    background: #00aa9a;\n    color: #fff;\n    text-align: center;\n    line-height: 70px;\n    font-size: 24px; }\n  .leftMenu .menu {\n    width: 100%;\n    list-style: none;\n    padding: 0; }\n    .leftMenu .menu li {\n      height: 60px;\n      line-height: 60px;\n      border-bottom: 1px solid #ccc;\n      cursor: pointer;\n      padding: 5px 20px 0; }\n    .leftMenu .menu i {\n      font-size: 32px;\n      margin-right: 20px; }\n    .leftMenu .menu span {\n      font-size: 16px;\n      vertical-align: super; }\n\n.rightContent {\n  width: 80%;\n  height: 100%; }\n  .rightContent .content {\n    width: 100%;\n    border-left: 1px solid #dfdfdf; }\n    .rightContent .content li {\n      color: #fff; }\n  .rightContent .right_header {\n    width: 100%;\n    height: 70px;\n    background: #5a6378; }\n    .rightContent .right_header a {\n      color: #fff !important;\n      font-size: 16px; }\n    .rightContent .right_header a:hover {\n      color: #00a896 !important;\n      text-decoration: none; }\n    .rightContent .right_header .btn-reg {\n      border: 2px solid #00aa9a; }\n\nhtml, body {\n  height: 100%; }\n\n#react_app {\n  height: 100%;\n  width: 100%; }\n  #react_app #app {\n    height: 100%; }\n", ""]);
	
	// exports


/***/ },
/* 263 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=app_bundle.js.map